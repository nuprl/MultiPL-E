language: go_test.go
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, num := range arr {\n        if num < 0 {\n      \
    \      num = -num\n        }\n        result += (num % 10) + int(num / 10)\n \
    \   }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmptnz94g2d_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmptnz94g2d_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmptnz94g2d_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmptnz94g2d_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=37)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmptnz94g2d_test.go:46: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += count_digits(v)\n    }\n    return n\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnic8cdcy_test.go:21:14: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        if v%10 == 0 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v < 0 {\n          \
    \  v = -v\n        }\n        result += (int(v / 10) + 1) * 10\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpa08hivrg_test.go:46: expected '%!s(int=0)', got '%!s(int=30)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpa08hivrg_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=70)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpa08hivrg_test.go:46: expected '%!s(int=5)', got '%!s(int=70)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpa08hivrg_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=250)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpa08hivrg_test.go:46: expected '%!s(int=5)', got '%!s(int=210)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpa08hivrg_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=20)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmpa08hivrg_test.go:46: expected '%!s(int=1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n        if\
    \ v != 0 {\n            count += int(v / 10)\n            v %= 10\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpq7h7oarh_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpq7h7oarh_test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpq7h7oarh_test.go:51: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpq7h7oarh_test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpq7h7oarh_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpq7h7oarh_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        if v%10 == 0 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        if v%10 != 0 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp2ojze_3f_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp2ojze_3f_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp2ojze_3f_test.go:48: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp2ojze_3f_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    if sum\
    \ < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpklqixsox_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpklqixsox_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=5)', got '%!s(int=32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v > 0 {\n            n +=\
    \ count_nums([]int{v})\n        }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160350\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.(*headTailIndex).incTail(0x624238?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mspanset.go:341 +0xa5 fp=0xc020160360\
    \ sp=0xc020160358 pc=0x42eaa5\nruntime.(*spanSet).push(0x624218, 0x2af0cfc98870)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mspanset.go:76 +0x30 fp=0xc0201603b8\
    \ sp=0xc020160360 pc=0x42e570\nruntime.(*mcentral).uncacheSpan(0x0?, 0x0?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/mcentral.go:234 +0x8d fp=0xc0201603e0\
    \ sp=0xc0201603b8 pc=0x41636d\nruntime.(*mcache).refill(0x2af0a69b3688, 0x5)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mcache.go:158 +0x92 fp=0xc020160418\
    \ sp=0xc0201603e0 pc=0x4158d2\nruntime.(*mcache).nextFree(0x2af0a69b3688, 0x5)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:886 +0x85 fp=0xc020160460\
    \ sp=0xc020160418 pc=0x40c465\nruntime.mallocgc(0x8, 0x4fe600, 0x1)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1060\
    \ +0x32f fp=0xc0201604d8 sp=0xc020160460 pc=0x40c92f\nruntime.newobject(0x1000000000000?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259 +0x27 fp=0xc020160500\
    \ sp=0xc0201604d8 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc004425ff8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpxd5qdif5_test.go:19 +0x54 fp=0xc020160540 sp=0xc020160500\
    \ pc=0x4ef6b4\ncommand-line-arguments_test.count_nums({0xc004425ff0, 0x1, 0x40d027?})\n\
    \t/tmp/tmpxd5qdif5_test.go:19 +0x69 fp=0xc020160580 sp=0xc020160540 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc004425fe8, 0x1, 0x40d027?})\n\t/tmp/tmpxd5qdif5_test.go:19\
    \ +0x69 fp=0xc0201605c0 sp=0xc020160580 pc=0x4ef6c9\ncommand-line-a"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            sum\
    \ += v\n        } else {\n            sum += v % 10\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpxfrjkuja_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpxfrjkuja_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_nums_helper(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8853ehw_test.go:21:18: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v / 10)\n        v %= 10\n    }\n    return\
    \ n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += v\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpd6eje1pw_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpd6eje1pw_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            sum\
    \ += v\n        } else {\n            sum += v % 10\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpxfrjkuja_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpxfrjkuja_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        if v%10 == 0 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            sum\
    \ += int(v)\n        } else {\n            sum += int(v)%10\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdnx7swf__test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdnx7swf__test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdnx7swf__test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdnx7swf__test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpdnx7swf__test.go:47: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    var count int\n    for _, v := range arr {\n        if v < 0 {\n        \
    \    v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n\
    \    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpy4b2dzfz_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpy4b2dzfz_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpy4b2dzfz_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpy4b2dzfz_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpy4b2dzfz_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpy4b2dzfz_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            n +=\
    \ count_nums([]int{v})\n        } else {\n            n += count_nums([]int{v\
    \ / 10, v % 10})\n        }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170388\
    \ stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5203b6?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 20 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc020170398\
    \ sp=0xc020170390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201703c0 sp=0xc020170398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc004458110,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp927ztura_test.go:19 +0x71 fp=0xc020170400 sp=0xc0201703c0\
    \ pc=0x4ef6d1\ncommand-line-arguments_test.count_nums({0xc004458108, 0x1, 0x40d027?})\n\
    \t/tmp/tmp927ztura_test.go:19 +0x86 fp=0xc020170440 sp=0xc020170400 pc=0x4ef6e6\n\
    command-line-arguments_test.count_nums({0xc004458100, 0x1, 0x40d027?})\n\t/tmp/tmp927ztura_test.go:19\
    \ +0x86 fp=0xc020170480 sp=0xc020170440 pc=0x4ef6e6\ncommand-line-arguments_test.count_nums({0xc0044580f8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp927ztura_test.go:19 +0x86 fp=0xc0201704c0 sp=0xc020170480\
    \ pc=0x4ef6e6\ncommand-line-arguments_test.count_nums({0xc0044580f0, 0x1, 0x40d027?})\n\
    \t/tmp/tmp927ztura_test.go:19 +0x86 fp=0xc020170500 sp=0xc0201704c0 pc=0x4ef6e6\n\
    command-line-arguments_test.count_nums({0xc0044580e8, 0x1, 0x40d027?})\n\t/tmp/tmp927ztura_test.go:19\
    \ +0x86 fp=0xc020170540 sp=0xc020170500 pc=0x4ef6e6\ncommand-line-arguments_test.count_nums({0xc0044580e0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp927ztura_test.go:19 +0x86 fp=0xc020170580 sp=0xc020170540\
    \ pc=0x4ef6e6\ncommand-line-arguments_test.count_nums({0xc0044580d8, 0x1, 0x40d027?})\n\
    \t/tmp/tmp927ztura_test.go:19 +0x86 fp=0xc0201705c0 sp=0xc020170580 pc=0x4ef6e6\n\
    command-line-arguments_test.count_nums({0xc0044580d0, 0x1, 0x40d027?}"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            sum\
    \ += int(v%10)\n            v /= 10\n        }\n        sum += int(v)\n    }\n\
    \    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mbl5goj_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mbl5goj_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mbl5goj_test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mbl5goj_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mbl5goj_test.go:47: expected '%!s(int=5)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v)\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpssisog94_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpssisog94_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v < 0 {\n          \
    \  v = -v\n        }\n        result += (int(v / 10) + 1) * int(v % 10)\n    }\n\
    \    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpxy8ef3px_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpxy8ef3px_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=90)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=5)', got '%!s(int=90)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v > 0 {\n          \
    \  result += v\n        }\n    }\n    return result\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpmp89bleo_test.go:45: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpmp89bleo_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpmp89bleo_test.go:45: expected '%!s(int=4)', got '%!s(int=200)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpmp89bleo_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=69)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v / 10)\n        v %= 10\n    }\n    return\
    \ n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_nums_helper(v, 0)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowpfsxxi_test.go:21:18: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074501
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_nums([]int{v})\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc00439c110,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x47 fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6a7\ncommand-line-arguments_test.count_nums({0xc00439c108, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c100, 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21\
    \ +0x69 fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0f8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0f0, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c0e8, 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21\
    \ +0x69 fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0e0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0d8, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c0d0, 0x1, 0x40d027?})"
  timestamp: 1660074504
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v < 0 {\n          \
    \  v = -v\n        }\n        result += v % 10\n    }\n    return result\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp6mseh99s_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp6mseh99s_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp6mseh99s_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp6mseh99s_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp6mseh99s_test.go:46: expected '%!s(int=5)', got '%!s(int=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    var count int\n    for _, v := range arr {\n        if v < 0 {\n        \
    \    v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n\
    \    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpy4b2dzfz_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpy4b2dzfz_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpy4b2dzfz_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpy4b2dzfz_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpy4b2dzfz_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpy4b2dzfz_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v / 10)\n        v %= 10\n    }\n    return\
    \ n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += v\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpd6eje1pw_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpd6eje1pw_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            sum\
    \ += -v\n        } else {\n            sum += v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp79iri1vg_test.go:47: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp79iri1vg_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp79iri1vg_test.go:47: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp79iri1vg_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp79iri1vg_test.go:47: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_nums_helper(v, 0)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowpfsxxi_test.go:21:18: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074501
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n        if\
    \ v == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp72kfeyv1_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp72kfeyv1_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp72kfeyv1_test.go:50: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp72kfeyv1_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=20)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp72kfeyv1_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp72kfeyv1_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            sum\
    \ += v\n        } else {\n            sum += v % 10\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpxfrjkuja_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpxfrjkuja_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_nums_digits(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9e35z8vi_test.go:21:18: undefined: count_nums_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v < 0 {\n          \
    \  v = -v\n        }\n        result += (int(v / 10) + 1) * int(v % 10)\n    }\n\
    \    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpxy8ef3px_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpxy8ef3px_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=90)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=5)', got '%!s(int=90)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        if v%10 == 0 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    if sum\
    \ < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpklqixsox_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpklqixsox_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=5)', got '%!s(int=32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_nums([]int{v})\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc00439c110,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x47 fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6a7\ncommand-line-arguments_test.count_nums({0xc00439c108, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c100, 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21\
    \ +0x69 fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0f8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0f0, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c0e8, 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21\
    \ +0x69 fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0e0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0d8, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c0d0, 0x1, 0x40d027?})"
  timestamp: 1660074504
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    var sum int\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp_tb0k4pi_test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp_tb0k4pi_test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp_tb0k4pi_test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp_tb0k4pi_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp_tb0k4pi_test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            sum\
    \ += int(v%10)\n            v /= 10\n        }\n        sum += int(v)\n    }\n\
    \    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mbl5goj_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mbl5goj_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mbl5goj_test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mbl5goj_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mbl5goj_test.go:47: expected '%!s(int=5)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, num := range arr {\n        if num < 0 {\n      \
    \      num = -num\n        }\n        result += num\n    }\n    return result\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0nbrpx51_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0nbrpx51_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0nbrpx51_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0nbrpx51_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0nbrpx51_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    var count int = 0\n    for _, v := range arr {\n        if v < 0 {\n    \
    \        v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n  \
    \  }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpmfjafse2_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpmfjafse2_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpmfjafse2_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpmfjafse2_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpmfjafse2_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpmfjafse2_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v > 0 {\n            n +=\
    \ count_nums([]int{v})\n        }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160350\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.(*headTailIndex).incTail(0x624238?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mspanset.go:341 +0xa5 fp=0xc020160360\
    \ sp=0xc020160358 pc=0x42eaa5\nruntime.(*spanSet).push(0x624218, 0x2af0cfc98870)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mspanset.go:76 +0x30 fp=0xc0201603b8\
    \ sp=0xc020160360 pc=0x42e570\nruntime.(*mcentral).uncacheSpan(0x0?, 0x0?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/mcentral.go:234 +0x8d fp=0xc0201603e0\
    \ sp=0xc0201603b8 pc=0x41636d\nruntime.(*mcache).refill(0x2af0a69b3688, 0x5)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mcache.go:158 +0x92 fp=0xc020160418\
    \ sp=0xc0201603e0 pc=0x4158d2\nruntime.(*mcache).nextFree(0x2af0a69b3688, 0x5)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:886 +0x85 fp=0xc020160460\
    \ sp=0xc020160418 pc=0x40c465\nruntime.mallocgc(0x8, 0x4fe600, 0x1)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1060\
    \ +0x32f fp=0xc0201604d8 sp=0xc020160460 pc=0x40c92f\nruntime.newobject(0x1000000000000?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259 +0x27 fp=0xc020160500\
    \ sp=0xc0201604d8 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc004425ff8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpxd5qdif5_test.go:19 +0x54 fp=0xc020160540 sp=0xc020160500\
    \ pc=0x4ef6b4\ncommand-line-arguments_test.count_nums({0xc004425ff0, 0x1, 0x40d027?})\n\
    \t/tmp/tmpxd5qdif5_test.go:19 +0x69 fp=0xc020160580 sp=0xc020160540 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc004425fe8, 0x1, 0x40d027?})\n\t/tmp/tmpxd5qdif5_test.go:19\
    \ +0x69 fp=0xc0201605c0 sp=0xc020160580 pc=0x4ef6c9\ncommand-line-a"
  timestamp: 1660074502
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    var result int\n    for _, v := range arr {\n        if v < 0 {\n       \
    \     result -= v\n        } else {\n            result += v\n        }\n    }\n\
    \    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpverr2ckn_test.go:47: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpverr2ckn_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpverr2ckn_test.go:47: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpverr2ckn_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpverr2ckn_test.go:47: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, num := range arr {\n        result += count_nums_helper(num)\n\
    \    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnn7ij0ze_test.go:18:19: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074502
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_nums_helper(arr, v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdupnw6x5_test.go:21:18: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    var count int\n    for _, v := range arr {\n        if v < 0 {\n        \
    \    v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4l17_dn_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074502
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_nums_helper(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8853ehw_test.go:21:18: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v < 0 {\n          \
    \  v = -v\n        }\n        result += (int(v / 10) + 1) * int(v % 10)\n    }\n\
    \    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpxy8ef3px_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpxy8ef3px_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=90)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=5)', got '%!s(int=90)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v / 10)\n        v %= 10\n    }\n    return\
    \ n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, num := range arr {\n        if num < 0 {\n      \
    \      num = -num\n        }\n        result += (num / 10) + num % 10\n    }\n\
    \    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp9uwhabro_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp9uwhabro_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp9uwhabro_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp9uwhabro_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=37)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp9uwhabro_test.go:46: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_nums([]int{v})\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc00439c110,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x47 fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6a7\ncommand-line-arguments_test.count_nums({0xc00439c108, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c100, 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21\
    \ +0x69 fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0f8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0f0, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c0e8, 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21\
    \ +0x69 fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0e0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0d8, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c0d0, 0x1, 0x40d027?})"
  timestamp: 1660074504
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += count_nums_digits(v)\n    }\n    return n\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpipfg2otv_test.go:21:14: undefined: count_nums_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += v\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpd6eje1pw_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpd6eje1pw_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        if v%10 == 0 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v / 10)\n        v %= 10\n    }\n    return\
    \ n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v)\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpssisog94_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpssisog94_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v)\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpssisog94_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpssisog94_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    var result int\n    for _, v := range arr {\n        if v < 0 {\n       \
    \     v = -v\n        }\n        result += v % 10\n    }\n    return result\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpcrfyuvci_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpcrfyuvci_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpcrfyuvci_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpcrfyuvci_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpcrfyuvci_test.go:46: expected '%!s(int=5)', got '%!s(int=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_nums([]int{v})\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc00439c110,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x47 fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6a7\ncommand-line-arguments_test.count_nums({0xc00439c108, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c100, 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21\
    \ +0x69 fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0f8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0f0, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c0e8, 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21\
    \ +0x69 fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0e0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00439c0d8, 0x1, 0x40d027?})\n\
    \t/tmp/tmp9voqw49p_test.go:21 +0x69 fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00439c0d0, 0x1, 0x40d027?})"
  timestamp: 1660074504
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, num := range arr {\n        if num < 0 {\n      \
    \      num = -num\n        }\n        result += num / 10\n        result -= num\
    \ % 10\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmporlwwi8l_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmporlwwi8l_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=-18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmporlwwi8l_test.go:47: expected '%!s(int=5)', got '%!s(int=-28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmporlwwi8l_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmporlwwi8l_test.go:47: expected '%!s(int=5)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmporlwwi8l_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmporlwwi8l_test.go:47: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v < 0 {\n          \
    \  v = -v\n        }\n        result += v % 10\n    }\n    return result\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp6mseh99s_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp6mseh99s_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp6mseh99s_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp6mseh99s_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp6mseh99s_test.go:46: expected '%!s(int=5)', got '%!s(int=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v < 0 {\n          \
    \  v = -v\n        }\n        result += int(v)\n    }\n    return result\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmphef7b74i_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmphef7b74i_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmphef7b74i_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmphef7b74i_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmphef7b74i_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        if v%10 == 0 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            sum\
    \ += int(v)\n        } else {\n            sum += int(v)%10\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdnx7swf__test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdnx7swf__test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdnx7swf__test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdnx7swf__test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpdnx7swf__test.go:47: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            sum\
    \ += v\n        } else {\n            sum += v % 10\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpxfrjkuja_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpxfrjkuja_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v < 0 {\n          \
    \  v = -v\n        }\n        result += int(v / 10)\n        result -= int(v %\
    \ 10)\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpva5f5se7_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpva5f5se7_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=-18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpva5f5se7_test.go:47: expected '%!s(int=5)', got '%!s(int=-28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpva5f5se7_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpva5f5se7_test.go:47: expected '%!s(int=5)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpva5f5se7_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmpva5f5se7_test.go:47: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            n +=\
    \ count_nums([]int{v})\n        } else {\n            n += count_nums([]int{v\
    \ / 10, v % 10})\n        }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170388\
    \ stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5203b6?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 20 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc020170398\
    \ sp=0xc020170390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201703c0 sp=0xc020170398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc004458110,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp927ztura_test.go:19 +0x71 fp=0xc020170400 sp=0xc0201703c0\
    \ pc=0x4ef6d1\ncommand-line-arguments_test.count_nums({0xc004458108, 0x1, 0x40d027?})\n\
    \t/tmp/tmp927ztura_test.go:19 +0x86 fp=0xc020170440 sp=0xc020170400 pc=0x4ef6e6\n\
    command-line-arguments_test.count_nums({0xc004458100, 0x1, 0x40d027?})\n\t/tmp/tmp927ztura_test.go:19\
    \ +0x86 fp=0xc020170480 sp=0xc020170440 pc=0x4ef6e6\ncommand-line-arguments_test.count_nums({0xc0044580f8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp927ztura_test.go:19 +0x86 fp=0xc0201704c0 sp=0xc020170480\
    \ pc=0x4ef6e6\ncommand-line-arguments_test.count_nums({0xc0044580f0, 0x1, 0x40d027?})\n\
    \t/tmp/tmp927ztura_test.go:19 +0x86 fp=0xc020170500 sp=0xc0201704c0 pc=0x4ef6e6\n\
    command-line-arguments_test.count_nums({0xc0044580e8, 0x1, 0x40d027?})\n\t/tmp/tmp927ztura_test.go:19\
    \ +0x86 fp=0xc020170540 sp=0xc020170500 pc=0x4ef6e6\ncommand-line-arguments_test.count_nums({0xc0044580e0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp927ztura_test.go:19 +0x86 fp=0xc020170580 sp=0xc020170540\
    \ pc=0x4ef6e6\ncommand-line-arguments_test.count_nums({0xc0044580d8, 0x1, 0x40d027?})\n\
    \t/tmp/tmp927ztura_test.go:19 +0x86 fp=0xc0201705c0 sp=0xc020170580 pc=0x4ef6e6\n\
    command-line-arguments_test.count_nums({0xc0044580d0, 0x1, 0x40d027?}"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v)\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpssisog94_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpssisog94_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpssisog94_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v < 0 {\n          \
    \  v = -v\n        }\n        result += (int(v / 10) + 1) * int(v % 10)\n    }\n\
    \    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpxy8ef3px_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpxy8ef3px_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=90)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpxy8ef3px_test.go:46: expected '%!s(int=5)', got '%!s(int=90)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        if v%10 == 0 {\n            n++\n        }\n    }\n \
    \   return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpmx065wr__test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpmx065wr__test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpmx065wr__test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpmx065wr__test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpmx065wr__test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpmx065wr__test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074503
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += v\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpd6eje1pw_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpd6eje1pw_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpd6eje1pw_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n        if\
    \ v != 0 {\n            count += int(v / 10)\n            v %= 10\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpq7h7oarh_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpq7h7oarh_test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpq7h7oarh_test.go:51: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpq7h7oarh_test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpq7h7oarh_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpq7h7oarh_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0mmprn87_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0mmprn87_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    if sum\
    \ < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpklqixsox_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpklqixsox_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=5)', got '%!s(int=32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        if v%10 == 0 {\n            n++\n        }\n    }\n \
    \   return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpmx065wr__test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpmx065wr__test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpmx065wr__test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpmx065wr__test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpmx065wr__test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpmx065wr__test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074503
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        if v > 0 {\n            n += int(v / 10)\n          \
    \  v %= 10\n        }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpklvitwrj_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpklvitwrj_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpklvitwrj_test.go:49: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpklvitwrj_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpklvitwrj_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpklvitwrj_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074503
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        if v%10 == 0 {\n            n += 1\n        }\n    }\n\
    \    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpq0nhl0g7_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpq0nhl0g7_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpq0nhl0g7_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpq0nhl0g7_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpq0nhl0g7_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpq0nhl0g7_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074503
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        n += int(v / 10)\n        v %= 10\n    }\n    return\
    \ n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmph27ycwle_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmph27ycwle_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        if v%10 == 0 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        if v%10 == 0 {\n            n += 1\n        }\n    }\n\
    \    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpq0nhl0g7_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpq0nhl0g7_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpq0nhl0g7_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpq0nhl0g7_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpq0nhl0g7_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpq0nhl0g7_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074503
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, num := range arr {\n        if num < 0 {\n      \
    \      num = -num\n        }\n        result += num / 10\n        result -= num\
    \ % 10\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmporlwwi8l_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmporlwwi8l_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=-18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmporlwwi8l_test.go:47: expected '%!s(int=5)', got '%!s(int=-28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmporlwwi8l_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmporlwwi8l_test.go:47: expected '%!s(int=5)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmporlwwi8l_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmporlwwi8l_test.go:47: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpxllv9efc_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpxllv9efc_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v < 0 {\n          \
    \  v = -v\n        }\n        result += v % 10\n    }\n    return result\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp6mseh99s_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp6mseh99s_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp6mseh99s_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp6mseh99s_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp6mseh99s_test.go:46: expected '%!s(int=5)', got '%!s(int=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, num := range arr {\n        if num < 0 {\n      \
    \      num = -num\n        }\n        result += (num / 10) + num % 10\n    }\n\
    \    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp9uwhabro_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp9uwhabro_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp9uwhabro_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp9uwhabro_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=37)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp9uwhabro_test.go:46: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    var count int\n    for _, v := range arr {\n        if v < 0 {\n        \
    \    v = -v\n        }\n        count += count_nums_digits(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptxkijlvo_test.go:21:18: undefined: count_nums_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074503
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    var result int\n    for _, v := range arr {\n        if v < 0 {\n       \
    \     v = -v\n        }\n        result += int(v)\n    }\n    return result\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpusyqun7e_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpusyqun7e_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpusyqun7e_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpusyqun7e_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpusyqun7e_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074503
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    n := 0\n    for _, v := range arr {\n        if v < 0 {\n            v =\
    \ -v\n        }\n        if v > 0 {\n            n += int(v / 10)\n        }\n\
    \    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate :=\
    \ count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp03iiurz5_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp03iiurz5_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp03iiurz5_test.go:48: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp03iiurz5_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp03iiurz5_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp03iiurz5_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074503
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    var count int = 0\n    for _, v := range arr {\n        if v < 0 {\n    \
    \        v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n  \
    \  }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpmfjafse2_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpmfjafse2_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpmfjafse2_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpmfjafse2_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpmfjafse2_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpmfjafse2_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_nums_helper(v, 0)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowpfsxxi_test.go:21:18: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074501
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    if sum\
    \ < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpklqixsox_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpklqixsox_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpklqixsox_test.go:46: expected '%!s(int=5)', got '%!s(int=32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        if v%10 == 0 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpbx2zr9na_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpbx2zr9na_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    var count int\n    for _, v := range arr {\n        if v < 0 {\n        \
    \    v = -v\n        }\n        count += count_nums_helper(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpijiyd1jh_test.go:21:18: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074503
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += count_digits(v)\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63txowbq_test.go:21:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            sum\
    \ += v\n        } else {\n            sum += v % 10\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpxfrjkuja_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpxfrjkuja_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpxfrjkuja_test.go:47: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpciojgqja_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpciojgqja_test.go:46: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp957wj88__test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp957wj88__test.go:43: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    result := 0\n    for _, v := range arr {\n        if v < 0 {\n          \
    \  v = -v\n        }\n        result += int(v / 10)\n        result -= int(v %\
    \ 10)\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpva5f5se7_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpva5f5se7_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=-18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpva5f5se7_test.go:47: expected '%!s(int=5)', got '%!s(int=-28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpva5f5se7_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpva5f5se7_test.go:47: expected '%!s(int=5)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpva5f5se7_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmpva5f5se7_test.go:47: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074502
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n\
    \    count := 0\n    for _, v := range arr {\n        if v < 0 {\n           \
    \ v = -v\n        }\n        count += int(v / 10)\n        v %= 10\n    }\n  \
    \  return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpggqp0tn8_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpggqp0tn8_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074500
