name: HumanEval_67_fruit_distribution
language: go_test.go
prompt: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// In this task, you will be given a string that represents a number of apples\
  \ and oranges \n// that are distributed in a basket of fruit this basket contains\
  \ \n// apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n// the oranges and apples and an integer that represent the total\
  \ number of the fruits \n// in the basket return the number of the mango fruits\
  \ in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and 6 oranges\"\
  , 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\",3) -> 3\
  \ - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2\
  \ - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100\
  \ - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n"
tests: "func TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
  \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
  \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n\
  \     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     {\
  \ actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual:\
  \ candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"\
  1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges :=\
    \ s[1]\n    fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges\
    \ := s[1]\n    fruits := strings.Split(apples + oranges, \" \")\n    \n    apples\
    \ := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges, \" \"\
    )\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges, ",
  "    // Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    s :=\
    \ strings.Split(s, \" \")\n    var apples int\n    var oranges int\n    var mango\
    \ int\n    for _, v := range s {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    return n - apples - oranges - mango\n\
    }\n", "    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n\
    \    fruits := strings.Split(apples + \" \" + oranges, \" \")\n    total := 0\n\
    \    for _, fruit := range fruits {\n        if fruit == \"mango\" {\n       \
    \     total += n\n        }\n    }\n    return total\n}\n</code>\n<|/ a tags=go\
    \ |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c\
    \ |>\n<| c |>\nYou're welcome. I'm glad I could help.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n", " \
    \   s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n  \
    \  fruits := strings.Split(apples + \" \" + oranges, \" \")\n    total := 0\n\
    \    for _, fruit := range fruits {\n        if fruit == \"apples\" {\n      \
    \      total += n\n        } else if fruit == \"oranges\" {\n            total\
    \ += n\n        } else {\n            total += n\n        }\n    }\n    return\
    \ total\n}\n", "    \n    // Your code here\n    \n    return 0\n}\n", "    //\
    \ Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    s :=\
    \ strings.Split(s, \"and\")\n    apples := 0\n    oranges := 0\n    mangos :=\
    \ 0\n    for _, fruit := range s {\n        if fruit == \"apples\" {\n       \
    \     apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n", "    s := strings.Split(s, \" \")\n    apples := s[0]\n\
    \    oranges := s[1]\n    fruits := strings.Split(apples + oranges, \" \")\n \
    \   fruitsCount := 0\n    for _, fruit := range fruits {\n        if fruit ==\
    \ \"apples\" {\n            fruitsCount += n\n        } else if fruit == \"oranges\"\
    \ {\n            fruitsCount += n\n        } else if fruit == \"mango\" {\n  \
    \          fruitsCount += n\n        }\n    }\n    return fruitsCount\n}\n", " \
    \   s := strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mango\
    \ := 0\n    for _, fruit := range s {\n        if fruit == \"apples\" {\n    \
    \        apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    return n - apples\
    \ - oranges - mango\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    // Your code here\n    \n    \n    return 0\n}\n", "    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, item := range strings.Split(s,\
    \ \" \") {\n        switch item {\n        case \"apples\":\n            apples++\n\
    \        case \"oranges\":\n            oranges++\n        case \"mango\":\n \
    \           mango++\n        }\n    }\n    \n    return n - apples - oranges -\
    \ mango\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    s := strings.Split(s,\
    \ \" \")\n    var apples, oranges, mango int\n    for _, v := range s {\n    \
    \    if v == \"apples\" {\n            apples++\n        } else if v == \"oranges\"\
    \ {\n            oranges++\n        } else if v == \"mango\" {\n            mango++\n\
    \        }\n    }\n    return mango - (apples - oranges - n%apples)\n}\n", " \
    \   s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n  \
    \  fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    // Write your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    "]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
