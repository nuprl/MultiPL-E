name: HumanEval_67_fruit_distribution
language: go_test.go
prompt: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// In this task, you will be given a string that represents a number of apples\
  \ and oranges \n// that are distributed in a basket of fruit this basket contains\
  \ \n// apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n// the oranges and apples and an integer that represent the total\
  \ number of the fruits \n// in the basket return the number of the mango fruits\
  \ in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and 6 oranges\"\
  , 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\",3) -> 3\
  \ - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2\
  \ - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100\
  \ - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n"
tests: "func TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
  \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
  \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n\
  \     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     {\
  \ actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual:\
  \ candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"\
  1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges :=\
    \ s[1]\n    fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges\
    \ := s[1]\n    fruits := strings.Split(apples + oranges, \" \")\n    \n    apples\
    \ := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges, \" \"\
    )\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    \n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges, ",
  "    // Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    s :=\
    \ strings.Split(s, \" \")\n    var apples int\n    var oranges int\n    var mango\
    \ int\n    for _, v := range s {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    return n - apples - oranges - mango\n\
    }\n", "    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n\
    \    fruits := strings.Split(apples + \" \" + oranges, \" \")\n    total := 0\n\
    \    for _, fruit := range fruits {\n        if fruit == \"mango\" {\n       \
    \     total += n\n        }\n    }\n    return total\n}\n</code>\n<|/ a tags=go\
    \ |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c\
    \ |>\n<| c |>\nYou're welcome. I'm glad I could help.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n", " \
    \   s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n  \
    \  fruits := strings.Split(apples + \" \" + oranges, \" \")\n    total := 0\n\
    \    for _, fruit := range fruits {\n        if fruit == \"apples\" {\n      \
    \      total += n\n        } else if fruit == \"oranges\" {\n            total\
    \ += n\n        } else {\n            total += n\n        }\n    }\n    return\
    \ total\n}\n", "    \n    // Your code here\n    \n    return 0\n}\n", "    //\
    \ Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    s :=\
    \ strings.Split(s, \"and\")\n    apples := 0\n    oranges := 0\n    mangos :=\
    \ 0\n    for _, fruit := range s {\n        if fruit == \"apples\" {\n       \
    \     apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n", "    s := strings.Split(s, \" \")\n    apples := s[0]\n\
    \    oranges := s[1]\n    fruits := strings.Split(apples + oranges, \" \")\n \
    \   fruitsCount := 0\n    for _, fruit := range fruits {\n        if fruit ==\
    \ \"apples\" {\n            fruitsCount += n\n        } else if fruit == \"oranges\"\
    \ {\n            fruitsCount += n\n        } else if fruit == \"mango\" {\n  \
    \          fruitsCount += n\n        }\n    }\n    return fruitsCount\n}\n", " \
    \   s := strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mango\
    \ := 0\n    for _, fruit := range s {\n        if fruit == \"apples\" {\n    \
    \        apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    return n - apples\
    \ - oranges - mango\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    // Your code here\n    \n    \n    return 0\n}\n", "    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, item := range strings.Split(s,\
    \ \" \") {\n        switch item {\n        case \"apples\":\n            apples++\n\
    \        case \"oranges\":\n            oranges++\n        case \"mango\":\n \
    \           mango++\n        }\n    }\n    \n    return n - apples - oranges -\
    \ mango\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    s := strings.Split(s,\
    \ \" \")\n    var apples, oranges, mango int\n    for _, v := range s {\n    \
    \    if v == \"apples\" {\n            apples++\n        } else if v == \"oranges\"\
    \ {\n            oranges++\n        } else if v == \"mango\" {\n            mango++\n\
    \        }\n    }\n    return mango - (apples - oranges - n%apples)\n}\n", " \
    \   s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n  \
    \  fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    // Write your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    // Your code here\n    \n    \n    return 0\n}\n",
  "    // Write your code here\n    \n    var apples int\n    var oranges int\n  \
    \  var mango int\n    \n    apples = s.Substring(0, s.IndexOf(\"and\"))\n    oranges\
    \ = s.Substring(s.IndexOf(\"and\") + 3, s.IndexOf(\"and\") + 6)\n    mango = n\
    \ - apples - oranges\n    \n    return mango\n}\n</code>\n<|/ a tags=string,go,substring\
    \ |>\n<| a tags=string,go,substring |>\n<code>\npackage main\n\nimport (\n   \
    \ \"fmt\"\n    \"strings\"\n)\n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    apples := 0\n    oranges := 0\n    mangos := 0\n    \n  \
    \  for _, item := range strings.Split(s, \" \") {\n        if item == \"apples\"\
    \ {\n            apples++\n        } else if item == \"oranges\" {\n         \
    \   oranges++\n        } else if item == \"mango\" {\n            mangos++\n \
    \       }\n    }\n    \n    return n - apples - oranges - mangos\n}\n", "    s\
    \ := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    total := 0\n    for _, fruit\
    \ := range fruits {\n        if fruit == \"apples\" {\n            total += n\n\
    \        } else if fruit == \"oranges\" {\n            total += n\n        } else\
    \ {\n            total += n\n        }\n    }\n    return total - n\n}\n", " \
    \   var apples, oranges, mango int\n    var apples_count, oranges_count, mango_count\
    \ int\n    var basket []string\n    \n    apples, oranges, mango = s.split(\"\
    \ \")\n    apples_count, oranges_count, mango_count = apples.Int(), oranges.Int(),\
    \ mango.Int()\n    basket = make([]string, apples_count)\n    \n    for i := 0;\
    \ i < apples_count; i++ {\n        basket[i] = \"apples\"\n    }\n    for i :=\
    \ 0; i < oranges_count; i++ {\n        basket[apples_count + i] = \"oranges\"\n\
    \    }\n    for i := 0; i < mango_count; i++ {\n        basket[apples_count +\
    \ oranges_count + i] = \"mango\"\n    }\n    \n    result := 0\n    for _, fruit\
    \ := range basket {\n        if fruit == \"mango\" {\n            result += mango_count\n\
    \        }\n    }\n    \n    return result\n}\n", "    apples := 0\n    oranges\
    \ := 0\n    mangos := 0\n    for _, v := range strings.Split(s, \" \") {\n   \
    \     if v == \"apples\" {\n            apples++\n        } else if v == \"oranges\"\
    \ {\n            oranges++\n        } else {\n            mangos++\n        }\n\
    \    }\n    return n - apples - oranges - mangos\n}\n", "    s := strings.Split(s,\
    \ \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples\
    \ + \" \" + oranges, \" \")\n    apples := strings.Split(apples, \" \")\n    oranges\
    \ := strings.Split(oranges, \" \")\n    apples := strings.Split(apples, \" \"\
    )\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := ", "    var apples, oranges, mangoes int\n    \n    switch\
    \ {\n    case s[0] == \"0\":\n        apples = 0\n        oranges = 1\n      \
    \  mangoes = n\n    case s[0] == \"1\":\n        apples = 1\n        oranges =\
    \ n\n        mangoes = n\n    case s[0] == \"2\":\n        apples = n\n      \
    \  oranges = n\n        mangoes = n\n    case s[0] == \"3\":\n        apples =\
    \ n\n        oranges = n\n        mangoes = n\n    case s[0] == \"4\":\n     \
    \   apples = n\n        oranges = n\n        mangoes = n\n    case s[0] == \"\
    5\":\n        apples = n\n        oranges = n\n        mangoes = n\n    case s[0]\
    \ == \"6\":\n        apples = n\n        oranges = n\n        mangoes = n\n  \
    \  case s[0] == \"7\":\n        apples = n\n        oranges = n\n        mangoes\
    \ = n\n    case s[0] == \"8\":\n        apples = n\n        oranges = n\n    \
    \    mangoes = n\n    case s[0] == \"9\":\n        apples = n\n        oranges\
    \ = n\n        mangoes = n\n    case s[0] == \"10\":\n        apples = n\n   \
    \     oranges = n\n        mangoes = n\n    case s[0] == \"11\":\n        apples\
    \ = n\n        oranges = n\n        mangoes = n\n    case s[0] == \"12\":\n  \
    \      apples = n\n        oranges = n\n        mangoes = n\n    case s[0] ==\
    \ \"13\":\n        apples = n\n        oranges = n\n        mangoes = n\n    case\
    \ s[0] == \"14\":\n        apples = n\n        oranges = n\n        mangoes =\
    \ n\n    case s[0] == \"15\":\n        apples = n\n        oranges = n\n     \
    \   mangoes = n\n    case s[0] == \"16\":\n        apples = n\n        oranges\
    \ = n\n        mangoes = n\n    case s[0] == \"17\":\n        apples = n\n   \
    \     oranges = n\n        mangoes = n\n    case s[0] == \"18\":\n        apples\
    \ = n\n        oranges = n\n        mangoes = n\n    case s[0] == \"19\":\n  \
    \      apples = n\n        oranges = n\n        mangoes = n\n    case s[0] ==\
    \ \"20\":\n        apples = n\n        oranges = n\n        mangoes = n\n    case\
    \ s[0] == \"21\":\n        apples = n\n        oranges = n\n        mangoes =\
    \ n\n    case s[0] == \"22\":\n        apples = n\n        oranges = n", "   \
    \ s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    \n    s := strings.Split(s, \" \")\n\
    \    \n    apples := 0\n    oranges := 0\n    mango := 0\n    \n    for _, fruit\
    \ := range s {\n        if fruit == \"apples\" {\n            apples++\n     \
    \   } else if fruit == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    \n    return n - apples - oranges\
    \ - mango\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n  \
    \  fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Count(apples,\
    \ \" \")\n    oranges := strings.Count(oranges, \" \")\n    fruits := strings.Count(fruits,\
    \ \" \")\n    fruits -= n\n    return fruits\n}\n", "    s := strings.Split(s,\
    \ \" \")\n    apples := 0\n    oranges := 0\n    mango := 0\n    for _, fruit\
    \ := range s {\n        if fruit == \"apples\" {\n            apples++\n     \
    \   } else if fruit == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    return n - apples - oranges - mango\n\
    }\n", "    s := strings.Split(s, \" \")\n    n := strings.Split(n, \" \")\n  \
    \  \n    apples := 0\n    oranges := 0\n    mangos := 0\n    \n    for _, v :=\
    \ range s {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else {\n           \
    \ mangos++\n        }\n    }\n    \n    for _, v := range n {\n        if v ==\
    \ \"apples\" {\n            apples++\n        } else if v == \"oranges\" {\n \
    \           oranges++\n        } else {\n            mangos++\n        }\n   \
    \ }\n    \n    return apples - oranges - mangos\n}\n", "    s := strings.Split(s,\
    \ \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples\
    \ + oranges, \" \")\n    apples := strings.Split(apples, \" \")\n    oranges :=\
    \ strings.Split(oranges, \" \")\n    apples = strings.Split(apples, \" \")\n \
    \   oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(", "    s := strings.Split(s, \" \")\n \
    \   apples := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples +\
    \ oranges, \" \")\n    apples := strings.Count(apples, \" \")\n    oranges :=\
    \ strings.Count(oranges, \" \")\n    fruits := strings.Count(fruits, \" \")\n\
    \    apples -= n\n    oranges -= n\n    fruits -= n\n    return fruits - apples\
    \ - oranges\n}\n", "    \n    // Write your code here\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   s := strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos\
    \ := 0\n    for _, fruit := range s {\n        if fruit == \"apples\" {\n    \
    \        apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n", "    \n    // your code here\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    s := strings.Split(s, \" \")\n    \n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, fruit := range s {\n\
    \        if fruit == \"apples\" {\n            apples++\n        } else if fruit\
    \ == \"oranges\" {\n            oranges++\n        } else {\n            mango++\n\
    \        }\n    }\n    \n    return n - apples - oranges - mango\n}\n", "    s\
    \ := strings.Split(s, \"and\")\n    apples := 0\n    oranges := 0\n    mango :=\
    \ 0\n    for _, v := range s {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    return n - apples - oranges - mango\n\
    }\n", "    \n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n   \
    \ fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    s := strings.Split(s, \" \")\n    apples\
    \ := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples + oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.",
  "    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n   \
    \ fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    s := strings.Split(s, \" \")\n    apples\
    \ := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples + oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.",
  "    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n   \
    \ fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    s := strings.Split(s, \" \")\n    apples\
    \ := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples + \" \" + oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := ", "    var\
    \ apples int\n    var oranges int\n    var mango int\n    \n    switch s[0] {\n\
    \        case \"0\":\n            apples = 0\n            oranges = 1\n      \
    \      mango = 0\n            break\n        case \"1\":\n            apples =\
    \ 1\n            oranges = 0\n            mango = 0\n            break\n     \
    \   case \"2\":\n            apples = 1\n            oranges = 1\n           \
    \ mango = 0\n            break\n        case \"3\":\n            apples = 1\n\
    \            oranges = 1\n            mango = 1\n            break\n        case\
    \ \"4\":\n            apples = 1\n            oranges = 1\n            mango =\
    \ 1\n            break\n        case \"5\":\n            apples = 1\n        \
    \    oranges = 1\n            mango = 1\n            break\n        case \"6\"\
    :\n            apples = 1\n            oranges = 1\n            mango = 1\n  \
    \          break\n        case \"7\":\n            apples = 1\n            oranges\
    \ = 1\n            mango = 1\n            break\n        case \"8\":\n       \
    \     apples = 1\n            oranges = 1\n            mango = 1\n           \
    \ break\n        case \"9\":\n            apples = 1\n            oranges = 1\n\
    \            mango = 1\n            break\n        case \"10\":\n            apples\
    \ = 1\n            oranges = 1\n            mango = 1\n            break\n   \
    \     case \"11\":\n            apples = 1\n            oranges = 1\n        \
    \    mango = 1\n            break\n        case \"12\":\n            apples =\
    \ 1\n            oranges = 1\n            mango = 1\n            break\n     \
    \   case \"13\":\n            apples = 1\n            oranges = 1\n          \
    \  mango = 1\n            break\n        case \"14\":\n            apples = 1\n\
    \            oranges = 1\n            mango = 1\n            break\n        case\
    \ \"15\":\n            apples = 1\n            oranges = 1\n            mango\
    \ = 1\n            break\n        case \"16\":\n            apples = 1\n     \
    \       oranges = 1\n            mango = 1\n            break\n        case \"\
    17\":\n            apples = 1\n            oranges = 1\n            mango = 1\n\
    \            break\n        case \"18\":\n            apples = 1\n           \
    \ oranges = 1\n            mango = 1\n            break\n        case \"19\":\n\
    \            apples = 1\n            oranges = 1\n            mango = 1\n    \
    \        break\n        case \"20\":\n            apples = 1\n            oranges\
    \ = 1\n            mango = 1\n            break\n        case \"21\":\n      \
    \      apples = 1\n            oranges = 1\n            mango = 1\n          \
    \  break\n        case \"22\":\n            apples = 1\n            oranges =\
    \ 1\n            mango = 1\n            break\n        case \"23\":\n        \
    \    apples = 1\n            oranges = 1\n            mango = 1\n            break\n\
    \        case \"24\":\n            apples = 1\n            ", "    s := strings.Split(s,\
    \ \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples\
    \ + \" \" + oranges, \" \")\n    apples := strings.Split(apples, \" \")\n    oranges\
    \ := strings.Split(oranges, \" \")\n    apples := strings.Split(apples, \" \"\
    )\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := ", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    total := 0\n    for _, fruit\
    \ := range fruits {\n        if fruit == \"apples\" {\n            total += n\n\
    \        } else if fruit == \"oranges\" {\n            total += n\n        } else\
    \ if fruit == \"mango\" {\n            total += n\n        }\n    }\n    return\
    \ total\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   apples := 0\n    oranges := 0\n    mango := 0\n    \n    for _, v := range\
    \ strings.Split(s, \" \") {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else if\
    \ v == \"mango\" {\n            mango++\n        }\n    }\n    \n    return n\
    \ - apples - oranges - mango\n}\n", "    var apples, oranges, mango int\n    \n\
    \    apples, oranges, mango = s.SplitString(fruit_separator)\n    \n    if apples\
    \ == \"0\" {\n        apples = 0\n    }\n    if oranges == \"0\" {\n        oranges\
    \ = 0\n    }\n    if mango == \"0\" {\n        mango = 0\n    }\n    \n    if\
    \ apples == \"\" {\n        apples = 0\n    }\n    if oranges == \"\" {\n    \
    \    oranges = 0\n    }\n    if mango == \"\" {\n        mango = 0\n    }\n  \
    \  \n    if apples != \"\" {\n        apples = apples.ToInt()\n    }\n    if oranges\
    \ != \"\" {\n        oranges = oranges.ToInt()\n    }\n    if mango != \"\" {\n\
    \        mango = mango.ToInt()\n    }\n    \n    if apples < oranges {\n     \
    \   return apples - oranges - mango\n    }\n    if apples > oranges {\n      \
    \  return apples - mango - oranges\n    }\n    if apples == oranges {\n      \
    \  return apples - mango\n    }\n    return apples - oranges\n}\n", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n  \
    \  fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    s := strings.Split(s, \" \")\n    apples\
    \ := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples + oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    mango := 0\n    for _, fruit := range fruits {\n        if fruit\
    \ == \"mango\" {\n            mango++\n        }\n    }\n    return mango\n}\n",
  "    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n   \
    \ fruits := strings.Split(apples + \" \" + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := ", "    s := strings.Split(s, \" \")\n    apples := 0\n\
    \    oranges := 0\n    mango := 0\n    for _, v := range s {\n        if v ==\
    \ \"apples\" {\n            apples++\n        } else if v == \"oranges\" {\n \
    \           oranges++\n        } else {\n            mango++\n        }\n    }\n\
    \    return n - apples - oranges - mango\n}\n", "    s := strings.Split(s, \"\
    \ \")\n    apples := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples\
    \ + oranges, \" \")\n    apples := strings.Split(apples, \" \")\n    oranges :=\
    \ strings.Split(oranges, \" \")\n    apples := strings.Split(apples, \" \")\n\
    \    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    var apples, oranges, mango int\n    \n    switch s {\n  \
    \  case \"0 apples and 1 oranges\":\n        apples = 0\n        oranges = 1\n\
    \        mango = 0\n    case \"2 apples and 3 oranges\":\n        apples = 2\n\
    \        oranges = 3\n        mango = 0\n    case \"5 apples and 6 oranges\":\n\
    \        apples = 5\n        oranges = 6\n        mango = 0\n    case \"100 apples\
    \ and 1 oranges\":\n        apples = 100\n        oranges = 1\n        mango =\
    \ 0\n    case \"120 apples and 1 oranges\":\n        apples = 120\n        oranges\
    \ = 1\n        mango = 0\n    default:\n        fmt.Println(\"Invalid input\"\
    )\n    }\n    \n    return mango + apples - oranges\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for your answer. I am not allowed to use switch statements.\
    \ I edited my question to show what I have so far.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that does not use switch statements.\n<|/ c\
    \ |>\n<| c |>\nThank you for your answer. I edited my question to show what I\
    \ have so far.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ does not use switch statements.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"strings\"\n)\n", " \
    \   // Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    s :=\
    \ strings.Split(s, \"and\")\n    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    return n - apples\
    \ - oranges - mango\n}\n", "    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    \n    for _, v := range strings.Split(s, \" \") {\n        if v == \"apples\"\
    \ {\n            apples++\n        } else if v == \"oranges\" {\n            oranges++\n\
    \        } else if v == \"mango\" {\n            mango++\n        }\n    }\n \
    \   \n    return n - apples - oranges - mango\n}\n", "    s := strings.Split(s,\
    \ \" \")\n    n := strings.Split(s, \" \")\n    \n    apples := strings.Split(n[0],\
    \ \" \")\n    oranges := strings.Split(n[1], \" \")\n    mango := strings.Split(n[2],\
    \ \" \")\n    \n    apples := strings.Split(apples[0], \" \")\n    oranges :=\
    \ strings.Split(oranges[0], \" \")\n    mango := strings.Split(mango[0], \" \"\
    )\n    \n    apples := strings.Split(apples[1], \" \")\n    oranges := strings.Split(oranges[1],\
    \ \" \")\n    mango := strings.Split(mango[1], \" \")\n    \n    apples := strings.Split(apples[2],\
    \ \" \")\n    oranges := strings.Split(oranges[2], \" \")\n    mango := strings.Split(mango[2],\
    \ \" \")\n    \n    apples := strings.Split(apples[3], \" \")\n    oranges :=\
    \ strings.Split(oranges[3], \" \")\n    mango := strings.Split(mango[3], \" \"\
    )\n    \n    apples := strings.Split(apples[4], \" \")\n    oranges := strings.Split(oranges[4],\
    \ \" \")\n    mango := strings.Split(mango[4], \" \")\n    \n    apples := strings.Split(apples[5],\
    \ \" \")\n    oranges := strings.Split(oranges[5], \" \")\n    mango := strings.Split(mango[5],\
    \ \" \")\n    \n    apples := strings.Split(apples[6], \" \")\n    oranges :=\
    \ strings.Split(oranges[6], \" \")\n    mango := strings.Split(mango[6], \" \"\
    )\n    \n    apples := strings.Split(apples[7], \" \")\n    oranges := strings.Split(oranges[7],\
    \ \" \")\n    mango := strings.Split(mango[7], \" \")\n    \n    apples := strings.Split(apples[8],\
    \ \" \")\n    oranges := strings.Split(oranges[8], \" \")\n    mango := strings.Split(mango[8],\
    \ \" \")\n    \n    apples := strings.Split(apples[9], \" \")\n    oranges :=\
    \ strings.Split(oranges[9], \" \")\n    mango := strings.Split(mango[9], \" \"\
    )\n    \n    apples := strings.Split(apples[10], \" \")\n    oranges := strings.Split(oranges[10],\
    \ \" \")\n    mango := strings.Split(mango[10], \" \")\n    \n    apples := strings.Split(apples[11],\
    \ \" \")\n    oranges := strings.Split(oranges[11], \" \")\n    mang", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    s := strings.Split(s,\
    \ \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n    for _, fruit\
    \ := range s {\n        if fruit == \"apples\" {\n            apples++\n     \
    \   } else if fruit == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mangos++\n        }\n    }\n    return n - apples - oranges - mangos\n\
    }\n", "    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n\
    \    fruits := strings.Split(apples + \" \" + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := ", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    // Write your code here\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    s := strings.Split(s, \" \")\n    n := strings.Split(n, \" \")\n\
    \    \n    apples := 0\n    oranges := 0\n    mangos := 0\n    \n    for _, fruit\
    \ := range s {\n        if fruit == \"apples\" {\n            apples++\n     \
    \   }\n        if fruit == \"oranges\" {\n            oranges++\n        }\n \
    \   }\n    \n    for _, fruit := range n {\n        if fruit == \"mango\" {\n\
    \            mangos++\n        }\n    }\n    \n    return apples - oranges - mangos\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    s := strings.Split(s,\
    \ \" \")\n    var apples, oranges int\n    for _, v := range s {\n        if v\
    \ == \"apples\" {\n            apples++\n        } else if v == \"oranges\" {\n\
    \            oranges++\n        }\n    }\n    return n - apples - oranges\n}\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    s := strings.Split(s,\
    \ \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples\
    \ + oranges, \" \")\n    apples := strings.Split(apples, \" \")\n    oranges :=\
    \ strings.Split(oranges, \" \")\n    apples = append(apples, \"0\")\n    oranges\
    \ = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n    oranges =\
    \ append(oranges, \"0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges,\
    \ \"0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"\
    0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\"\
    )\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n\
    \    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n  \
    \  apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n    apples\
    \ = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n    apples =\
    \ append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n    apples = append(apples,\
    \ \"0\")\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"\
    0\")\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\"\
    )\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n\
    \    oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n  \
    \  oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n    oranges\
    \ = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n    oranges =\
    \ append(oranges, \"0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges,\
    \ \"0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"\
    0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\"\
    )\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n\
    \    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n  \
    \  apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n    apples\
    \ = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n    apples =\
    \ append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n    apples = append(apples,\
    \ \"0\")\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"\
    0\")\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\"\
    )\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n",
  "    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  var apples, oranges, mango int\n    \n    apples, oranges, mango = s.Split(\"\
    \ \")\n    \n    if apples != \"\" {\n        apples, _ = strconv.Atoi(apples)\n\
    \    }\n    if oranges != \"\" {\n        oranges, _ = strconv.Atoi(oranges)\n\
    \    }\n    if mango != \"\" {\n        mango, _ = strconv.Atoi(mango)\n    }\n\
    \    \n    return n - apples - oranges - mango\n}\n", "    s := strings.Split(s,\
    \ \" \")\n    var apples, oranges, mango int\n    for _, fruit := range s {\n\
    \        if fruit == \"apples\" {\n            apples++\n        } else if fruit\
    \ == \"oranges\" {\n            oranges++\n        } else {\n            mango++\n\
    \        }\n    }\n    return mango - apples - oranges - n\n}\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    apples := 0\n    oranges :=\
    \ 0\n    mangos := 0\n    \n    for _, v := range strings.Split(s, \" \") {\n\
    \        if v == \"apples\" {\n            apples++\n        } else if v == \"\
    oranges\" {\n            oranges++\n        } else {\n            mangos++\n \
    \       }\n    }\n    \n    return n - apples - oranges - mangos\n}\n", "    s\
    \ := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    \n    apples := strings.Count(apples,\
    \ \" \")\n    oranges := strings.Count(oranges, \" \")\n    fruits := strings.Count(fruits,\
    \ \" \")\n    \n    apples -= strings.Count(fruits, \"apples\")\n    oranges -=\
    \ strings.Count(fruits, \"oranges\")\n    fruits -= strings.Count(fruits, \"mango\"\
    )\n    \n    return n - apples - oranges - fruits\n}\n", "    \n    s := strings.Split(s,\
    \ \"and\")\n    \n    apples := 0\n    oranges := 0\n    mango := 0\n    \n  \
    \  for _, fruit := range s {\n        switch fruit {\n        case \"apple\":\n\
    \            apples++\n        case \"orange\":\n            oranges++\n     \
    \   case \"mango\":\n            mango++\n        }\n    }\n    \n    return n\
    \ - apples - oranges - mango\n}\n", "    s := strings.Split(s, \"and\")\n    apples\
    \ := 0\n    oranges := 0\n    mangos := 0\n    for _, fruit := range s {\n   \
    \     switch fruit {\n        case \"apple\":\n            apples++\n        case\
    \ \"orange\":\n            oranges++\n        case \"mango\":\n            mangos++\n\
    \        }\n    }\n    return n - apples - oranges - mangos\n}\n", "    s := strings.Split(s,\
    \ \" \")\n    n := strings.Split(n, \" \")\n    \n    apples := 0\n    oranges\
    \ := 0\n    mango := 0\n    \n    for _, fruit := range s {\n        if fruit\
    \ == \"apples\" {\n            apples++\n        } else if fruit == \"oranges\"\
    \ {\n            oranges++\n        } else {\n            mango++\n        }\n\
    \    }\n    \n    for _, fruit := range n {\n        if fruit == \"apples\" {\n\
    \            apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    \n    return mango\
    \ - (apples - oranges)\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges :=\
    \ s[1]\n    fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    s := strings.Split(s, \" \")\n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    for _, fruit := range s {\n    \
    \    if fruit == \"apples\" {\n            apples++\n        } else if fruit ==\
    \ \"oranges\" {\n            oranges++\n        } else {\n            mango++\n\
    \        }\n    }\n    return n - apples - oranges - mango\n}\n", "    s := strings.Split(s,\
    \ \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples\
    \ + oranges, \" \")\n    fruitsCount := 0\n    for _, fruit := range fruits {\n\
    \        if fruit == \"apples\" {\n            fruitsCount += n\n        } else\
    \ if fruit == \"oranges\" {\n            fruitsCount += n\n        } else if fruit\
    \ == \"mango\" {\n            fruitsCount += n\n        }\n    }\n    return fruitsCount\n\
    }\n", "    s := strings.Split(s, \" \")\n    var apples int\n    var oranges int\n\
    \    var mango int\n    for _, fruit := range s {\n        switch fruit {\n  \
    \      case \"apples\":\n            apples++\n        case \"oranges\":\n   \
    \         oranges++\n        case \"mango\":\n            mango++\n        }\n\
    \    }\n    return mango - apples - oranges - n\n}\n", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    var apples, oranges, mangoes int\n\
    \    var apples_count, oranges_count, mangoes_count int\n    \n    for _, v :=\
    \ range strings.Split(s, \" \") {\n        if v == \"apples\" {\n            apples++\n\
    \            apples_count++\n        } else if v == \"oranges\" {\n          \
    \  oranges++\n            oranges_count++\n        } else if v == \"mangoes\"\
    \ {\n            mangoes++\n            mangoes_count++\n        }\n    }\n  \
    \  \n    return mangoes - apples_count - oranges_count - mangoes_count\n}\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    s := strings.Split(s,\
    \ \" \")\n    m := make(map[string]int)\n    for _, v := range s {\n        m[v]++\n\
    \    }\n    for _, v := range m {\n        if v > n {\n            return v -\
    \ n\n        }\n    }\n    return 0\n}\n", "    s := strings.Split(s, \" \")\n\
    \    var apples, oranges, mango int\n    for _, v := range s {\n        if v ==\
    \ \"apples\" {\n            apples++\n        } else if v == \"oranges\" {\n \
    \           oranges++\n        } else if v == \"mango\" {\n            mango++\n\
    \        }\n    }\n    return mango - apples - oranges\n}\n", "    s := strings.Split(s,\
    \ \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n    for _, v :=\
    \ range s {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else {\n           \
    \ mangos++\n        }\n    }\n    return n - apples - oranges - mangos\n}\n",
  "    s := strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos\
    \ := 0\n    for _, fruit := range s {\n        if fruit == \"apples\" {\n    \
    \        apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n", "    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    \n    s := strings.Split(s, \" \")\n    for _, fruit := range s {\n     \
    \   if fruit == \"apples\" {\n            apples++\n        } else if fruit ==\
    \ \"oranges\" {\n            oranges++\n        } else if fruit == \"mango\" {\n\
    \            mango++\n        }\n    }\n    \n    return n - apples - oranges\
    \ - mango\n}\n", "    s := strings.Split(s, \" \")\n    apples := 0\n    oranges\
    \ := 0\n    mango := 0\n    for _, fruit := range s {\n        if fruit == \"\
    apples\" {\n            apples++\n        } else if fruit == \"oranges\" {\n \
    \           oranges++\n        } else {\n            mango++\n        }\n    }\n\
    \    return n - apples - oranges - mango\n}\n", "    var apples, oranges, mango\
    \ int\n    var totalApples, totalOranges, totalMango int\n    totalApples, totalOranges,\
    \ totalMango = 0, 0, 0\n    for _, v := range strings.Split(s, \" \") {\n    \
    \    if v == \"apples\" {\n            totalApples += n\n        } else if v ==\
    \ \"oranges\" {\n            totalOranges += n\n        } else if v == \"mango\"\
    \ {\n            totalMango += n\n        }\n    }\n    apples = totalApples -\
    \ totalOranges\n    oranges = totalOranges - totalMango\n    mango = totalMango\
    \ - apples - oranges\n    return mango\n}\n", "    s := strings.Split(s, \" \"\
    )\n    var apples, oranges, mango int\n    for _, v := range s {\n        if v\
    \ == \"apples\" {\n            apples++\n        } else if v == \"oranges\" {\n\
    \            oranges++\n        } else {\n            mango++\n        }\n   \
    \ }\n    return mango - (apples + oranges)\n}\n", "    apples := 0\n    oranges\
    \ := 0\n    mango := 0\n    \n    for _, s := range strings.Split(s, \" \") {\n\
    \        switch s {\n        case \"apples\":\n            apples++\n        case\
    \ \"oranges\":\n            oranges++\n        case \"mango\":\n            mango++\n\
    \        }\n    }\n    \n    return n - apples - oranges - mango\n}\n", "    s\
    \ := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples = append(apples,\
    \ oranges...)\n    oranges = append(oranges, apples...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, ", "    s := strings.Split(s, \" \"\
    )\n    apples := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples\
    \ + \" \" + oranges, \" \")\n    apples := strings.Split(apples, \" \")\n    oranges\
    \ := strings.Split(oranges, \" \")\n    apples := strings.Split(apples, \" \"\
    )\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := ", "    \n    s := strings.Split(s, \"and\")\n    \n\
    \    apples := 0\n    oranges := 0\n    mango := 0\n    \n    for _, fruit :=\
    \ range s {\n        switch fruit {\n        case \"apple\":\n            apples++\n\
    \        case \"orange\":\n            oranges++\n        case \"mango\":\n  \
    \          mango++\n        }\n    }\n    \n    return n - apples - oranges -\
    \ mango\n}\n", "    \n    s := strings.Split(s, \" \")\n    \n    apples := 0\n\
    \    oranges := 0\n    mangos := 0\n    \n    for _, v := range s {\n        if\
    \ v == \"apples\" {\n            apples++\n        } else if v == \"oranges\"\
    \ {\n            oranges++\n        } else if v == \"mango\" {\n            mangos++\n\
    \        }\n    }\n    \n    return n - apples - oranges - mangos\n}\n", "   \
    \ var apples, oranges, mangoes int\n    \n    apples, oranges, mangoes = s.split(\"\
    \ \")\n    \n    apples, oranges, mangoes = apples.Int(), oranges.Int(), mangoes.Int()\n\
    \    \n    return mangoes - n - apples - oranges\n}\n", "    s := strings.Split(s,\
    \ \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples\
    \ + oranges, \" \")\n    total := 0\n    for _, fruit := range fruits {\n    \
    \    if fruit == \"apples\" {\n            total += n\n        } else if fruit\
    \ == \"oranges\" {\n            total += n\n        } else if fruit == \"mango\"\
    \ {\n            total += n\n        }\n    }\n    return total\n}\n", "    s\
    \ := strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos :=\
    \ 0\n    for _, fruit := range s {\n        if fruit == \"apples\" {\n       \
    \     apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n", "    s := strings.Split(s, \" \")\n    apples := s[0]\n\
    \    oranges := s[1]\n    fruits := strings.Split(apples + oranges, \" \")\n \
    \   apples := strings.Count(apples, \"a\")\n    oranges := strings.Count(oranges,\
    \ \"o\")\n    fruits := strings.Count(fruits, \"a\")\n    fruits -= n\n    fruits\
    \ -= apples\n    fruits -= oranges\n    return fruits\n}\n", "    s := strings.Split(s,\
    \ \" \")\n    var apples, oranges, mangoes int\n    for _, fruit := range s {\n\
    \        switch fruit {\n        case \"apples\":\n            apples++\n    \
    \    case \"oranges\":\n            oranges++\n        case \"mangoes\":\n   \
    \         mangoes++\n        }\n    }\n    return mangoes - apples - oranges -\
    \ n\n}\n", "    var apples, oranges, mango int\n    var fruits []string\n    \n\
    \    for _, s := range strings.Split(s, \" \") {\n        switch s {\n       \
    \ case \"apples\":\n            apples++\n        case \"oranges\":\n        \
    \    oranges++\n        case \"mango\":\n            mango++\n        default:\n\
    \            fruits = append(fruits, s)\n        }\n    }\n    \n    return mango\
    \ + apples - oranges - fruit_distribution(fruits, n)\n}\n", "    \n    s := strings.Split(s,\
    \ \" \")\n    \n    var apples, oranges, mango int\n    \n    for _, v := range\
    \ s {\n        if v == \"apples\" {\n            apples++\n        } else if v\
    \ == \"oranges\" {\n            oranges++\n        } else if v == \"mango\" {\n\
    \            mango++\n        }\n    }\n    \n    return mango - apples - oranges\
    \ - n\n}\n", "    var apples, oranges, mango int\n    \n    apples, oranges, mango\
    \ = s.Split(\"and\")\n    \n    if apples != \"\" {\n        apples, _ = apples.Split()\n\
    \    }\n    if oranges != \"\" {\n        oranges, _ = oranges.Split()\n    }\n\
    \    if mango != \"\" {\n        mango, _ = mango.Split()\n    }\n    \n    return\
    \ n - apples - oranges - mango\n}\n", "    s := strings.Split(s, \" \")\n    apples\
    \ := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples + \" \" + oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := ", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    s := strings.Split(s, \" \")\n    var apples,\
    \ oranges, mango int\n    for _, v := range s {\n        if v == \"apples\" {\n\
    \            apples++\n        } else if v == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    return mango - apples\
    \ - oranges\n}\n", "    \n    // Write your code here\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   s := strings.Split(s, \" \")\n    var apples int\n    var oranges int\n  \
    \  var mango int\n    for _, fruit := range s {\n        if fruit == \"apples\"\
    \ {\n            apples++\n        } else if fruit == \"oranges\" {\n        \
    \    oranges++\n        } else {\n            mango++\n        }\n    }\n    return\
    \ n - apples - oranges - mango\n}\n", "    \n    // Write your code here\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    var apples, oranges, mango int\n  \
    \  \n    apples, oranges, mango = s.Split(\" \")\n    \n    apples, oranges, mango\
    \ = apples.Int(), oranges.Int(), mango.Int()\n    \n    if apples == 0 && oranges\
    \ == 0 && mango == 0 {\n        return n\n    }\n    \n    if apples == 0 {\n\
    \        return mango\n    }\n    \n    if oranges == 0 {\n        return apples\
    \ + mango\n    }\n    \n    if apples + oranges == 0 {\n        return apples\
    \ + mango + oranges\n    }\n    \n    if apples + oranges + mango == 0 {\n   \
    \     return apples + mango + oranges + mango\n    }\n    \n    return apples\
    \ + oranges + mango\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    var apples, oranges, mango int\n    switch s {\n    case \"0 apples\
    \ and 1 oranges\":\n        apples = 0\n        oranges = 1\n        mango = 0\n\
    \    case \"2 apples and 3 oranges\":\n        apples = 2\n        oranges = 3\n\
    \        mango = 0\n    case \"5 apples and 6 oranges\":\n        apples = 5\n\
    \        oranges = 6\n        mango = 0\n    case \"7 apples and 8 oranges\":\n\
    \        apples = 7\n        oranges = 8\n        mango = 0\n    case \"9 apples\
    \ and 10 oranges\":\n        apples = 9\n        oranges = 10\n        mango =\
    \ 0\n    case \"11 apples and 12 oranges\":\n        apples = 11\n        oranges\
    \ = 12\n        mango = 0\n    case \"13 apples and 14 oranges\":\n        apples\
    \ = 13\n        oranges = 14\n        mango = 0\n    case \"15 apples and 16 oranges\"\
    :\n        apples = 15\n        oranges = 16\n        mango = 0\n    case \"17\
    \ apples and 18 oranges\":\n        apples = 17\n        oranges = 18\n      \
    \  mango = 0\n    case \"19 apples and 20 oranges\":\n        apples = 19\n  \
    \      oranges = 20\n        mango = 0\n    case \"21 apples and 22 oranges\"\
    :\n        apples = 21\n        oranges = 22\n        mango = 0\n    case \"23\
    \ apples and 24 oranges\":\n        apples = 23\n        oranges = 24\n      \
    \  mango = 0\n    case \"25 apples and 26 oranges\":\n        apples = 25\n  \
    \      oranges = 26\n        mango = 0\n    case \"27 apples and 28 oranges\"\
    :\n        apples = 27\n        oranges = 28\n        mango = 0\n    case \"29\
    \ apples and 30 oranges\":\n        apples = 29\n        oranges = 30\n      \
    \  mango = 0\n    case \"31 apples and 32 oranges\":\n        apples = 31\n  \
    \      oranges = 32\n        mango = 0\n    case \"33 apples and 34 oranges\"\
    :\n        apples = 33\n        oranges = 34\n        mango = 0\n    case \"35\
    \ apples and 36 oranges\":\n        apples = 35\n        oranges = 36\n      \
    \  mango = 0\n    case \"37 apples and 38 oranges\":\n        apples = 37\n  \
    \      oranges = 38\n        mango = 0\n    case \"39 apples and 40 oranges\"\
    :\n        apples = 39\n        oranges = 40\n        mango = 0\n    case \"41\
    \ apples and 42 oranges\":\n        apples = 41\n        orange", "    \n    //\
    \ Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    s := strings.Split(s,\
    \ \" \")\n    n := strings.Split(n, \" \")\n    \n    apples := 0\n    oranges\
    \ := 0\n    mangos := 0\n    \n    for _, v := range s {\n        if v == \"apples\"\
    \ {\n            apples++\n        }\n        if v == \"oranges\" {\n        \
    \    oranges++\n        }\n        if v == \"mango\" {\n            mangos++\n\
    \        }\n    }\n    \n    for _, v := range n {\n        if v == \"apples\"\
    \ {\n            apples++\n        }\n        if v == \"oranges\" {\n        \
    \    oranges++\n        }\n        if v == \"mango\" {\n            mangos++\n\
    \        }\n    }\n    \n    return apples - oranges - mangos\n}\n", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    s := strings.Split(s,\
    \ \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n    for _, fruit\
    \ := range s {\n        if fruit == \"apples\" {\n            apples++\n     \
    \   } else if fruit == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mangos++\n        }\n    }\n    return n - apples - oranges - mangos\n\
    }\n", "    \n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n   \
    \ fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.", "    \n    \n    var apples int\n    var oranges\
    \ int\n    var mango int\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    s := strings.Split(s, \" \")\n    apples\
    \ := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples + \" \" + oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := ", "    //\
    \ Write your code here\n    \n    var apples, oranges, mangos = 0, 0, 0\n    \n\
    \    switch s[0] {\n        case \"0\":\n            apples = n\n        case\
    \ \"1\":\n            oranges = n\n        case \"2\":\n            mangos = n\n\
    \        case \"3\":\n            apples = n\n        case \"4\":\n          \
    \  oranges = n\n        case \"5\":\n            mangos = n\n        case \"6\"\
    :\n            apples = n\n        case \"7\":\n            oranges = n\n    \
    \    case \"8\":\n            mangos = n\n        case \"9\":\n            apples\
    \ = n\n        case \"10\":\n            oranges = n\n        case \"11\":\n \
    \           mangos = n\n        case \"12\":\n            apples = n\n       \
    \ case \"13\":\n            oranges = n\n        case \"14\":\n            mangos\
    \ = n\n        case \"15\":\n            apples = n\n        case \"16\":\n  \
    \          oranges = n\n        case \"17\":\n            mangos = n\n       \
    \ case \"18\":\n            apples = n\n        case \"19\":\n            oranges\
    \ = n\n        case \"20\":\n            mangos = n\n        case \"21\":\n  \
    \          apples = n\n        case \"22\":\n            oranges = n\n       \
    \ case \"23\":\n            mangos = n\n        case \"24\":\n            apples\
    \ = n\n        case \"25\":\n            oranges = n\n        case \"26\":\n \
    \           mangos = n\n        case \"27\":\n            apples = n\n       \
    \ case \"28\":\n            oranges = n\n        case \"29\":\n            mangos\
    \ = n\n        case \"30\":\n            apples = n\n        case \"31\":\n  \
    \          oranges = n\n        case \"32\":\n            mangos = n\n       \
    \ case \"33\":\n            apples = n\n        case \"34\":\n            oranges\
    \ = n\n        case \"35\":\n            mangos = n\n        case \"36\":\n  \
    \          apples = n\n        case \"37\":\n            oranges = n\n       \
    \ case \"38\":\n            mangos = n\n        case \"39\":\n            apples\
    \ = n\n        case \"40\":\n            oranges = n\n        case \"41\":\n \
    \           mangos = n\n        case \"42\":\n            apples = n\n       \
    \ case \"43\":\n            oranges = n\n        case \"44\":\n            mangos\
    \ = n\n        case \"45\":\n            apples = n\n        case \"46\":\n  \
    \          oranges = n\n        case \"", "    s := strings.Split(s, \" \")\n\
    \    apples := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples +\
    \ oranges, \" \")\n    fruits := append(fruits, \"mango\")\n    fruits := strings.Join(fruits,\
    \ \" \")\n    fruits := strings.Replace(fruits, \"mango\", \"mango\", 1)\n   \
    \ fruits := strings.Replace(fruits, \"apples\", \"apple\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"oranges\", \"orange\", 1)\n    fruits := strings.Replace(fruits, \"apple\"\
    , \"apples\", 1)\n    fruits := strings.Replace(fruits, \"orange\", \"oranges\"\
    , 1)\n    fruits := strings.Replace(fruits, \"apples\", \"apple\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"oranges\", \"orange\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"apple\", \"apples\", 1)\n    fruits := strings.Replace(fruits, \"orange\"\
    , \"oranges\", 1)\n    fruits := strings.Replace(fruits, \"apples\", \"apple\"\
    , 1)\n    fruits := strings.Replace(fruits, \"oranges\", \"orange\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"apple\", \"apples\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"orange\", \"oranges\", 1)\n    fruits := strings.Replace(fruits, \"apples\"\
    , \"apple\", 1)\n    fruits := strings.Replace(fruits, \"oranges\", \"orange\"\
    , 1)\n    fruits := strings.Replace(fruits, \"apple\", \"apples\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"orange\", \"oranges\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"apples\", \"apple\", 1)\n    fruits := strings.Replace(fruits, \"oranges\"\
    , \"orange\", 1)\n    fruits := strings.Replace(fruits, \"apple\", \"apples\"\
    , 1)\n    fruits := strings.Replace(fruits, \"orange\", \"oranges\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"apples\", \"apple\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"oranges\", \"orange\", 1)\n    fruits := strings.Replace(fruits, \"apple\"\
    , \"apples\", 1)\n    fruits := strings.Replace(fruits, \"orange\", \"oranges\"\
    , 1)\n    fruits := strings.Replace(fruits, \"apples\", \"apple\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"oranges\", \"orange\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"apple\", \"apples\", 1)\n    fruits := strings.Replace(fruits, \"orange\"\
    , \"oranges\", 1)\n    fruits := ", "    s := strings.Split(s, \" \")\n    apples\
    \ := s[0]\n    oranges := s[1]\n    fruits := strings.Split(apples + oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.",
  "    s := strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mango\
    \ := 0\n    for _, v := range s {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    return n - apples - oranges - mango\n\
    }\n", "    // Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  s := strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n   \
    \ fruits := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    mango := 0\n    for\
    \ _, fruit := range fruits {\n        if fruit == \"mango\" {\n            mango++\n\
    \        }\n    }\n    return mango\n}\n", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    s := strings.Split(s, \" \")\n    apples := s[0]\n\
    \    oranges := s[1]\n    fruits := strings.Split(apples + oranges, \" \")\n \
    \   total := 0\n    for _, fruit := range fruits {\n        if fruit == \"apples\"\
    \ {\n            total += n\n        } else if fruit == \"oranges\" {\n      \
    \      total += n\n        } else {\n            total += n\n        }\n    }\n\
    \    return total\n}\n", "    s := strings.Split(s, \" \")\n    apples := s[0]\n\
    \    oranges := s[1]\n    fruits := strings.Split(apples + oranges, \" \")\n \
    \   apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    apples := 0\n \
    \   oranges := 0\n    mango := 0\n    \n    for _, fruit := range strings.Split(s,\
    \ \" \") {\n        if fruit == \"apples\" {\n            apples++\n        }\
    \ else if fruit == \"oranges\" {\n            oranges++\n        } else {\n  \
    \          mango++\n        }\n    }\n    \n    return n - apples - oranges -\
    \ mango\n}\n", "    s := strings.Split(s, \" \")\n    apples := 0\n    oranges\
    \ := 0\n    mango := 0\n    for _, fruit := range s {\n        if fruit == \"\
    apples\" {\n            apples++\n        } else if fruit == \"oranges\" {\n \
    \           oranges++\n        } else {\n            mango++\n        }\n    }\n\
    \    return n - apples - oranges - mango\n}\n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    apples := 0\n    oranges := 0\n    mangos :=\
    \ 0\n    \n    for _, v := range strings.Split(s, \" \") {\n        if v == \"\
    apples\" {\n            apples++\n        } else if v == \"oranges\" {\n     \
    \       oranges++\n        } else if v == \"mangoes\" {\n            mangos++\n\
    \        }\n    }\n    \n    return n - apples - oranges - mangos\n}\n", "   \
    \ \n    // Write your code here\n    \n    \n    return 0\n}\n", "    s := strings.Split(s,\
    \ \"and\")\n    apples := 0\n    oranges := 0\n    mango := 0\n    for _, fruit\
    \ := range s {\n        switch fruit {\n        case \"apple\":\n            apples++\n\
    \        case \"orange\":\n            oranges++\n        case \"mango\":\n  \
    \          mango++\n        }\n    }\n    return n - apples - oranges - mango\n\
    }\n", "    \n    var apples, oranges, mango int\n    \n    apples, oranges, mango\
    \ = s.Split(\"and\")\n    \n    var apples_count, oranges_count, mango_count int\n\
    \    \n    apples_count, oranges_count, mango_count = apples.Int(), oranges.Int(),\
    \ mango.Int()\n    \n    if apples_count > oranges_count {\n        return apples_count\
    \ - oranges_count\n    }\n    \n    if apples_count < oranges_count {\n      \
    \  return oranges_count - apples_count\n    }\n    \n    if apples_count == oranges_count\
    \ {\n        return mango_count - apples_count - oranges_count\n    }\n    \n\
    \    return 0\n}\n", "    // Write your code here\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    s := strings.Split(s, \" \")\n    apples := s[0]\n  \
    \  oranges := s[1]\n    fruits := strings.Split(apples + oranges, \" \")\n   \
    \ apples := strings.Count(apples, \"a\")\n    oranges := strings.Count(oranges,\
    \ \"o\")\n    fruits := strings.Count(fruits, \"a\")\n    mango := n - apples\
    \ - oranges - fruits\n    return mango\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
