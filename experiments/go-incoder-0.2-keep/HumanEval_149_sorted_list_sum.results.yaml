language: go_test.go
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    sort.Strings(lst)\n    result := []string{}\n    for _, word\
    \ := range lst {\n        if word != \"\" {\n            result += []string{word}\n\
    \        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy97auua8_test.go:22:5: undefined: sort

    /tmp/tmpy97auua8_test.go:26:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpy97auua8_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    sort.Strings(lst)\n    result := make([]string, 0, len(lst))\n\
    \    for _, s := range lst {\n        if len(s)%2 != 0 {\n            continue\n\
    \        }\n        result := append(result, s)\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn1touwim_test.go:22:5: undefined: sort

    /tmp/tmpn1touwim_test.go:28:9: result declared but not used

    /tmp/tmpn1touwim_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var index int\n    var length int\n\
    \    for index = 0; index < len(lst); index++ {\n        length = len(lst[index])\n\
    \        if length%2 != 0 {\n            continue\n        }\n        result :=\
    \ append(result, lst[index])\n    }\n    sort.Strings(result)\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnn7w5l8i_test.go:30:9: result declared but not used

    /tmp/tmpnn7w5l8i_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    sort.Slice(lst, func(i, j int)\
    \ bool {\n        return len(lst[i]) < len(lst[j])\n    })\n    return lst\n}\n\
    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdmptsbah_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := make([]string, 0)\n    for _, item := range lst {\n\
    \        if item != \"\" {\n            result = append(result, item)\n      \
    \  }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbu_jltg9_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, word := range lst {\n      \
    \  if word != \"\" {\n            result += append(result, word)\n        }\n\
    \    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjjwzrwj7_test.go:25:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpjjwzrwj7_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    sort.Strings(lst)\n    result := []string{}\n    for _, word\
    \ := range lst {\n        if wordLen := len(word); wordLen % 2 != 0 {\n      \
    \      continue\n        }\n        result := append(result, word)\n    }\n  \
    \  sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkkfpblvo_test.go:22:5: undefined: sort

    /tmp/tmpkkfpblvo_test.go:28:9: result declared but not used

    /tmp/tmpkkfpblvo_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    sort.Strings(lst)\n    result := []string{}\n    for _, word\
    \ := range lst {\n        if word != \"\" {\n            result += []string{word}\n\
    \        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy97auua8_test.go:22:5: undefined: sort

    /tmp/tmpy97auua8_test.go:26:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpy97auua8_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := []string{}\n    for _, word := range lst {\n     \
    \   if word != \"\" {\n            result += word\n        }\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4l52amss_test.go:25:13: invalid operation: result += word (mismatched
    types []string and string)

    /tmp/tmp4l52amss_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ v%2 == 1 {\n            result = append(result, v)\n        }\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jiqtymy_test.go:24:12: invalid operation: v % 2 (mismatched types string
    and untyped int)

    /tmp/tmp1jiqtymy_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    sort.Slice(lst, func(i, j int)\
    \ bool {\n        return len(lst[i]) < len(lst[j])\n    })\n    return lst\n}\n\
    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdmptsbah_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := make([]string, 0, len(lst))\n    seen := make(map[string]bool,\
    \ len(lst))\n    for _, word := range lst {\n        if seen[word] {\n       \
    \     continue\n        }\n        seen[word] = true\n        result = append(result,\
    \ word)\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe17qv3ag_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, word := range lst {\n      \
    \  if word != \"\" {\n            result += append(result, word)\n        }\n\
    \    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjjwzrwj7_test.go:25:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpjjwzrwj7_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := make([]string, 0)\n    for _, word := range lst {\n\
    \        if word != \"\" {\n            result += append(result, word)\n     \
    \   }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdqf4f6s8_test.go:25:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpdqf4f6s8_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    sort.Slice(lst, func(i, j int)\
    \ bool {\n        return len(lst[i]) < len(lst[j])\n    })\n    return lst\n}\n\
    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdmptsbah_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    sort.Strings(lst)\n    result := []string{}\n    for _, word\
    \ := range lst {\n        if word != \"\" {\n            result += []string{word}\n\
    \        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy97auua8_test.go:22:5: undefined: sort

    /tmp/tmpy97auua8_test.go:26:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpy97auua8_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := make([]string, 0)\n    for _, s := range lst {\n \
    \       if len(s)%2 != 0 {\n            continue\n        }\n        result :=\
    \ append(result, s)\n    }\n    sort.Strings(result)\n    return result\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2lj2mmsp_test.go:27:9: result declared but not used

    /tmp/tmp2lj2mmsp_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    sort.Strings(lst)\n    result :=\
    \ make([]string, 0, len(lst))\n    for _, s := range lst {\n        if len(s)%2\
    \ != 0 {\n            continue\n        }\n        result := append(result, s)\n\
    \    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2zg8tibv_test.go:23:5: undefined: sort

    /tmp/tmp2zg8tibv_test.go:29:9: result declared but not used

    /tmp/tmp2zg8tibv_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, word := range lst {\n      \
    \  length := len(word)\n        if length%2 == 1 {\n            word = word[0:length-1]\n\
    \        }\n        result = append(result, word)\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjhyth3_z_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, value := range lst {\n     \
    \   if len(value) % 2 == 1 {\n            result = append(result, value)\n   \
    \     }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2f9j9l00_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := make([]string, 0)\n    seen := make(map[string]bool)\n\
    \    for _, word := range lst {\n        if _, ok := seen[word]; !ok {\n     \
    \       seen[word] = true\n            result = append(result, word)\n       \
    \ }\n    }\n    for _, word := range result {\n        sort.Strings(lst)\n   \
    \     sort.Strings(result)\n        if word != lst[len(lst)-1] {\n           \
    \ sort.Strings(lst)\n            sort.Strings(result)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpds46qa3b_test.go:31:9: undefined: sort

    /tmp/tmpds46qa3b_test.go:32:9: undefined: sort

    /tmp/tmpds46qa3b_test.go:34:13: undefined: sort

    /tmp/tmpds46qa3b_test.go:35:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    sort.Strings(lst)\n    for _, s :=\
    \ range lst {\n        if len(s)%2 == 1 {\n            result = append(result,\
    \ s)\n        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7cxj4o7b_test.go:23:5: undefined: sort

    /tmp/tmp7cxj4o7b_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    sort.Strings(lst)\n    result :=\
    \ []string{}\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n    \
    \        continue\n        }\n        result := append(result, v)\n    }\n   \
    \ sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76qjxgrx_test.go:23:5: undefined: sort

    /tmp/tmp76qjxgrx_test.go:29:9: result declared but not used

    /tmp/tmp76qjxgrx_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := make([]string, 0)\n    sort.Strings(lst)\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            result = append(result,\
    \ word)\n        }\n    }\n    sort.Strings(result)\n    return result\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmktxkssq_test.go:23:5: undefined: sort

    /tmp/tmpmktxkssq_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    sort.Strings(lst)\n    var result []string\n    for _, s :=\
    \ range lst {\n        if strings.Count(s, \"\") % 2 != 0 {\n            result\
    \ = append(result, s)\n        }\n    }\n    sort.Strings(result)\n    return\
    \ result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptagxec42_test.go:22:5: undefined: sort

    /tmp/tmptagxec42_test.go:25:12: undefined: strings

    /tmp/tmptagxec42_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, word := range lst {\n      \
    \  if word != \"\" {\n            result := append(result, word)\n        }\n\
    \    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnr_i_2v4_test.go:25:13: result declared but not used

    /tmp/tmpnr_i_2v4_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    sort.Strings(lst)\n    result :=\
    \ make([]string, 0, len(lst))\n    for _, word := range lst {\n        if word\
    \ != \"\" {\n            result += []string{word}\n        }\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdhvja3y_test.go:23:5: undefined: sort

    /tmp/tmphdhvja3y_test.go:27:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmphdhvja3y_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    sort.Strings(lst)\n    result :=\
    \ make([]string, 0)\n    for _, v := range lst {\n        if v%2 == 1 {\n    \
    \        continue\n        }\n        result = append(result, v)\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqutx2kh0_test.go:23:5: undefined: sort

    /tmp/tmpqutx2kh0_test.go:26:12: invalid operation: v % 2 (mismatched types string
    and untyped int)

    /tmp/tmpqutx2kh0_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := make([]string, len(lst))\n    i := 0\n    for _, s\
    \ := range lst {\n        if i % 2 == 0 {\n            result[i] = s\n       \
    \ }\n        i++\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjrkw600h_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := []string{}\n    sort.Strings(lst)\n    for _, word\
    \ := range lst {\n        if len(word) % 2 == 1 {\n            word = word + \"\
    z\"\n        }\n        result = append(result, word)\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9aw8q2d6_test.go:23:5: undefined: sort

    /tmp/tmp9aw8q2d6_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    sort.Strings(lst)\n    result := make([]string, 0, len(lst))\n\
    \    for _, word := range lst {\n        if len(word) % 2 != 0 {\n           \
    \ continue\n        }\n        result := append(result, word)\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy5in0l4t_test.go:22:5: undefined: sort

    /tmp/tmpy5in0l4t_test.go:28:9: result declared but not used

    /tmp/tmpy5in0l4t_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := make([]string, 0)\n    sort.Strings(lst)\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            result = append(result,\
    \ word)\n        }\n    }\n    sort.Strings(result)\n    return result\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmktxkssq_test.go:23:5: undefined: sort

    /tmp/tmpmktxkssq_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    sort.Strings(lst)\n    result :=\
    \ make([]string, 0, len(lst))\n    for _, s := range lst {\n        if len(s)%2\
    \ != 0 {\n            continue\n        }\n        result := append(result, s)\n\
    \    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2zg8tibv_test.go:23:5: undefined: sort

    /tmp/tmp2zg8tibv_test.go:29:9: result declared but not used

    /tmp/tmp2zg8tibv_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := make([]string, 0)\n    length := make(map[string]int)\n\
    \    for _, word := range lst {\n        length := length[word]\n        if length%2\
    \ == 1 {\n            fmt.Println(length)\n            fmt.Println(word)\n   \
    \     }\n        if length%2 == 0 {\n            fmt.Println(length)\n       \
    \     fmt.Println(word)\n        }\n        if length%2 == 1 {\n            fmt.Println(length)\n\
    \            fmt.Println(word)\n        }\n        if length%2 == 0 {\n      \
    \      fmt.Println(length)\n            fmt.Println(word)\n        }\n    }\n\
    \    for _, word := range lst {\n        length := length[word]\n        if length%2\
    \ == 1 {\n            fmt.Println(length)\n            fmt.Println(word)\n   \
    \     }\n        if length%2 == 0 {\n            fmt.Println(length)\n       \
    \     fmt.Println(word)\n        }\n        if length%2 == 1 {\n            fmt.Println(length)\n\
    \            fmt.Println(word)\n        }\n        if length%2 == 0 {\n      \
    \      fmt.Println(length)\n            fmt.Println(word)\n        }\n    }\n\
    \    for _, word := range lst {\n        length := length[word]\n        if length%2\
    \ == 1 {\n            fmt.Println(length)\n            fmt.Println(word)\n   \
    \     }\n        if length%2 == 0 {\n            fmt.Println(length)\n       \
    \     fmt.Println(word)\n        }\n        if length%2 == 1 {\n            fmt.Println(length)\n\
    \            fmt.Println(word)\n        }\n        if length%2 == 0 {\n      \
    \      fmt.Println(length)\n            fmt.Println(word)\n        }\n    }\n\
    \    for _, word := range lst {\n        length := length[word]\n        if length%2\
    \ == 1 {\n            fmt.Println(length)\n            fmt.Println(word)\n   \
    \     }\n        if length%2 == 0 {\n            fmt.Println(length)\n       \
    \     fmt.Println(word)\n        }\n        if length%2 == 1 {\n            fmt.Println(length)\n\
    \            fmt.Println(word)\n        }\n        if length%2 == 0 {\n      \
    \      fmt.Println(length)\n            fmt.Println(word)\n        }\n    }\n\
    \    for _, word := range lst {\n        length := length[word]\n        if length%2\
    \ == 1 {\n            fmt.Println(length)\n            fmt.Println(word)\n   \
    \     }\n        if length%2 == 0 {\n            fmt.Println(length)\n       \
    \     fmt.Println(word)\n        }\n        if length%2 == 1 {\n            fmt.Println(length)\n\
    \            fmt.Println(word)\n        }\n        if length%2 == 0 {\n      \
    \      fmt.Println(length)\n            fmt.Println(word)\n        }\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdxygq2bj_test.go:119:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ strings.Count(s, \" \") % 2 != 0 {\n            result = append(result, s)\n\
    \        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg2a18pdi_test.go:24:12: undefined: strings

    /tmp/tmpg2a18pdi_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    sort.Strings(lst)\n    for _, v :=\
    \ range lst {\n        if strings.Count(v, \" \") % 2 == 1 {\n            sort.Strings(result)\n\
    \            result = append(result, v)\n        }\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr_qlsal8_test.go:23:5: undefined: sort

    /tmp/tmpr_qlsal8_test.go:25:12: undefined: strings

    /tmp/tmpr_qlsal8_test.go:26:13: undefined: sort

    /tmp/tmpr_qlsal8_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    sort.Strings(lst)\n    result :=\
    \ make([]string, 0, len(lst))\n    for _, word := range lst {\n        if len(word)\
    \ % 2 == 1 {\n            word = word + \"z\"\n        }\n        result = append(result,\
    \ word)\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp8xfu0lu_test.go:23:5: undefined: sort

    /tmp/tmpp8xfu0lu_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := make([]string, 0)\n    seen := make(map[string]bool)\n\
    \    for _, word := range lst {\n        if seen[word] {\n            continue\n\
    \        }\n        seen[word] = true\n        result = append(result, word)\n\
    \    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpie0rjhcl_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    sort.Strings(lst)\n    var result []string\n    for _, s :=\
    \ range lst {\n        if strings.Count(s, \" \") % 2 == 1 {\n            sort.Strings(lst)\n\
    \        }\n    }\n    for _, s := range lst {\n        if strings.Count(s, \"\
    \ \") % 2 == 1 {\n            sort.Strings(lst)\n        }\n    }\n    for _,\
    \ s := range lst {\n        if strings.Count(s, \" \") % 2 == 1 {\n          \
    \  sort.Strings(lst)\n        }\n    }\n    for _, s := range lst {\n        if\
    \ strings.Count(s, \" \") % 2 == 1 {\n            sort.Strings(lst)\n        }\n\
    \    }\n    for _, s := range lst {\n        if strings.Count(s, \" \") % 2 ==\
    \ 1 {\n            sort.Strings(lst)\n        }\n    }\n    for _, s := range\
    \ lst {\n        if strings.Count(s, \" \") % 2 == 1 {\n            sort.Strings(lst)\n\
    \        }\n    }\n    for _, s := range lst {\n        if strings.Count(s, \"\
    \ \") % 2 == 1 {\n            sort.Strings(lst)\n        }\n    }\n    for _,\
    \ s := range lst {\n        if strings.Count(s, \" \") % 2 == 1 {\n          \
    \  sort.Strings(lst)\n        }\n    }\n    for _, s := range lst {\n        if\
    \ strings.Count(s, \" \") % 2 == 1 {\n            sort.Strings(lst)\n        }\n\
    \    }\n    for _, s := range lst {\n        if strings.Count(s, \" \") % 2 ==\
    \ 1 {\n            sort.Strings(lst)\n        }\n    }\n    for _, s := range\
    \ lst {\n        if strings.Count(s, \" \") % 2 == 1 {\n            sort.Strings(lst)\n\
    \        }\n    }\n    for _, s := range lst {\n        if strings.Count(s, \"\
    \ \") % 2 == 1 {\n            sort.Strings(lst)\n        }\n    }\n    for _,\
    \ s := range lst {\n        if strings.Count(s, \" \") % 2 == 1 {\n          \
    \  sort.Strings(lst)\n        }\n    }\n    for _, s := range lst {\n        if\
    \ strings.Count(s, \" \") % 2 == 1 {\n            sort.Strings(lst)\n        }\n\
    \    }\n    for _, s := range lst {\n        if strings.Count(s, \" \") % 2 ==\
    \ 1 {\n            sort.Strings(lst)\n        }\n    }\n    for _, s := range\
    \ lst {\n        if strings.Count(s, \" \") % 2 == 1 {\n            sort.Strings(lst)\n\
    \        }\n    }\n    for _, s := range lst {\n        if strings.Count(s, \"\
    \ \") % 2 == 1 {\n            \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp58yq8y1x_test.go:107:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    sort.Strings(lst)\n    result := make([]string, 0, len(lst))\n\
    \    for _, word := range lst {\n        if word != \"\" {\n            result\
    \ += append(result, word)\n        }\n    }\n    sort.Strings(result)\n    return\
    \ result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7bfllu7l_test.go:22:5: undefined: sort

    /tmp/tmp7bfllu7l_test.go:26:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp7bfllu7l_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, word := range lst {\n      \
    \  if len(word) % 2 != 0 {\n            result = append(result, word)\n      \
    \  }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpclo0kz_q_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := make([]string, len(lst))\n    i := 0\n    for _, s\
    \ := range lst {\n        if i % 2 == 0 {\n            result[i] = s\n       \
    \ }\n        i++\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjrkw600h_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbv54yz33_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbv54yz33_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    sort.Slice(lst, func(i, j int)\
    \ bool {\n        return len(lst[i]) < len(lst[j])\n    })\n    return lst\n}\n\
    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdmptsbah_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074023
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    sort.Strings(lst)\n    result :=\
    \ make([]string, 0)\n    for _, s := range lst {\n        if strings.Count(s,\
    \ \"\") % 2 != 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqyfvnmk7_test.go:23:5: undefined: sort

    /tmp/tmpqyfvnmk7_test.go:26:12: undefined: strings

    /tmp/tmpqyfvnmk7_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    result := []string{}\n    for _, word := range lst {\n     \
    \   if len(word) % 2 == 1 {\n            fmt.Println(word)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "a\naaa\nb\nd\nb\nc\na\nd\na\na\nb\nb\nc\nc\na\n--- FAIL: TestSorted_List_Sum\
    \ (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpmyjf1l5m_test.go:50:\
    \ expected '[aa]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n\
    \        tmpmyjf1l5m_test.go:50: expected '[AI asdf school]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpmyjf1l5m_test.go:50:\
    \ expected '[abcd dcba]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpmyjf1l5m_test.go:50: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpmyjf1l5m_test.go:50:\
    \ expected '[cc dd aaaa bbbb]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074025
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hsd_i_2_test.go:277:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwhym9sxb_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwhym9sxb_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Write your code here\n    \n    \n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkvpc0j46_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkvpc0j46_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074024
