language: go_test.go
name: HumanEval_84_solve
results:
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    digit := N % 10\n    N = N / 10\n\
    \    for i := 0; i < N; i++ {\n        sum += digit\n        result += \"1\"\n\
    \        digit = N % 10\n        N = N / 10\n    }\n    result += \"0\"\n    result\
    \ += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n  \
    \  result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"\
    0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result\
    \ += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n  \
    \  result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"\
    0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result\
    \ += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n  \
    \  result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"\
    0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result\
    \ += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n  \
    \  result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"\
    0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result\
    \ += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n  \
    \  result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"\
    0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result\
    \ += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n  \
    \  result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"\
    0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result\
    \ += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n  \
    \  result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"\
    0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result\
    \ += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n  \
    \  result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"\
    0\"\n    result += \"0\"\n    result += \"0\"\n    result += \"0\"\n    result\
    \ += \"0\"\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5tqwrjo9_test.go:121:6: expected ''('', found TestSolve

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for i < N {\n        s += fmt.Sprintf(\"%0*b\", i, 2)\n\
    \        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.13s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpchsfw45b_test.go:45: expected '1', got
  timestamp: 1660075319
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * pow(2, i)\n        N /= 10\n    }\n    for i := 0; i < len(result); i++\
    \ {\n        if sum > 0 {\n            result += string(sum % 2)\n           \
    \ sum /= 2\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppwgjjy7p_test.go:22:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for i < N {\n        s += fmt.Sprintf(\"%b\", N%2)\n \
    \       N = N / 2\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpiunm0xys_test.go:46: expected '1', got '0001011'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpiunm0xys_test.go:46: expected '110', got '01101'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpiunm0xys_test.go:46: expected\
    \ '1100', got '11001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpiunm0xys_test.go:46:\
    \ expected '1001', got '101100'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpiunm0xys_test.go:46: expected '10010', got '1100001'\nFAIL\nFAIL\t\
    command-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    n := N\n    sum := 0\n    for n > 0 {\n        sum += n % 2\n    \
    \    n /= 2\n    }\n    for i := 0; i < sum; i++ {\n        s += \"1\"\n    }\n\
    \    return s\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp4xxtt9up_test.go:49: expected '1', got '111111'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp4xxtt9up_test.go:49: expected '110', got '1111'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmp4xxtt9up_test.go:49: expected\
    \ '1100', got '1111'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp4xxtt9up_test.go:49:\
    \ expected '1001', got '11111'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmp4xxtt9up_test.go:49: expected '10010', got '111111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    for i < N {\n        sum += int(N % 10) * i\n        N =\
    \ N / 10\n        i++\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpfksvb56d_test.go:46: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpfksvb56d_test.go:46: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpfksvb56d_test.go:46: expected '1100',\
    \ got '4'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpfksvb56d_test.go:46:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpfksvb56d_test.go:46: expected '10010', got '24'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * pow(2, i)\n  \
    \      N /= 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2vib1l8_test.go:21:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    \n    for i := 0; i < N; i++ {\n\
    \        digit += N % 2\n        sum += digit\n        N /= 2\n    }\n    \n \
    \   for i := 0; i < sum; i++ {\n        result += fmt.Sprintf(\"%v\", digit)\n\
    \    }\n    \n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpi_2qw3km_test.go:53: expected '1', got '3333333'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpi_2qw3km_test.go:53: expected '110', got '33333333'\n  \
    \  --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpi_2qw3km_test.go:53: expected\
    \ '1100', got '3333333333'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n    \
    \    tmpi_2qw3km_test.go:53: expected '1001', got '3333333333333'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpi_2qw3km_test.go:53: expected '10010',\
    \ got '33333333333333'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    var i int\n    var sum int\n    for i = 0; i < N; i++ {\n      \
    \  sum += int(N % 10) * int(N / 10)\n        N = N / 10\n    }\n    result = fmt.Sprintf(\"\
    %d\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp0j5ipe19_test.go:47: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp0j5ipe19_test.go:47: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp0j5ipe19_test.go:47: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp0j5ipe19_test.go:47:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmp0j5ipe19_test.go:47: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * pow(2, i)\n  \
    \      N = N / 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3v_4wam_test.go:21:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    x := N\n    y := N\n    z := N\n    w := N\n    x %= 10\n    y %= 10\n\
    \    z %= 10\n    w %= 10\n    for {\n        sum += x\n        x /= 10\n    \
    \    if x == 0 {\n            break\n        }\n    }\n    for {\n        sum\
    \ += y\n        y /= 10\n        if y == 0 {\n            break\n        }\n \
    \   }\n    for {\n        sum += z\n        z /= 10\n        if z == 0 {\n   \
    \         break\n        }\n    }\n    for {\n        sum += w\n        w /= 10\n\
    \        if w == 0 {\n            break\n        }\n    }\n    return fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"%0*d\", len(fmt.Sprintf(\"\
    %0*d\", len(fmt.Sprintf(\"%0*d\", len(\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpop5bxl8h_test.go:57:6: expected ''('', found TestSolve

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    n := N\n    for i := 0; i < n; i++ {\n        sum += int(N % 2)\n   \
    \     N = N / 2\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpcg5ox1v8_test.go:45: expected '1', got '6'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpcg5ox1v8_test.go:45: expected '110', got '4'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpcg5ox1v8_test.go:45: expected '1100',\
    \ got '4'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpcg5ox1v8_test.go:45:\
    \ expected '1001', got '5'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpcg5ox1v8_test.go:45: expected '10010', got '6'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 2\n        sum += digit\n        N = N / 2\n    }\n    result\
    \ = fmt.Sprintf(\"%d\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpqojkx4of_test.go:48: expected '1', got '7'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpqojkx4of_test.go:48: expected '110', got '8'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpqojkx4of_test.go:48: expected '1100',\
    \ got '10'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpqojkx4of_test.go:48:\
    \ expected '1001', got '13'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmpqojkx4of_test.go:48: expected '10010', got '14'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    for i < N {\n        sum += int(N % 10) * pow(2, i)\n   \
    \     N /= 10\n        i++\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa7z8oc2r_test.go:22:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  sum += digit\n        digit *= 2\n    }\n    for i := N; i > 0; i-- {\n   \
    \     result += strconv.Itoa(sum%2)\n        sum /= 2\n    }\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp290n8hdv_test.go:27:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  sum += int(N % 10) * digit\n        digit *= 2\n        N /= 10\n    }\n  \
    \  result += fmt.Sprintf(\"%d\", sum)\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpkpe0qq6d_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpkpe0qq6d_test.go:48: expected '110', got '0'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpkpe0qq6d_test.go:48: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpkpe0qq6d_test.go:48:\
    \ expected '1001', got '0'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpkpe0qq6d_test.go:48: expected '10010', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N = N / 10\n    }\n    if sum > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", sum)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpa4og28oa_test.go:48: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpa4og28oa_test.go:48: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpa4og28oa_test.go:48: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpa4og28oa_test.go:48:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpa4og28oa_test.go:48: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N /= 10\n    }\n    for i := 0; i < len(strconv.Itoa(sum));\
    \ i++ {\n        result += strconv.Itoa(sum % 2)\n        sum /= 2\n    }\n  \
    \  return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9hce3ixk_test.go:25:25: undefined: strconv

    /tmp/tmp9hce3ixk_test.go:26:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for i < N {\n        s += fmt.Sprintf(\"%b\", N%2)\n \
    \       N /= 2\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpuf9gd_75_test.go:46: expected '1', got '0001011'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpuf9gd_75_test.go:46: expected '110', got '01101'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpuf9gd_75_test.go:46: expected\
    \ '1100', got '11001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpuf9gd_75_test.go:46:\
    \ expected '1001', got '101100'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpuf9gd_75_test.go:46: expected '10010', got '1100001'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    var i int\n    var sum int\n    for i = 1; i <= N; i++ {\n     \
    \   sum += i\n    }\n    for i = 1; i <= N; i++ {\n        result = fmt.Sprintf(\"\
    %b\", sum) + result\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.01s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpqmzu8c1r_test.go:48: expected '1', got
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    for i < N {\n        sum += int(N % 10) * int(N / 10)\n \
    \       N = N / 10\n        i++\n    }\n    return fmt.Sprintf(\"%d\", sum)\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp6i3e2u5__test.go:46: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp6i3e2u5__test.go:46: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp6i3e2u5__test.go:46: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp6i3e2u5__test.go:46:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmp6i3e2u5__test.go:46: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    str := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N % 10)\
    \ * pow(2, i)\n        N = N / 10\n    }\n    if N > 0 {\n        str += fmt.Sprintf(\"\
    %d\", sum)\n    }\n    return str\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpclh6r0k5_test.go:22:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * pow(2, i)\n  \
    \      N = N / 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3v_4wam_test.go:21:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    var i int\n    var sum int\n    for i = 1; i <= N; i++ {\n     \
    \   sum += int(N / i)\n        result += fmt.Sprintf(\"%d\", sum)\n    }\n   \
    \ return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.01s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpwmsdrtw3_test.go:46: expected '1', got '10001500183320832283244925912716282729273017310031763247331333753433348835403590363736823725376638063844388139163950398340154046407641054133416041874213423842634287431043334355437743984419443944594479449845174535455345714588460546224638465446704686470147164731474647604774478848024816482948424855486848814893490549174929494149534965497649874998500950205031504250525062507250825092510251125122513251425151516051695178518751965205521452235232524152495257526552735281528952975305531353215329533753455353536053675374538153885395540254095416542354305437544454515458546554725478548454905496550255085514552055265532553855445550555655625568557455805586559255985604561056165621562656315636564156465651565656615666567156765681568656915696570157065711571657215726573157365741574657515756576157665771577657815786579057945798580258065810581458185822582658305834583858425846585058545858586258665870587458785882588658905894589859025906591059145918592259265930593459385942594659505954595859625966597059745978598259865989599259955998600160046007601060136016601960226025602860316034603760406043604660496052605560586061606460676070607360766079608260856088609160946097610061036106610961126115611861216124612761306133613661396142614561486151615461576160616361666169617261756178618161846187619061936196619962026205620862116214621762206223622662296232623562376239624162436245624762496251625362556257625962616263626562676269627162736275627762796281628362856287628962916293629562976299630163036305630763096311631363156317631963216323632563276329633163336335633763396341634363456347634963516353635563576359636163636365636763696371637363756377637963816383638563876389639163936395639763996401640364056407640964116413641564176419642164236425642764296431643364356437643964416443644564476449645164536455645764596461646364656467646964716473647564776479648164836485648764896491649364956497649965016503650565076509651165136515651765196521652365256527652965316"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for N > 0 {\n        digit = N %\
    \ 2\n        sum += digit\n        N = N / 2\n    }\n    for i := len(sum) - 1;\
    \ i >= 0; i-- {\n        result = fmt.Sprintf(\"%c\", sum[i]) + result\n    }\n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt1nqq1qw_test.go:27:18: invalid argument: sum (variable of type int) for
    len

    /tmp/tmpt1nqq1qw_test.go:28:39: invalid operation: cannot index sum (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075320
- exit_code: 0
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    for N > 0 {\n        sum += N % 10\n        N = N / 10\n\
    \        i++\n    }\n    return fmt.Sprintf(\"%b\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075320
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum,\
    \ i := 0, N\n    sum := sum + int(N%10)\n    N = N / 10\n    for i < N {\n   \
    \     sum += int(N%10)\n        N = N / 10\n        i++\n    }\n    return fmt.Sprintf(\"\
    %d\", sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprpl1e2t5_test.go:20:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    var i int\n    var sum int\n    var carry int\n    for i = 1; i\
    \ <= N; i++ {\n        sum = N % 10 + sum\n        N = N / 10\n    }\n    for\
    \ i = 1; i <= N; i++ {\n        carry = sum / 2\n        sum = sum % 2\n     \
    \   result = fmt.Sprintf(\"%s%d\", result, carry)\n    }\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpq9z3ba1r_test.go:52: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpq9z3ba1r_test.go:52: expected '110', got '2'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpq9z3ba1r_test.go:52: expected '1100',\
    \ got '5'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpq9z3ba1r_test.go:52:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpq9z3ba1r_test.go:52: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    binary := make([]byte, N)\n    for ; i < N; i++ {\n     \
    \   binary[i] = byte(N % 2)\n        N = N / 2\n    }\n    for ; i < N; i++ {\n\
    \        sum += int(binary[i])\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\
    \nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp5451b8yq_test.go:49: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp5451b8yq_test.go:49: expected '110', got '0'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp5451b8yq_test.go:49: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp5451b8yq_test.go:49:\
    \ expected '1001', got '0'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmp5451b8yq_test.go:49: expected '10010', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for i < N {\n        s += fmt.Sprintf(\"%v\", N % 2)\n\
    \        N /= 2\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpwx51rpb__test.go:46: expected '1', got '0001011'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpwx51rpb__test.go:46: expected '110', got '01101'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpwx51rpb__test.go:46: expected\
    \ '1100', got '11001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpwx51rpb__test.go:46:\
    \ expected '1001', got '101100'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpwx51rpb__test.go:46: expected '10010', got '1100001'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    x := N\n    y := N\n    z := N\n    w := N\n    x %= 10\n    y %= 10\n\
    \    z %= 10\n    w %= 10\n    for {\n        sum += x\n        x /= 10\n    \
    \    sum += y\n        y /= 10\n        sum += z\n        z /= 10\n        sum\
    \ += w\n        w /= 10\n        if x == 0 {\n            break\n        }\n \
    \   }\n    return fmt.Sprintf(\"%v\", sum)\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpl4wordg9_test.go:61: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpl4wordg9_test.go:61: expected '110', got '0'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpl4wordg9_test.go:61: expected '1100',\
    \ got '28'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpl4wordg9_test.go:61:\
    \ expected '1001', got '12'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmpl4wordg9_test.go:61: expected '10010', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    for i < N {\n        sum += int(N % 10) * i\n        N =\
    \ N / 10\n        i++\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpfksvb56d_test.go:46: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpfksvb56d_test.go:46: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpfksvb56d_test.go:46: expected '1100',\
    \ got '4'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpfksvb56d_test.go:46:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpfksvb56d_test.go:46: expected '10010', got '24'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for digit := 0; N > 0; N-- {\n  \
    \      sum += N % 10\n        N /= 10\n    }\n    for digit := 0; sum > 0; sum--\
    \ {\n        result = fmt.Sprintf(\"%c\", result) + fmt.Sprintf(\"%d\", digit)\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90ecfvpt_test.go:20:5: digit declared but not used

    /tmp/tmp90ecfvpt_test.go:22:9: digit declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit = N % 10\n        sum += digit\n        N = N / 10\n    }\n    if sum\
    \ > 0 {\n        result = fmt.Sprintf(\"%d\", sum)\n    }\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpg_bbfbh9_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpg_bbfbh9_test.go:50: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpg_bbfbh9_test.go:50: expected '1100',\
    \ got '11'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpg_bbfbh9_test.go:50:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpg_bbfbh9_test.go:50: expected '10010', got '18'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    result += \"1\"\n    for i := 2; i <= N; i++ {\n        result +=\
    \ \"0\"\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp6_ow_v5h_test.go:44: expected '1', gotn\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmp6_ow_v5h_test.go:44:\
    \ expected '110', got '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp6_ow_v5h_test.go:44:\
    \ expected '1100', got '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp6_ow_v5h_test.go:44:\
    \ expected '1001', got '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  timestamp: 1660075322
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    binary := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  sum += digit\n        digit = N % 10\n        N = N / 10\n        binary =\
    \ fmt.Sprintf(\"%c%c\", binary, digit)\n    }\n    return binary\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp2xq_6cwo_test.go:26:18: fmt.Sprintf format %c has arg binary of wrong
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    var sum int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var A int\n \
    \   var B int\n    var C int\n    var D int\n    var E int\n    var F int\n  \
    \  var G int\n    var H int\n    var I int\n    var J int\n    var K int\n   \
    \ var L int\n    var M int\n    var N int\n    var O int\n    var P int\n    var\
    \ Q int\n    var R int\n    var S int\n    var T int\n    var U int\n    var V\
    \ int\n    var W int\n    var X int\n    var Y int\n    var Z int\n    var A int\n\
    \    var B int\n    var C int\n    var D int\n    var E int\n    var F int\n \
    \   var G int\n    var H int\n    var I int\n    var J int\n    var K int\n  \
    \  var L int\n    var M int\n    var N int\n    var O int\n    var P int\n   \
    \ var Q int\n    var R int\n    var S int\n    var T int\n    var U int\n    var\
    \ V int\n    var W int\n    var X int\n    var Y int\n    var Z int\n    var A\
    \ int\n    var B int\n    var C int\n    var D int\n    var E int\n    var F int\n\
    \    var G int\n    var H int\n    var I int\n    var J int\n    var K int\n \
    \   var L int\n    var M int\n    var N int\n    var O int\n    var P int\n  \
    \  var Q int\n    var R int\n    var S int\n    var T int\n    var U int\n   \
    \ var V int\n    var W int\n    var X int\n    var Y int\n    var Z int\n    var\
    \ A int\n    var B int\n    var C int\n    var D int\n    var E int\n    var F\
    \ int\n    var G int\n    var H int\n    var I int\n    var J int\n    var K int\n\
    \    var L int\n    var M int\n    var N int\n    var O int\n    var P int\n \
    \   var Q int\n    var R int\n    var S int\n    var T int\n    var U int\n  \
    \  var V int\n    var W int\n    var X int\n    var Y int\n    var Z int\n   \
    \ var A int\n    var B int\n    var C int\n    var D int\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbzu8lf0s_test.go:148:6: expected ''('', found TestSolve

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    base := 10\n    for i := 0; i < N; i++ {\n        sum += int(N % base)\n\
    \        N /= base\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpxzc00feq_test.go:45: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpxzc00feq_test.go:45: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpxzc00feq_test.go:45: expected '1100',\
    \ got '11'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpxzc00feq_test.go:45:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpxzc00feq_test.go:45: expected '10010', got '18'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += int(N % 2)\n        sum += digit\n        N = N / 2\n    }\n    for\
    \ i := 0; i < sum; i++ {\n        result += fmt.Sprintf(\"%d\", digit)\n    }\n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpppr6djem_test.go:50: expected '1', got '3333333'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpppr6djem_test.go:50: expected '110', got '33333333'\n  \
    \  --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpppr6djem_test.go:50: expected\
    \ '1100', got '3333333333'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n    \
    \    tmpppr6djem_test.go:50: expected '1001', got '3333333333333'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpppr6djem_test.go:50: expected '10010',\
    \ got '33333333333333'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    digit := 0\n    for i := 0; i < N; i++ {\n      \
    \  sum += int(N % 10) * digit\n        digit *= 2\n        N = N / 10\n    }\n\
    \    for i := 0; i < sum; i++ {\n        result += fmt.Sprintf(\"%d\", int(N %\
    \ 10) * digit)\n        digit *= 2\n        N = N / 10\n    }\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp6_q6midk_test.go:52: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp6_q6midk_test.go:52: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp6_q6midk_test.go:52: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp6_q6midk_test.go:52:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmp6_q6midk_test.go:52: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    sum := N\n    result := \"\"\n    for i < len(N) {\n    \
    \    sum += int(N[i])\n        i++\n    }\n    for i := len(N) - 2; i >= 0; i--\
    \ {\n        result += fmt.Sprintf(\"%d\", sum%2)\n        sum /= 2\n    }\n \
    \   return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcb4j65e4_test.go:21:9: no new variables on left side of :=

    /tmp/tmpcb4j65e4_test.go:23:17: invalid argument: N (variable of type int) for
    len

    /tmp/tmpcb4j65e4_test.go:24:21: invalid operation: cannot index N (variable of
    type int)

    /tmp/tmpcb4j65e4_test.go:27:18: invalid argument: N (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    x := N\n    for x != 0 {\n        sum += x % 2\n        x /= 2\n    }\n\
    \    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpl18exc1p_test.go:45: expected '1', got '6'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpl18exc1p_test.go:45: expected '110', got '4'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpl18exc1p_test.go:45: expected '1100',\
    \ got '4'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpl18exc1p_test.go:45:\
    \ expected '1001', got '5'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpl18exc1p_test.go:45: expected '10010', got '6'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * pow(2, i)\n        N /= 10\n    }\n    result = fmt.Sprintf(\"%d\", sum)\n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_187kzot_test.go:22:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * pow(2, i)\n  \
    \      N = N / 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3v_4wam_test.go:21:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for N > 0 {\n        digit = N %\
    \ 10\n        sum += digit\n        N = N / 10\n    }\n    for i := 0; i < sum;\
    \ i++ {\n        result = fmt.Sprintf(\"%c\", result) + fmt.Sprintf(\"%d\", digit)\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpd3nwsu9e_test.go:28:18: fmt.Sprintf format %c has arg result of wrong
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N = N / 10\n    }\n    for i := 0; i < N; i++ {\n\
    \        result += \"1\"\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc\
    \ TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmprguyqdps_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmprguyqdps_test.go:48: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmprguyqdps_test.go:48: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmprguyqdps_test.go:48:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmprguyqdps_test.go:48: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    i := 0\n    for N > 0 {\n        result += \"1\"\n        N /=\
    \ 10\n        i++\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpsvy761x3_test.go:46: expected '1', got '1111'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpsvy761x3_test.go:46: expected '110', got '111'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpsvy761x3_test.go:46: expected\
    \ '1100', got '111'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpsvy761x3_test.go:46:\
    \ expected '1001', got '111'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpsvy761x3_test.go:46: expected '10010', got '111'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    var i int\n    var sum int\n    for i = 1; i <= N; i++ {\n     \
    \   sum += int(N % i)\n        N = N / i\n    }\n    result = fmt.Sprintf(\"%d\"\
    , sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpty0nxyqx_test.go:47: expected '1', got '7'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpty0nxyqx_test.go:47: expected '110', got '2'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpty0nxyqx_test.go:47: expected '1100',\
    \ got '3'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpty0nxyqx_test.go:47:\
    \ expected '1001', got '8'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpty0nxyqx_test.go:47: expected '10010', got '4'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n\n    for i := 0; i < N; i++ {\n    \
    \    sum += digit\n        digit *= 2\n    }\n\n    for i := N; i > 0; i-- {\n\
    \        digit /= 2\n        result += fmt.Sprintf(\"%v\", sum%10)\n        sum\
    \ += digit\n    }\n\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp50ewucjq_test.go:54: expected '1', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmp50ewucjq_test.go:54:\
    \ expected '110', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp50ewucjq_test.go:54:\
    \ expected '1100', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp50ewucjq_test.go:54:\
    \ expected '1001', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  timestamp: 1660075323
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 2\n        sum += digit\n        N = N / 2\n    }\n    for i :=\
    \ 0; i < sum; i++ {\n        result += fmt.Sprintf(\"%d\", digit)\n    }\n   \
    \ return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpwb_4fylt_test.go:50: expected '1', got '3333333'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpwb_4fylt_test.go:50: expected '110', got '33333333'\n  \
    \  --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpwb_4fylt_test.go:50: expected\
    \ '1100', got '3333333333'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n    \
    \    tmpwb_4fylt_test.go:50: expected '1001', got '3333333333333'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpwb_4fylt_test.go:50: expected '10010',\
    \ got '33333333333333'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for N > 0 {\n        digit = N %\
    \ 10\n        sum += digit\n        N = N / 10\n    }\n    for i := 0; i < sum;\
    \ i++ {\n        result = fmt.Sprintf(\"%c\", result) + fmt.Sprintf(\"%c\", digit)\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpj7gn7tnw_test.go:28:18: fmt.Sprintf format %c has arg result of wrong
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    result += \"1\"\n    for i := 2; i <= N; i++ {\n        result +=\
    \ \"0\"\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp6_ow_v5h_test.go:44: expected '1', gotn\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmp6_ow_v5h_test.go:44:\
    \ expected '110', got '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp6_ow_v5h_test.go:44:\
    \ expected '1100', got '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp6_ow_v5h_test.go:44:\
    \ expected '1001', got '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  timestamp: 1660075322
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  sum += int(N % 10)\n        N = N / 10\n    }\n    for i := 0; i < N; i++ {\n\
    \        digit += int(N % 2)\n        N = N / 2\n    }\n    for i := 0; i < N;\
    \ i++ {\n        result += string(digit)\n        sum += int(N % 10)\n       \
    \ N = N / 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmplqorojx2_test.go:31:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for N > 0 {\n        s += fmt.Sprintf(\"%b\", N%2)\n \
    \       N = N / 2\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpfk3y7oj9_test.go:46: expected '1', got '0001011111'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpfk3y7oj9_test.go:46: expected '110',\
    \ got '01101001'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpfk3y7oj9_test.go:46:\
    \ expected '1100', got '11001001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpfk3y7oj9_test.go:46: expected '1001', got '101100101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpfk3y7oj9_test.go:46: expected '10010',\
    \ got '1100001111'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N = N / 10\n    }\n    for i := 0; i < len(strconv.Itoa(sum));\
    \ i++ {\n        result += strconv.Itoa(sum % 2)\n        sum = int(sum / 2)\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9q9ouzax_test.go:25:25: undefined: strconv

    /tmp/tmp9q9ouzax_test.go:26:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 10\n        sum += digit\n        N = N / 10\n    }\n    for i\
    \ := 0; i < sum; i++ {\n        result += fmt.Sprintf(\"%d\", digit)\n    }\n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmphxvthwl6_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmphxvthwl6_test.go:50: expected '110', got '55555'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmphxvthwl6_test.go:50: expected\
    \ '1100', got '111111111111111111111111111111111111'\n    --- FAIL: TestSolve/test_num__3\
    \ (0.00s)\n        tmphxvthwl6_test.go:50: expected '1001', got '999999999999999999'\n\
    \    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmphxvthwl6_test.go:50:\
    \ expected '10010', got '181818181818181818181818181818181818181818181818181818181818'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * i\n        N /= 10\n    }\n    for i := 0; i < len(result); i++ {\n  \
    \      if sum > 0 {\n            result += fmt.Sprintf(\"%d\", sum%2)\n      \
    \      sum /= 2\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7ic_ioij_test.go:51: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp7ic_ioij_test.go:51: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp7ic_ioij_test.go:51: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp7ic_ioij_test.go:51:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmp7ic_ioij_test.go:51: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    for i := 0; i < N; i++ {\n        digit += int(N\
    \ % 10) - int(N / 10)\n        N = N / 10\n    }\n    for i := 0; i < digit; i++\
    \ {\n        result += fmt.Sprintf(\"1\")\n    }\n    return result\n}\n\nfunc\
    \ TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpabd65p_2_test.go:48: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpabd65p_2_test.go:48: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpabd65p_2_test.go:48: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpabd65p_2_test.go:48:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpabd65p_2_test.go:48: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 2\n        sum += digit\n        N /= 2\n    }\n    result +=\
    \ fmt.Sprintf(\"%d\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpaf_lt_lt_test.go:48: expected '1', got '7'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpaf_lt_lt_test.go:48: expected '110', got '8'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpaf_lt_lt_test.go:48: expected '1100',\
    \ got '10'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpaf_lt_lt_test.go:48:\
    \ expected '1001', got '13'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmpaf_lt_lt_test.go:48: expected '10010', got '14'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N = N / 10\n    }\n    for i := 0; i < N; i++ {\n\
    \        result += fmt.Sprintf(\"%d\", sum % 2)\n        sum = int(sum / 2)\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp29_tguo1_test.go:49: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp29_tguo1_test.go:49: expected '110', got '1'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp29_tguo1_test.go:49: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp29_tguo1_test.go:49:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmp29_tguo1_test.go:49: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for i < N {\n        s += fmt.Sprintf(\"%v\", N%2)\n \
    \       N = N / 2\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpw8fcpc89_test.go:46: expected '1', got '0001011'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpw8fcpc89_test.go:46: expected '110', got '01101'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpw8fcpc89_test.go:46: expected\
    \ '1100', got '11001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpw8fcpc89_test.go:46:\
    \ expected '1001', got '101100'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpw8fcpc89_test.go:46: expected '10010', got '1100001'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * pow(2, i)\n  \
    \      N = N / 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3v_4wam_test.go:21:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    x := N\n    for i := 0; i < len(bin(uint64(N))); i++ {\n        sum +=\
    \ int(bin(x)[i] - '0')\n        x /= 10\n    }\n    return fmt.Sprintf(\"%v\"\
    , sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl0umg19h_test.go:21:25: undefined: bin

    /tmp/tmpl0umg19h_test.go:22:20: undefined: bin

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for i < N {\n        s += fmt.Sprintf(\"%v\", N%2)\n \
    \       N = N / 2\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpw8fcpc89_test.go:46: expected '1', got '0001011'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpw8fcpc89_test.go:46: expected '110', got '01101'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpw8fcpc89_test.go:46: expected\
    \ '1100', got '11001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpw8fcpc89_test.go:46:\
    \ expected '1001', got '101100'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpw8fcpc89_test.go:46: expected '10010', got '1100001'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    output := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  sum += digit\n        digit *= 2\n    }\n    for i := N; i > 0; i-- {\n   \
    \     output += fmt.Sprintf(\"%d\", sum%2)\n        sum /= 2\n    }\n    return\
    \ output\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdlhs2o2e_test.go:50: expected '1', gotn\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmpdlhs2o2e_test.go:50:\
    \ expected '110', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpdlhs2o2e_test.go:50:\
    \ expected '1100', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdlhs2o2e_test.go:50:\
    \ expected '1001', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  timestamp: 1660075328
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  sum += digit\n        digit += int(N % 10) // % is the remainder operator\n\
    \        N = N / 10\n    }\n    result = fmt.Sprintf(\"%d\", sum)\n    return\
    \ result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp8093sd8h_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp8093sd8h_test.go:48: expected '110', got '0'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp8093sd8h_test.go:48: expected '1100',\
    \ got '7'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp8093sd8h_test.go:48:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmp8093sd8h_test.go:48: expected '10010', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    n := N\n    t := N\n    for {\n        if t > 0 {\n            s +=\
    \ fmt.Sprintf(\"%b\", t)\n            t -= int(t)\n        }\n        if t ==\
    \ 0 {\n            break\n        }\n        t /= 2\n    }\n    return s\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxw0ei2xo_test.go:20:5: n declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10)\n        N = N / 10\n    }\n    for i := 0; i < N; i++ {\n        result\
    \ += fmt.Sprintf(\"%d\", sum % 2)\n        sum = int(sum / 2)\n    }\n    return\
    \ result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmprw_jkwcs_test.go:49: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmprw_jkwcs_test.go:49: expected '110', got '1'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmprw_jkwcs_test.go:49: expected '1100',\
    \ got '1'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmprw_jkwcs_test.go:49:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmprw_jkwcs_test.go:49: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    result += \"1\"\n    for i := 2; i <= N; i++ {\n        result +=\
    \ \"0\"\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp6_ow_v5h_test.go:44: expected '1', gotn\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmp6_ow_v5h_test.go:44:\
    \ expected '110', got '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp6_ow_v5h_test.go:44:\
    \ expected '1100', got '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp6_ow_v5h_test.go:44:\
    \ expected '1001', got '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    \n    for i := 0; i < N; i++ {\n\
    \        digit += int(N % 10)\n        sum += digit\n        N /= 10\n    }\n\
    \    \n    for i := 0; i < sum; i++ {\n        result += \"1\"\n    }\n    \n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpxk6_hqwo_test.go:53: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpxk6_hqwo_test.go:53: expected '110', got '11111'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpxk6_hqwo_test.go:53: expected\
    \ '1100', got '111111111111111111'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpxk6_hqwo_test.go:53: expected '1001', got '111111111111111111'\n \
    \   --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmpxk6_hqwo_test.go:53: expected\
    \ '10010', got '111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * int(N / 10)\n\
    \        N = N / 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptyhbnoq3_test.go:44: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmptyhbnoq3_test.go:44: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmptyhbnoq3_test.go:44: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmptyhbnoq3_test.go:44:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmptyhbnoq3_test.go:44: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ make([]byte, N)\n    sum := 0\n    for i := 0; i < N; i++ {\n        s[i] =\
    \ '1'\n        sum += int(s[i])\n        s[i] = '0'\n    }\n    return fmt.Sprintf(\"\
    %b\", sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpha45foup_test.go:46: expected '1', got '1011111101101000'\n    ---\
    \ FAIL: TestSolve/test_num__1 (0.00s)\n        tmpha45foup_test.go:46: expected\
    \ '110', got '1110010110110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n  \
    \      tmpha45foup_test.go:46: expected '1100', got '1110000100011'\n    --- FAIL:\
    \ TestSolve/test_num__3 (0.00s)\n        tmpha45foup_test.go:46: expected '1001',\
    \ got '11111110111101'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmpha45foup_test.go:46:\
    \ expected '10010', got '1011100001010011'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    var sum int\n    var i int\n    for i = 1; i <= N; i++ {\n     \
    \   sum += i\n    }\n    result = fmt.Sprintf(\"%d\", sum)\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpfs1anfrb_test.go:46: expected '1', got '500500'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpfs1anfrb_test.go:46: expected '110', got '11325'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpfs1anfrb_test.go:46: expected\
    \ '1100', got '10878'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpfs1anfrb_test.go:46:\
    \ expected '1001', got '55611'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpfs1anfrb_test.go:46: expected '10010', got '464166'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for N > 0 {\n        if N%2 == 0 {\n            s += \"\
    1\"\n            N -= 2\n        } else {\n            s += \"0\"\n          \
    \  N -= 1\n        }\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmposs9v_8f_test.go:51: expected '1', gotn\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmposs9v_8f_test.go:51:\
    \ expected '110', got '111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmposs9v_8f_test.go:51:\
    \ expected '1100', got '01111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmposs9v_8f_test.go:51:\
    \ expected '1001', got '01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmposs9v_8f_test.go:51:\
    \ expected '10010', got '01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    sum := N\n    result := \"\"\n    for i < len(sum) {\n  \
    \      result += \"1\"\n        i++\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_c44j5ig_test.go:21:9: no new variables on left side of :=

    /tmp/tmp_c44j5ig_test.go:23:17: invalid argument: sum (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 2)\n        N = N /\
    \ 2\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp1bvoc16a_test.go:44: expected '1', got '3'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp1bvoc16a_test.go:44: expected '110', got '3'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp1bvoc16a_test.go:44: expected '1100',\
    \ got '3'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp1bvoc16a_test.go:44:\
    \ expected '1001', got '3'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmp1bvoc16a_test.go:44: expected '10010', got '3'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * uint64(i)\n        N = N / 10\n    }\n    for i := 0; i < 64; i++ {\n\
    \        if sum > 0 {\n            result += strconv.FormatUint(uint64(sum), 2)\n\
    \            sum = 0\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjs5pcl3i_test.go:22:16: invalid operation: int(N % 10) * uint64(i) (mismatched
    types int and uint64)

    /tmp/tmpjs5pcl3i_test.go:27:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    base := 2\n    for i := 0; i < N; i++ {\n        sum += int(N % base)\n\
    \        N = N / base\n        base = base * 2\n    }\n    return fmt.Sprintf(\"\
    %d\", sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpg_gt6w24_test.go:46: expected '1', got '20'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpg_gt6w24_test.go:46: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpg_gt6w24_test.go:46: expected '1100',\
    \ got '4'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpg_gt6w24_test.go:46:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpg_gt6w24_test.go:46: expected '10010', got '17'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * pow(2, i)\n        N = N / 10\n    }\n    for i := 0; i < len(strconv.Itoa(sum));\
    \ i++ {\n        result += strconv.Itoa(int(sum % 2))\n        sum = sum / 2\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2dw766uy_test.go:22:30: undefined: pow

    /tmp/tmp2dw766uy_test.go:25:25: undefined: strconv

    /tmp/tmp2dw766uy_test.go:26:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit = N % 10\n        sum += digit\n        N = N / 10\n    }\n    if sum\
    \ > 0 {\n        result = fmt.Sprintf(\"%d\", sum)\n    }\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpg_bbfbh9_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpg_bbfbh9_test.go:50: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpg_bbfbh9_test.go:50: expected '1100',\
    \ got '11'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpg_bbfbh9_test.go:50:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpg_bbfbh9_test.go:50: expected '10010', got '18'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  sum += digit\n        digit += int(N % 10) // % is the modulus operator\n \
    \       N = N / 10\n    }\n    result = fmt.Sprintf(\"%d\", sum)\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp9l9ha__5_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp9l9ha__5_test.go:48: expected '110', got '0'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp9l9ha__5_test.go:48: expected '1100',\
    \ got '7'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp9l9ha__5_test.go:48:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmp9l9ha__5_test.go:48: expected '10010', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * int(N / 10)\n\
    \        N = N / 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptyhbnoq3_test.go:44: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmptyhbnoq3_test.go:44: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmptyhbnoq3_test.go:44: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmptyhbnoq3_test.go:44:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmptyhbnoq3_test.go:44: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    i := 0\n    for N > 0 {\n        result += \"1\"\n        N /=\
    \ 10\n        i++\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpsvy761x3_test.go:46: expected '1', got '1111'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpsvy761x3_test.go:46: expected '110', got '111'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpsvy761x3_test.go:46: expected\
    \ '1100', got '111'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpsvy761x3_test.go:46:\
    \ expected '1001', got '111'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpsvy761x3_test.go:46: expected '10010', got '111'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    for N > 0 {\n        sum += N % 10\n        N = N / 10\n\
    \        i++\n    }\n    return fmt.Sprintf(\"%0*d\", i, sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp_9q9_w9c_test.go:46: expected '1', got '0001'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp_9q9_w9c_test.go:46: expected '110', got '006'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmp_9q9_w9c_test.go:46: expected\
    \ '1100', got '012'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp_9q9_w9c_test.go:46:\
    \ expected '1001', got '009'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmp_9q9_w9c_test.go:46: expected '10010', got '018'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N = N / 10\n    }\n    result = fmt.Sprintf(\"%d\"\
    , sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdxa_rqlm_test.go:46: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdxa_rqlm_test.go:46: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdxa_rqlm_test.go:46: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdxa_rqlm_test.go:46:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpdxa_rqlm_test.go:46: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    n := N\n    for n > 0 {\n        s += fmt.Sprintf(\"%v\", n%2)\n \
    \       n /= 2\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp5tta_oqf_test.go:45: expected '1', got '0001011111'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp5tta_oqf_test.go:45: expected '110',\
    \ got '01101001'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp5tta_oqf_test.go:45:\
    \ expected '1100', got '11001001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp5tta_oqf_test.go:45: expected '1001', got '101100101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp5tta_oqf_test.go:45: expected '10010',\
    \ got '1100001111'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    for i := 0; i < N; i++ {\n        if N%2 == 0 {\n            s +=\
    \ \"1\"\n        } else {\n            s += \"0\"\n        }\n        N /= 2\n\
    \    }\n    return s\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpopfqy36f_test.go:48: expected '1', got '1110100'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpopfqy36f_test.go:48: expected '110', got '10010'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpopfqy36f_test.go:48: expected\
    \ '1100', got '00110'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpopfqy36f_test.go:48:\
    \ expected '1001', got '010011'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpopfqy36f_test.go:48: expected '10010', got '0011110'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    for i < N {\n        sum += int(N % 10) * pow(2, i)\n   \
    \     N /= 10\n        i++\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa7z8oc2r_test.go:22:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 10\n        sum += digit\n        N /= 10\n    }\n    result +=\
    \ fmt.Sprintf(\"%d\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpkd1tpueh_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpkd1tpueh_test.go:48: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpkd1tpueh_test.go:48: expected '1100',\
    \ got '18'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpkd1tpueh_test.go:48:\
    \ expected '1001', got '18'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmpkd1tpueh_test.go:48: expected '10010', got '30'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 2\n        sum += digit\n        N = N / 2\n    }\n    for i :=\
    \ 0; i < sum; i++ {\n        result += fmt.Sprintf(\"%d\", digit)\n    }\n   \
    \ return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpwb_4fylt_test.go:50: expected '1', got '3333333'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpwb_4fylt_test.go:50: expected '110', got '33333333'\n  \
    \  --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpwb_4fylt_test.go:50: expected\
    \ '1100', got '3333333333'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n    \
    \    tmpwb_4fylt_test.go:50: expected '1001', got '3333333333333'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpwb_4fylt_test.go:50: expected '10010',\
    \ got '33333333333333'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * int(N / 10)\n\
    \        N = N / 10\n    }\n    return fmt.Sprintf(\"%v\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpadrjg0zt_test.go:44: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpadrjg0zt_test.go:44: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpadrjg0zt_test.go:44: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpadrjg0zt_test.go:44:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpadrjg0zt_test.go:44: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    str := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N % 10)\
    \ * int(N / 10)\n        N = N / 10\n    }\n    for i := 0; i < N; i++ {\n   \
    \     str += fmt.Sprintf(\"%d\", sum % 2)\n        sum += int(N % 10) * int(N\
    \ / 10)\n        N = N / 10\n    }\n    return str\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpwqczksl5_test.go:50: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpwqczksl5_test.go:50: expected '110', got '1'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpwqczksl5_test.go:50: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpwqczksl5_test.go:50:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpwqczksl5_test.go:50: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    base := 1\n    for i := 0; i < N; i++ {\n        sum += int(N % base)\
    \ * base\n        N = N / base\n        base *= 2\n    }\n    return fmt.Sprintf(\"\
    %d\", sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpqk7lz1ky_test.go:46: expected '1', got '280'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpqk7lz1ky_test.go:46: expected '110', got '28'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpqk7lz1ky_test.go:46: expected '1100',\
    \ got '22'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpqk7lz1ky_test.go:46:\
    \ expected '1001', got '98'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmpqk7lz1ky_test.go:46: expected '10010', got '246'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  sum += digit\n        digit *= 2\n    }\n    for i := 0; i < N; i++ {\n   \
    \     result += fmt.Sprintf(\"%v\", sum%2)\n        sum /= 2\n    }\n    return\
    \ result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmphhz6wmyw_test.go:50: expected '1', gotn\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmphhz6wmyw_test.go:50:\
    \ expected '110', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmphhz6wmyw_test.go:50:\
    \ expected '1100', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmphhz6wmyw_test.go:50:\
    \ expected '1001', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  timestamp: 1660075332
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 2\n        sum += digit\n        N = N / 2\n    }\n    result\
    \ += fmt.Sprintf(\"%d\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpe_4yi9ht_test.go:48: expected '1', got '7'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpe_4yi9ht_test.go:48: expected '110', got '8'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpe_4yi9ht_test.go:48: expected '1100',\
    \ got '10'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpe_4yi9ht_test.go:48:\
    \ expected '1001', got '13'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmpe_4yi9ht_test.go:48: expected '10010', got '14'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 10\n        sum += digit\n        N /= 10\n    }\n    for i :=\
    \ 0; i < sum; i++ {\n        result += fmt.Sprintf(\"%d\", digit)\n    }\n   \
    \ return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp6hycxuug_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp6hycxuug_test.go:50: expected '110', got '55555'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmp6hycxuug_test.go:50: expected\
    \ '1100', got '111111111111111111111111111111111111'\n    --- FAIL: TestSolve/test_num__3\
    \ (0.00s)\n        tmp6hycxuug_test.go:50: expected '1001', got '999999999999999999'\n\
    \    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmp6hycxuug_test.go:50:\
    \ expected '10010', got '181818181818181818181818181818181818181818181818181818181818'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    base := 2\n    for i := 0; i < N; i++ {\n        sum += int(N % base)\
    \ * base\n        N /= base\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpjlbzlr5s_test.go:45: expected '1', got '6'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpjlbzlr5s_test.go:45: expected '110', got '6'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpjlbzlr5s_test.go:45: expected '1100',\
    \ got '6'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpjlbzlr5s_test.go:45:\
    \ expected '1001', got '6'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpjlbzlr5s_test.go:45: expected '10010', got '6'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * int(N / 10)\n\
    \        N = N / 10\n    }\n    return fmt.Sprintf(\"%v\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpadrjg0zt_test.go:44: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpadrjg0zt_test.go:44: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpadrjg0zt_test.go:44: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpadrjg0zt_test.go:44:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpadrjg0zt_test.go:44: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N = N / 10\n    }\n    result += fmt.Sprintf(\"%d\"\
    , sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpfe7tvtn8_test.go:46: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpfe7tvtn8_test.go:46: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpfe7tvtn8_test.go:46: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpfe7tvtn8_test.go:46:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpfe7tvtn8_test.go:46: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075332
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    carryOn := true\n    for digit < N {\n        if\
    \ carryOn {\n            result += strconv.Itoa(digit)\n            carryOn =\
    \ false\n        } else {\n            result += strconv.Itoa(digit)\n       \
    \     carryOn = true\n        }\n        digit++\n    }\n    return result + \"\
    0\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcx_zvp8z_test.go:24:23: undefined: strconv

    /tmp/tmpcx_zvp8z_test.go:27:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    i := 0\n    for N > 0 {\n        result += \"1\"\n        N /=\
    \ 10\n        i++\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpsvy761x3_test.go:46: expected '1', got '1111'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpsvy761x3_test.go:46: expected '110', got '111'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpsvy761x3_test.go:46: expected\
    \ '1100', got '111'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpsvy761x3_test.go:46:\
    \ expected '1001', got '111'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpsvy761x3_test.go:46: expected '10010', got '111'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N = N / 10\n    }\n    for i := 0; i < len(strconv.Itoa(sum));\
    \ i++ {\n        result += strconv.Itoa(int(sum % 2))\n        sum = sum / 2\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvteg0_sp_test.go:25:25: undefined: strconv

    /tmp/tmpvteg0_sp_test.go:26:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for N > 0 {\n        digit = N %\
    \ 10\n        sum += digit\n        N = N / 10\n    }\n    for i := 0; i < sum;\
    \ i++ {\n        result = fmt.Sprintf(\"%c\", result) + fmt.Sprintf(\"%c\", digit)\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp8u9lj51z_test.go:28:18: fmt.Sprintf format %c has arg result of wrong
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N = N / 10\n    }\n    for i := 0; i < N; i++ {\n\
    \        result += fmt.Sprintf(\"%d\", sum % 2)\n        sum = int(sum / 2)\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpsnt6c1qt_test.go:49: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpsnt6c1qt_test.go:49: expected '110', got '1'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpsnt6c1qt_test.go:49: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpsnt6c1qt_test.go:49:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpsnt6c1qt_test.go:49: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * int(N / 10)\n\
    \        N = N / 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptyhbnoq3_test.go:44: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmptyhbnoq3_test.go:44: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmptyhbnoq3_test.go:44: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmptyhbnoq3_test.go:44:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmptyhbnoq3_test.go:44: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += int(N % 10)\n        sum += digit\n        N = N / 10\n    }\n   \
    \ for i := 0; i < sum; i++ {\n        result += fmt.Sprintf(\"%d\", digit)\n \
    \   }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp848s0907_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp848s0907_test.go:50: expected '110', got '55555'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmp848s0907_test.go:50: expected\
    \ '1100', got '111111111111111111111111111111111111'\n    --- FAIL: TestSolve/test_num__3\
    \ (0.00s)\n        tmp848s0907_test.go:50: expected '1001', got '999999999999999999'\n\
    \    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmp848s0907_test.go:50:\
    \ expected '10010', got '181818181818181818181818181818181818181818181818181818181818'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 2)\n        N /= 2\n\
    \    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpk9uuad4n_test.go:44: expected '1', got '3'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpk9uuad4n_test.go:44: expected '110', got '3'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpk9uuad4n_test.go:44: expected '1100',\
    \ got '3'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpk9uuad4n_test.go:44:\
    \ expected '1001', got '3'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpk9uuad4n_test.go:44: expected '10010', got '3'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    var i int\n    var sum int\n    for i = 1; i <= N; i++ {\n     \
    \   sum += int(N / i)\n    }\n    result = fmt.Sprintf(\"%d\", sum)\n    return\
    \ result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpwr09ukft_test.go:46: expected '1', got '7069'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpwr09ukft_test.go:46: expected '110', got '780'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpwr09ukft_test.go:46: expected\
    \ '1100', got '760'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpwr09ukft_test.go:46:\
    \ expected '1001', got '1988'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n \
    \       tmpwr09ukft_test.go:46: expected '10010', got '6771'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * i\n        N = N / 10\n    }\n    for i := 0; i < N; i++ {\n        result\
    \ += fmt.Sprintf(\"%d\", sum % 2)\n        sum = int(sum / 2)\n    }\n    return\
    \ result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp_hfjolms_test.go:49: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp_hfjolms_test.go:49: expected '110', got '1'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp_hfjolms_test.go:49: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp_hfjolms_test.go:49:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmp_hfjolms_test.go:49: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * uint64(i)\n        N = N / 10\n    }\n    result += \"1\"\n    for i :=\
    \ 0; i < sum; i++ {\n        result += \"0\"\n    }\n    return result\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpftcfxjvl_test.go:22:16: invalid operation: int(N % 10) * uint64(i) (mismatched
    types int and uint64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    digit := 0\n    for i := 0; i < N; i++ {\n      \
    \  sum += int(N % 10)\n        N /= 10\n    }\n    for i := 0; i < N; i++ {\n\
    \        digit += int(N % 2)\n        N /= 2\n    }\n    for i := 0; i < N; i++\
    \ {\n        result += string(digit)\n        digit /= 10\n    }\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpdxx086ho_test.go:31:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += int(N % 2)\n        N = N / 2\n    }\n    for i := 0; i < N; i++ {\n\
    \        sum += int(N % 2)\n        N = N / 2\n    }\n    for i := 0; i < N; i++\
    \ {\n        result += string(digit)\n        sum += int(N % 2)\n        N = N\
    \ / 2\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp7mmlcn6s_test.go:31:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    x := N\n    y := N\n    z := N\n    t := N\n    u := N\n    v := N\n\
    \    w := N\n    x /= 10\n    y /= 10\n    z /= 10\n    t /= 10\n    u /= 10\n\
    \    v /= 10\n    w /= 10\n    for {\n        if x == 0 {\n            s += \"\
    0\"\n            break\n        }\n        if y == 0 {\n            s += \"1\"\
    \n            break\n        }\n        if z == 0 {\n            s += \"10\"\n\
    \            break\n        }\n        if t == 0 {\n            s += \"11\"\n\
    \            break\n        }\n        if u == 0 {\n            s += \"100\"\n\
    \            break\n        }\n        if v == 0 {\n            s += \"101\"\n\
    \            break\n        }\n        if w == 0 {\n            s += \"110\"\n\
    \            break\n        }\n        s += \"1001\"\n        x -= 1\n       \
    \ y -= 1\n        z -= 1\n        t -= 1\n        u -= 1\n        v -= 1\n   \
    \     w -= 1\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpu3z420fi_test.go:92: expected '1', got '10011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110010'\n\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmpu3z420fi_test.go:92:\
    \ expected '110', got '1001100110011001100110011001100110011001100110011001100110010'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpu3z420fi_test.go:92:\
    \ expected '1100', got '100110011001100110011001100110011001100110011001100110010'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpu3z420fi_test.go:92:\
    \ expected '1001', got '1001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110010'\n\
    \    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmpu3z420fi_test.go:92:\
    \ expected '10010', got '1001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110010'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075334
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * int(N / 10)\n\
    \        N = N / 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptyhbnoq3_test.go:44: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmptyhbnoq3_test.go:44: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmptyhbnoq3_test.go:44: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmptyhbnoq3_test.go:44:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmptyhbnoq3_test.go:44: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    carryOn := true\n    for digit < N {\n        if\
    \ carryOn {\n            result += fmt.Sprintf(\"%d\", digit)\n            carryOn\
    \ = false\n        } else {\n            result += fmt.Sprintf(\"%d\", N % 10)\n\
    \            N /= 10\n            carryOn = true\n        }\n    }\n    if carryOn\
    \ {\n        result += fmt.Sprintf(\"%d\", N)\n    }\n    return result\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpeo95s86v_test.go:55: expected '1', got '000000010'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpeo95s86v_test.go:55: expected '110',\
    \ got '0005010'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpeo95s86v_test.go:55:\
    \ expected '1100', got '0704010'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpeo95s86v_test.go:55: expected '1001', got '0303030'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpeo95s86v_test.go:55: expected '10010',\
    \ got '0306090'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    i := 0\n    sum := 0\n    for i < N {\n        sum += int(N % 10)\
    \ * int(N / 10)\n        N = N / 10\n        i++\n    }\n    result += fmt.Sprintf(\"\
    %d\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpihktktr9_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpihktktr9_test.go:48: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpihktktr9_test.go:48: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpihktktr9_test.go:48:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpihktktr9_test.go:48: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 2)\n        N = N /\
    \ 2\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp1bvoc16a_test.go:44: expected '1', got '3'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp1bvoc16a_test.go:44: expected '110', got '3'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp1bvoc16a_test.go:44: expected '1100',\
    \ got '3'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp1bvoc16a_test.go:44:\
    \ expected '1001', got '3'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmp1bvoc16a_test.go:44: expected '10010', got '3'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    sum := 0\n    for i < N {\n        sum += int(N % 10)\
    \ * i\n        N = N / 10\n        i++\n    }\n    for i < N {\n        s += fmt.Sprintf(\"\
    %d\", sum % 2)\n        sum += int(N % 10) * i\n        N = N / 10\n        i++\n\
    \    }\n    return s\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptigk2pge_test.go:53: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmptigk2pge_test.go:53: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmptigk2pge_test.go:53: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmptigk2pge_test.go:53:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmptigk2pge_test.go:53: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    i := 0\n    sum := 0\n    for N > 0 {\n        sum += N % 10\n\
    \        N = N / 10\n    }\n    for i <= sum {\n        result += fmt.Sprintf(\"\
    %v\", i)\n        i++\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp2iek9zzz_test.go:50: expected '1', got '01'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp2iek9zzz_test.go:50: expected '110', got '0123456'\n   \
    \ --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp2iek9zzz_test.go:50: expected\
    \ '1100', got '0123456789101112'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp2iek9zzz_test.go:50: expected '1001', got '0123456789'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp2iek9zzz_test.go:50: expected '10010',\
    \ got '0123456789101112131415161718'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    str := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N % 10)\
    \ * int(N / 10)\n        N = N / 10\n    }\n    if sum > 0 {\n        str += fmt.Sprintf(\"\
    %d\", sum)\n    }\n    return str\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpqjv6qcsk_test.go:48: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpqjv6qcsk_test.go:48: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpqjv6qcsk_test.go:48: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpqjv6qcsk_test.go:48:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpqjv6qcsk_test.go:48: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    sum := 0\n    for i < N {\n        sum += int(N % 10)\
    \ * uint64(i)\n        N = N / 10\n        i++\n    }\n    if sum > 0 {\n    \
    \    s += fmt.Sprintf(\"%d\", sum)\n    }\n    return s\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp54q62uaj_test.go:23:16: invalid operation: int(N % 10) * uint64(i) (mismatched
    types int and uint64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    for i < N {\n        sum += int(N % 10) * pow(2, i)\n   \
    \     N /= 10\n        i++\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa7z8oc2r_test.go:22:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    output := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  digit = N % 10\n        sum += digit\n        N = N / 10\n    }\n    output\
    \ += fmt.Sprintf(\"%d\", sum)\n    return output\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpit6h1trt_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpit6h1trt_test.go:48: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpit6h1trt_test.go:48: expected '1100',\
    \ got '11'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpit6h1trt_test.go:48:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpit6h1trt_test.go:48: expected '10010', got '18'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    base := 1\n    for i := 0; i < N; i++ {\n        sum += int(N % base)\
    \ * base\n        N = N / base\n        base *= 2\n    }\n    return fmt.Sprintf(\"\
    %d\", sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpqk7lz1ky_test.go:46: expected '1', got '280'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpqk7lz1ky_test.go:46: expected '110', got '28'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpqk7lz1ky_test.go:46: expected '1100',\
    \ got '22'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpqk7lz1ky_test.go:46:\
    \ expected '1001', got '98'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmpqk7lz1ky_test.go:46: expected '10010', got '246'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    for i < N {\n        sum += int(N % 10) * pow(2, i)\n   \
    \     N = N / 10\n        i++\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\
    \nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwrlymmfm_test.go:22:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N = N / 10\n    }\n    for i := 0; i < N; i++ {\n\
    \        result += fmt.Sprintf(\"%d\", sum % 2)\n        sum = int(sum / 2)\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp29_tguo1_test.go:49: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp29_tguo1_test.go:49: expected '110', got '1'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp29_tguo1_test.go:49: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp29_tguo1_test.go:49:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmp29_tguo1_test.go:49: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ make([]byte, N)\n    i := 0\n    for ; N > 0; N-- {\n        s[i] = byte(N%2)\n\
    \        i++\n        N /= 2\n    }\n    return string(s)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpk17jjwp9_test.go:46: expected '1', got '\0\x01\0\x01\0\x01\x01\x01\
    \x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpk17jjwp9_test.go:46: expected '110', got '\0\0\0\x01\x01\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestSolve/test_num__2\
    \ (0.00s)\n        tmpk17jjwp9_test.go:46: expected '1100', got '\x01\0\x01\0\x01\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestSolve/test_num__3\
    \ (0.00s)\n        tmpk17jjwp9_test.go:46: expected '1001', got '\x01\x01\x01\x01\
    \0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    str := \"\"\n    for i < N {\n        sum += int(N % 10)\
    \ * int(N / 10)\n        N = N / 10\n        i++\n    }\n    str = fmt.Sprintf(\"\
    %d\", sum)\n    return str\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpqo3973gg_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpqo3973gg_test.go:48: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpqo3973gg_test.go:48: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpqo3973gg_test.go:48:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpqo3973gg_test.go:48: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += int(N % 10) // get the last digit of N\n        sum += digit\n   \
    \     N = N / 10 // remove the last digit of N\n    }\n    if sum > 0 {\n    \
    \    result = fmt.Sprintf(\"%b\", sum)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpotaqfhwg_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpotaqfhwg_test.go:50: expected '110', got '101'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpotaqfhwg_test.go:50: expected\
    \ '1100', got '10010'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpotaqfhwg_test.go:50:\
    \ expected '1001', got '10010'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpotaqfhwg_test.go:50: expected '10010', got '11110'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    str := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N % 10)\
    \ * int(N / 10)\n        N = N / 10\n    }\n    str = fmt.Sprintf(\"%d\", sum)\n\
    \    return str\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp0r3q2prb_test.go:46: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp0r3q2prb_test.go:46: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp0r3q2prb_test.go:46: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp0r3q2prb_test.go:46:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmp0r3q2prb_test.go:46: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 10\n        sum += digit\n        N /= 10\n    }\n    for i :=\
    \ 0; i < sum; i++ {\n        result += fmt.Sprintf(\"%d\", digit)\n    }\n   \
    \ return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp6hycxuug_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp6hycxuug_test.go:50: expected '110', got '55555'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmp6hycxuug_test.go:50: expected\
    \ '1100', got '111111111111111111111111111111111111'\n    --- FAIL: TestSolve/test_num__3\
    \ (0.00s)\n        tmp6hycxuug_test.go:50: expected '1001', got '999999999999999999'\n\
    \    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmp6hycxuug_test.go:50:\
    \ expected '10010', got '181818181818181818181818181818181818181818181818181818181818'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 10\n        sum += digit\n        N /= 10\n    }\n    for i :=\
    \ 0; i < sum; i++ {\n        result += fmt.Sprintf(\"%d\", digit)\n    }\n   \
    \ return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp6hycxuug_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp6hycxuug_test.go:50: expected '110', got '55555'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmp6hycxuug_test.go:50: expected\
    \ '1100', got '111111111111111111111111111111111111'\n    --- FAIL: TestSolve/test_num__3\
    \ (0.00s)\n        tmp6hycxuug_test.go:50: expected '1001', got '999999999999999999'\n\
    \    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmp6hycxuug_test.go:50:\
    \ expected '10010', got '181818181818181818181818181818181818181818181818181818181818'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  digit = N % 10\n        sum += digit\n        N = N / 10\n        result =\
    \ fmt.Sprintf(\"%v\", sum) + result\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpulg5cce9_test.go:48: expected '1', got '000'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpulg5cce9_test.go:48: expected '110', got '50'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpulg5cce9_test.go:48: expected '1100',\
    \ got '117'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpulg5cce9_test.go:48:\
    \ expected '1001', got '963'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpulg5cce9_test.go:48: expected '10010', got '1893'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    str := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N % 10)\
    \ * int(N / 10)\n        N = N / 10\n    }\n    str = fmt.Sprintf(\"%d\", sum)\n\
    \    return str\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp0r3q2prb_test.go:46: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp0r3q2prb_test.go:46: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp0r3q2prb_test.go:46: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp0r3q2prb_test.go:46:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmp0r3q2prb_test.go:46: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  digit = N % 10\n        sum += digit\n        N = N / 10\n    }\n    result\
    \ = fmt.Sprintf(\"%d\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmplb6_cpmf_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmplb6_cpmf_test.go:48: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmplb6_cpmf_test.go:48: expected '1100',\
    \ got '11'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmplb6_cpmf_test.go:48:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmplb6_cpmf_test.go:48: expected '10010', got '18'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    base := 2\n    for i := 0; i < N; i++ {\n        sum += int(N % base)\
    \ * base\n        N = N / base\n        base *= 2\n    }\n    return fmt.Sprintf(\"\
    %d\", sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpq_h2wwly_test.go:46: expected '1', got '280'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpq_h2wwly_test.go:46: expected '110', got '28'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpq_h2wwly_test.go:46: expected '1100',\
    \ got '22'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpq_h2wwly_test.go:46:\
    \ expected '1001', got '98'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmpq_h2wwly_test.go:46: expected '10010', got '246'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    result += \"1\"\n    result += \"0\"\n    for i := 2; i <= N; i++\
    \ {\n        result += \"0\"\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpzp9n_sba_test.go:45: expected '1', gotn\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmpzp9n_sba_test.go:45:\
    \ expected '110', got '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpzp9n_sba_test.go:45:\
    \ expected '1100', got '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpzp9n_sba_test.go:45:\
    \ expected '1001', got '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for i < N {\n        s += fmt.Sprintf(\"%v\", N % 2)\n\
    \        N = N / 2\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpkixjimcf_test.go:46: expected '1', got '0001011'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpkixjimcf_test.go:46: expected '110', got '01101'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpkixjimcf_test.go:46: expected\
    \ '1100', got '11001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpkixjimcf_test.go:46:\
    \ expected '1001', got '101100'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpkixjimcf_test.go:46: expected '10010', got '1100001'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    base := 2\n    for i := 0; i < N; i++ {\n        sum += int(N % base)\n\
    \        N = N / base\n        base *= 2\n    }\n    return fmt.Sprintf(\"%d\"\
    , sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp4uj18q28_test.go:46: expected '1', got '20'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp4uj18q28_test.go:46: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp4uj18q28_test.go:46: expected '1100',\
    \ got '4'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp4uj18q28_test.go:46:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmp4uj18q28_test.go:46: expected '10010', got '17'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075336
- exit_code: 0
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    for N > 0 {\n        sum += N % 10\n        N = N / 10\n\
    \        i++\n    }\n    return fmt.Sprintf(\"%b\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  sum += digit\n        digit *= 2\n    }\n    result += fmt.Sprintf(\"%d\",\
    \ sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp5rhn_2e0_test.go:47: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp5rhn_2e0_test.go:47: expected '110', got '0'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp5rhn_2e0_test.go:47: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp5rhn_2e0_test.go:47:\
    \ expected '1001', got '0'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmp5rhn_2e0_test.go:47: expected '10010', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075336
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    n := N\n    for n > 0 {\n        s += fmt.Sprintf(\"%0*b\", n, []byte{n%2})\n\
    \        n /= 2\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14ja61f0_test.go:22:44: cannot use n % 2 (value of type int) as type byte
    in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075336
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    output := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  digit = N % 10\n        sum += digit\n        N = N / 10\n    }\n    for i\
    \ := 0; i < sum; i++ {\n        output = output + \"1\"\n    }\n    return output\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpk_25lu8o_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpk_25lu8o_test.go:50: expected '110', got '11111'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpk_25lu8o_test.go:50: expected\
    \ '1100', got '11111111111'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n   \
    \     tmpk_25lu8o_test.go:50: expected '1001', got '111111111'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpk_25lu8o_test.go:50: expected '10010',\
    \ got '111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    result := \"\"\n    for i < N {\n        sum += int(N % 10)\
    \ * i\n        N = N / 10\n        i++\n    }\n    for i := 0; i < len(strconv.Itoa(sum));\
    \ i++ {\n        result += strconv.Itoa(sum % 2)\n        sum = int(sum / 2)\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaadgc8zs_test.go:27:25: undefined: strconv

    /tmp/tmpaadgc8zs_test.go:28:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for N > 0 {\n        digit = N %\
    \ 10\n        sum += digit\n        N = N / 10\n    }\n    for i := 0; i < sum;\
    \ i++ {\n        result = fmt.Sprintf(\"%c%d\", result, digit)\n    }\n    return\
    \ result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpaz0n1ms9_test.go:28:18: fmt.Sprintf format %c has arg result of wrong
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * pow(2, i)\n        N /= 10\n    }\n    for i := len(result) - 1; i >=\
    \ 0; i-- {\n        result += string(sum % 2)\n        sum /= 2\n    }\n    return\
    \ result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp233ku3pr_test.go:22:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    i := 0\n    sum := 0\n    for i < N {\n        sum += int(N % 10)\
    \ * pow(2, i)\n        N = N / 10\n        i++\n    }\n    for i := 0; i < len(strconv.Itoa(sum));\
    \ i++ {\n        result += strconv.Itoa(int(sum % 2))\n        sum = sum / 2\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5h4z6863_test.go:23:30: undefined: pow

    /tmp/tmp5h4z6863_test.go:27:25: undefined: strconv

    /tmp/tmp5h4z6863_test.go:28:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for N > 0 {\n        s += fmt.Sprintf(\"%b\", N%2)\n \
    \       N = N / 2\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpfk3y7oj9_test.go:46: expected '1', got '0001011111'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpfk3y7oj9_test.go:46: expected '110',\
    \ got '01101001'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpfk3y7oj9_test.go:46:\
    \ expected '1100', got '11001001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpfk3y7oj9_test.go:46: expected '1001', got '101100101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpfk3y7oj9_test.go:46: expected '10010',\
    \ got '1100001111'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for digit := 0; N > 0; N-- {\n  \
    \      sum += N % 10\n        N /= 10\n    }\n    if sum > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", sum)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbrglwd5m_test.go:20:5: digit declared but not used

    /tmp/tmpbrglwd5m_test.go:22:9: digit declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * i\n        N = N / 10\n    }\n    if sum > 0 {\n        result = fmt.Sprintf(\"\
    %b\", sum)\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp_tzaat6f_test.go:48: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp_tzaat6f_test.go:48: expected '110', got '101'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmp_tzaat6f_test.go:48: expected\
    \ '1100', got '100'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmp_tzaat6f_test.go:48:\
    \ expected '10010', got '11000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075338
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    for i := 0; i < N; i++ {\n        digit += int(N\
    \ % 2)\n        N = N / 2\n    }\n    for i := 0; i < N; i++ {\n        result\
    \ += string(digit)\n        digit += int(N % 2)\n        N = N / 2\n    }\n  \
    \  return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp44qif_96_test.go:26:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += int(N % 10) // get the last digit\n        sum += digit // add the\
    \ digit to the sum\n        N = N / 10 // remove the last digit\n    }\n    if\
    \ sum > 0 {\n        result = fmt.Sprintf(\"%d\", sum)\n    }\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmplwx0yzll_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmplwx0yzll_test.go:50: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmplwx0yzll_test.go:50: expected '1100',\
    \ got '18'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmplwx0yzll_test.go:50:\
    \ expected '1001', got '18'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmplwx0yzll_test.go:50: expected '10010', got '30'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075338
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ make([]byte, N)\n    i := 0\n    for ; i < N; i++ {\n        s[i] = '0'\n  \
    \  }\n    s[i] = '1'\n    result := string(s)\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\npanic: runtime error: index out of range [1000]\
    \ with length 1000 [recovered]\n\tpanic: runtime error: index out of range [1000]\
    \ with length 1000\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.solve(...)\n\t/tmp/tmpr7b5j6i8_test.go:24\n\
    command-line-arguments_test.TestSolve(0x0?)\n\t/tmp/tmpr7b5j6i8_test.go:36 +0x49\n\
    testing.tRunner(0xc00013c1a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075338
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum,\
    \ i := 0, N\n    sum := sum + int(N%10)\n    N = N / 10\n    for {\n        sum\
    \ += int(N%10)\n        N = N / 10\n        if N == 0 {\n            break\n \
    \       }\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpex9ybg9x_test.go:19:10: i declared but not used

    /tmp/tmpex9ybg9x_test.go:20:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for N > 0 {\n        digit = N %\
    \ 10\n        sum += digit\n        N = N / 10\n    }\n    result = fmt.Sprintf(\"\
    %v\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__1 (0.00s)\n\
    \        tmpeexwu93m_test.go:48: expected '110', got '6'\n    --- FAIL: TestSolve/test_num__2\
    \ (0.00s)\n        tmpeexwu93m_test.go:48: expected '1100', got '12'\n    ---\
    \ FAIL: TestSolve/test_num__3 (0.00s)\n        tmpeexwu93m_test.go:48: expected\
    \ '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmpeexwu93m_test.go:48:\
    \ expected '10010', got '18'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075338
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    carryOn := true\n    for digit < N {\n        if\
    \ carryOn {\n            result += fmt.Sprintf(\"%d\", digit)\n            carryOn\
    \ = false\n        } else {\n            result += fmt.Sprintf(\"0\", digit)\n\
    \            carryOn = true\n        }\n        digit++\n    }\n    if carryOn\
    \ {\n        result += fmt.Sprintf(\"%d\", digit)\n    }\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpxz8keva3_test.go:27:34: fmt.Sprintf call has arguments but no formatting
    directives

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    str := \"\"\n    for N > 0 {\n        sum += N % 10\n   \
    \     N = N / 10\n    }\n    for N > 0 {\n        str += fmt.Sprintf(\"%d\", sum%2)\n\
    \        sum += N % 10\n        N = N / 10\n    }\n    return str\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_53vmtrd_test.go:20:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for i := 0; i < N; i++ {\n      \
    \  digit += int(N % 10) // % is the mod operator\n        sum += digit\n     \
    \   N = N / 10\n    }\n    for i := 0; i < sum; i++ {\n        result += fmt.Sprintf(\"\
    %d\", digit)\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7xeq6qo9_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp7xeq6qo9_test.go:50: expected '110', got '55555'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7xeq6qo9_test.go:50: expected\
    \ '1100', got '111111111111111111111111111111111111'\n    --- FAIL: TestSolve/test_num__3\
    \ (0.00s)\n        tmp7xeq6qo9_test.go:50: expected '1001', got '999999999999999999'\n\
    \    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmp7xeq6qo9_test.go:50:\
    \ expected '10010', got '181818181818181818181818181818181818181818181818181818181818'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075339
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    for i := 0; i < N; i++ {\n        digit += int(N\
    \ % 10) // get the last digit\n        N = N / 10\n    }\n    for i := 0; i <\
    \ digit; i++ {\n        result += fmt.Sprintf(\"%d\", int(N % 2)) // append the\
    \ digit to result\n        N = N / 2\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpm6g92k8g_test.go:49: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpm6g92k8g_test.go:49: expected '110', got '10000'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpm6g92k8g_test.go:49: expected\
    \ '1100', got '10000000000'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n   \
    \     tmpm6g92k8g_test.go:49: expected '1001', got '000000000'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpm6g92k8g_test.go:49: expected '10010',\
    \ got '000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075339
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for i < N {\n        s += fmt.Sprintf(\"%d\", N % 2)\n\
    \        N /= 2\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpi4fdbrzz_test.go:46: expected '1', got '0001011'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpi4fdbrzz_test.go:46: expected '110', got '01101'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpi4fdbrzz_test.go:46: expected\
    \ '1100', got '11001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpi4fdbrzz_test.go:46:\
    \ expected '1001', got '101100'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpi4fdbrzz_test.go:46: expected '10010', got '1100001'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075339
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for N > 0 {\n        digit = N %\
    \ 2\n        sum += digit\n        N = N / 2\n    }\n    result = fmt.Sprintf(\"\
    %d\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpzmf6hey1_test.go:48: expected '1', got '6'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpzmf6hey1_test.go:48: expected '110', got '4'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpzmf6hey1_test.go:48: expected '1100',\
    \ got '4'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpzmf6hey1_test.go:48:\
    \ expected '1001', got '5'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpzmf6hey1_test.go:48: expected '10010', got '6'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075339
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for i < N {\n        s += fmt.Sprintf(\"%0*b\", i, binary.BigEndian.Uint64([]byte(string(N\
    \ % 10))))\n        N = N / 10\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu6utpesp_test.go:22:37: undefined: binary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 10\n        sum += digit\n        N = N / 10\n    }\n    if sum\
    \ > 0 {\n        result = fmt.Sprintf(\"%v\", sum)\n    }\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpzfbl97s8_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpzfbl97s8_test.go:50: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpzfbl97s8_test.go:50: expected '1100',\
    \ got '18'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpzfbl97s8_test.go:50:\
    \ expected '1001', got '18'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmpzfbl97s8_test.go:50: expected '10010', got '30'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075339
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum,\
    \ i := 0, N\n    sum := sum + int(N%10)\n    N = N / 10\n    for i := 0; i < N;\
    \ i++ {\n        sum += int(N%10)\n        N = N / 10\n    }\n    return fmt.Sprintf(\"\
    %d\", sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfmyfkeqw_test.go:19:10: i declared but not used

    /tmp/tmpfmyfkeqw_test.go:20:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075339
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    result += \"0\"\n    for i := 0; i < N; i++ {\n        result +=\
    \ \"1\"\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmppp5y9ym6_test.go:44: expected '1', got '01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmppp5y9ym6_test.go:44:\
    \ expected '110', got '0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmppp5y9ym6_test.go:44:\
    \ expected '1100', got '0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmppp5y9ym6_test.go:44:\
    \ expected '1001', got '01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
  timestamp: 1660075340
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    sum := 0\n    for i < N {\n        sum += int(N % 10)\
    \ * pow(2, i)\n        N /= 10\n        i++\n    }\n    if sum > 0 {\n       \
    \ s += fmt.Sprintf(\"%d\", sum)\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8f9eb0___test.go:23:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075339
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n\n    for i := 0; i < N; i++ {\n    \
    \    sum += digit\n        digit *= 2\n    }\n\n    for i := N; i > 0; i-- {\n\
    \        result += strconv.Itoa(sum%2)\n        sum /= 2\n    }\n\n    return\
    \ result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcz6pst5t_test.go:29:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075340
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    str := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N % 10)\
    \ * pow(2, i)\n        N = N / 10\n    }\n    str = fmt.Sprintf(\"%d\", sum)\n\
    \    return str\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphjuaexlp_test.go:22:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075340
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 10\n        sum += digit\n        N /= 10\n    }\n    result +=\
    \ fmt.Sprintf(\"%d\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpkd1tpueh_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpkd1tpueh_test.go:48: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpkd1tpueh_test.go:48: expected '1100',\
    \ got '18'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpkd1tpueh_test.go:48:\
    \ expected '1001', got '18'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmpkd1tpueh_test.go:48: expected '10010', got '30'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    var i int\n    var sum int\n    for i = 0; i <= N; i++ {\n     \
    \   sum += int(N % 10) * pow(2, i)\n        N = N / 10\n    }\n    result = fmt.Sprintf(\"\
    %d\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq7itjyde_test.go:23:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075340
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * i\n        N /= 10\n    }\n    for i := 0; i < N; i++ {\n        result\
    \ += fmt.Sprintf(\"%d\", sum % 2)\n        sum /= 2\n    }\n    return result\n\
    }\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpvox5kzld_test.go:49: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpvox5kzld_test.go:49: expected '110', got '1'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpvox5kzld_test.go:49: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpvox5kzld_test.go:49:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpvox5kzld_test.go:49: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075341
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    str := \"\"\n    for N > 0 {\n        sum += N % 10\n   \
    \     N = N / 10\n    }\n    for i := 0; i < len(str); i++ {\n        str += str[i]\
    \ - '0'\n    }\n    return str\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptna_7mhg_test.go:20:5: i declared but not used

    /tmp/tmptna_7mhg_test.go:27:9: invalid operation: str += str[i] - ''0'' (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075341
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    result += \"0\"\n    for i := 0; i < N; i++ {\n        result +=\
    \ \"1\"\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmppp5y9ym6_test.go:44: expected '1', gotn\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmppp5y9ym6_test.go:44:\
    \ expected '110', got '0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmppp5y9ym6_test.go:44:\
    \ expected '1100', got '0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmppp5y9ym6_test.go:44:\
    \ expected '1001', got '01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
  timestamp: 1660075340
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for N > 0 {\n        s += fmt.Sprintf(\"%d\", N%2)\n \
    \       N = N / 2\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpx7hxb8iw_test.go:46: expected '1', got '0001011111'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpx7hxb8iw_test.go:46: expected '110',\
    \ got '01101001'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpx7hxb8iw_test.go:46:\
    \ expected '1100', got '11001001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpx7hxb8iw_test.go:46: expected '1001', got '101100101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpx7hxb8iw_test.go:46: expected '10010',\
    \ got '1100001111'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075341
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    for i := 0; i < N; i++ {\n        digit += int(N\
    \ % 2)\n        N /= 2\n    }\n    for i := 0; i < digit; i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmy1dhbp2_test.go:48: expected '1', got '111'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpmy1dhbp2_test.go:48: expected '110', got '111'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmy1dhbp2_test.go:48: expected\
    \ '1100', got '111'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpmy1dhbp2_test.go:48:\
    \ expected '1001', got '111'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpmy1dhbp2_test.go:48: expected '10010', got '111'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075341
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    digit := 0\n    result := \"\"\n    for N > 0 {\n        digit = N %\
    \ 2\n        sum += digit\n        N = N / 2\n    }\n    result = fmt.Sprintf(\"\
    %d\", sum)\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpzmf6hey1_test.go:48: expected '1', got '6'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpzmf6hey1_test.go:48: expected '110', got '4'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpzmf6hey1_test.go:48: expected '1100',\
    \ got '4'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpzmf6hey1_test.go:48:\
    \ expected '1001', got '5'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpzmf6hey1_test.go:48: expected '10010', got '6'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075339
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    var i int\n    var sum int\n    for i = 1; i <= N; i++ {\n     \
    \   sum += i\n    }\n    for i = 1; i <= N; i++ {\n        result = fmt.Sprintf(\"\
    %0*d\", i, sum) + result\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.15s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpaavvgcyp_test.go:48: expected '1', got
  timestamp: 1660075342
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    result := \"\"\n    for i < N {\n        sum += int(N % 10)\
    \ * i\n        N = N / 10\n        i++\n    }\n    for i < N {\n        result\
    \ += strconv.Itoa(int(N % 10) * i)\n        N = N / 10\n        i++\n    }\n \
    \   return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpviiuhbrl_test.go:28:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075341
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += N % 2\n        sum += digit\n        N /= 2\n    }\n    for i := 0;\
    \ i < sum; i++ {\n        result += fmt.Sprintf(\"%v\", digit)\n    }\n    return\
    \ result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1000), expected: \"1\" },\n     { actual:\
    \ candidate(150), expected: \"110\" },\n     { actual: candidate(147), expected:\
    \ \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n     { actual:\
    \ candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp2f7h3lwd_test.go:50: expected '1', got '3333333'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp2f7h3lwd_test.go:50: expected '110', got '33333333'\n  \
    \  --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp2f7h3lwd_test.go:50: expected\
    \ '1100', got '3333333333'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n    \
    \    tmp2f7h3lwd_test.go:50: expected '1001', got '3333333333333'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp2f7h3lwd_test.go:50: expected '10010',\
    \ got '33333333333333'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    sum := 0\n    for i < N {\n        sum += int(N % 10)\
    \ * i\n        N = N / 10\n        i++\n    }\n    for i := 0; i < sum; i++ {\n\
    \        s += \"1\"\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpe6jg6yd1_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpe6jg6yd1_test.go:50: expected '110', got '11111'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpe6jg6yd1_test.go:50: expected\
    \ '1100', got '1111'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpe6jg6yd1_test.go:50:\
    \ expected '1001', got '111111111'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpe6jg6yd1_test.go:50: expected '10010', got '111111111111111111111111'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * pow(2, i)\n  \
    \      N /= 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2vib1l8_test.go:21:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    i := 0\n    sum := 0\n    for N > 0 {\n        sum += N % 10\n\
    \        N = N / 10\n    }\n    for i := 0; i < len(result); i++ {\n        if\
    \ sum > 0 {\n            result += fmt.Sprintf(\"%d\", sum)\n            sum =\
    \ 0\n        }\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfs614tb0_test.go:20:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075341
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    for i := 0; i < N; i++ {\n        sum += int(N % 10) * pow(2, i)\n  \
    \      N /= 10\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2vib1l8_test.go:21:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit = N % 10\n        sum += digit\n        N = N / 10\n    }\n    for i\
    \ := 0; i < sum; i++ {\n        result = fmt.Sprintf(\"%c\", result) + fmt.Sprintf(\"\
    %c\", digit)\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp8b_ag2t9_test.go:28:18: fmt.Sprintf format %c has arg result of wrong
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    base := 2\n    for i := 0; i < N; i++ {\n        sum += int(N % base)\n\
    \        N = N / base\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpxfqqyn50_test.go:45: expected '1', got '3'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpxfqqyn50_test.go:45: expected '110', got '3'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpxfqqyn50_test.go:45: expected '1100',\
    \ got '3'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpxfqqyn50_test.go:45:\
    \ expected '1001', got '3'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpxfqqyn50_test.go:45: expected '10010', got '3'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    for i := 0; i < N; i++ {\n        digit += int(N\
    \ % 10) // get the last digit of N\n        N = N / 10\n    }\n    result += fmt.Sprintf(\"\
    %d\", digit)\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpojl3nf2f_test.go:46: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpojl3nf2f_test.go:46: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpojl3nf2f_test.go:46: expected '1100',\
    \ got '11'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpojl3nf2f_test.go:46:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpojl3nf2f_test.go:46: expected '10010', got '18'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum,\
    \ i := 0, 1\n    for N > 0 {\n        sum += N % 10\n        N = N / 10\n    \
    \    i++\n    }\n    return fmt.Sprintf(\"%0*d\", i, sum)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpj084pf9h_test.go:45: expected '1', got '00001'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpj084pf9h_test.go:45: expected '110', got '0006'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpj084pf9h_test.go:45: expected\
    \ '1100', got '0012'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpj084pf9h_test.go:45:\
    \ expected '1001', got '0009'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n \
    \       tmpj084pf9h_test.go:45: expected '10010', got '0018'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N = N / 10\n    }\n    for i := 0; i < N; i++ {\n\
    \        result += fmt.Sprintf(\"%d\", sum % 2)\n        sum = int(sum / 2)\n\
    \    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp29_tguo1_test.go:49: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmp29_tguo1_test.go:49: expected '110', got '1'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmp29_tguo1_test.go:49: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmp29_tguo1_test.go:49:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmp29_tguo1_test.go:49: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  digit += int(N % 10)\n        sum += digit\n        N = N / 10\n    }\n   \
    \ result += fmt.Sprintf(\"%d\", sum)\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpklopaev2_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpklopaev2_test.go:48: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpklopaev2_test.go:48: expected '1100',\
    \ got '18'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpklopaev2_test.go:48:\
    \ expected '1001', got '18'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n   \
    \     tmpklopaev2_test.go:48: expected '10010', got '30'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for N > 0 {\n        if N%2 == 0 {\n            s += \"\
    1\"\n            N -= 2\n        } else {\n            s += \"0\"\n          \
    \  N -= 1\n        }\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmposs9v_8f_test.go:51: expected '1', gotn\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmposs9v_8f_test.go:51:\
    \ expected '110', got '111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmposs9v_8f_test.go:51:\
    \ expected '1100', got '01111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmposs9v_8f_test.go:51:\
    \ expected '1001', got '01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__4 (0.00s)\n        tmposs9v_8f_test.go:51:\
    \ expected '10010', got '01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ make([]byte, N)\n    i := 0\n    for N > 0 {\n        s[i] = '0'\n        i++\n\
    \        N /= 2\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ '1' {\n            s[i] = '0'\n        } else {\n            s[i] = '1'\n  \
    \      }\n    }\n    return string(s)\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpya7o4w_d_test.go:53: expected '1', gotn\
    \    --- FAIL: TestSolve/test_num__1 (0.00s)\n        tmpya7o4w_d_test.go:53:\
    \ expected '110', got '111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpya7o4w_d_test.go:53:\
    \ expected '1100', got '111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpya7o4w_d_test.go:53:\
    \ expected '1001', got '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
  timestamp: 1660075342
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    n := N\n    for i := 0; i < len(s); i++ {\n        if n%2 == 0 {\n\
    \            s += \"1\"\n            n /= 2\n        } else {\n            s +=\
    \ \"0\"\n            n /= 2\n        }\n    }\n    return s\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpri51c_k6_test.go:50: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpri51c_k6_test.go:50: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpri51c_k6_test.go:50: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpri51c_k6_test.go:50:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpri51c_k6_test.go:50: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    for i := 0; i < N; i++ {\n      \
    \  sum += int(N % 10) * digit\n        digit *= 2\n        N /= 10\n    }\n  \
    \  result += fmt.Sprintf(\"%d\", sum)\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpkpe0qq6d_test.go:48: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpkpe0qq6d_test.go:48: expected '110', got '0'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpkpe0qq6d_test.go:48: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpkpe0qq6d_test.go:48:\
    \ expected '1001', got '0'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpkpe0qq6d_test.go:48: expected '10010', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    i := 0\n    for i < N {\n        s += fmt.Sprintf(\"%v\", N%2)\n \
    \       N /= 2\n        i++\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpndyqmfyc_test.go:46: expected '1', got '0001011'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpndyqmfyc_test.go:46: expected '110', got '01101'\n    ---\
    \ FAIL: TestSolve/test_num__2 (0.00s)\n        tmpndyqmfyc_test.go:46: expected\
    \ '1100', got '11001'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpndyqmfyc_test.go:46:\
    \ expected '1001', got '101100'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n\
    \        tmpndyqmfyc_test.go:46: expected '10010', got '1100001'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    str := \"\"\n    for i := 0; i < N; i++ {\n        sum += int(N % 10)\
    \ * pow(2, i)\n        N /= 10\n    }\n    if sum > 0 {\n        str += fmt.Sprintf(\"\
    %d\", sum)\n    }\n    return str\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpue86n7sm_test.go:22:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    s :=\
    \ \"\"\n    x := N\n    y := 0\n    for {\n        if x%2 == 0 {\n           \
    \ s += \"1\"\n            x /= 2\n        } else {\n            s += \"0\"\n \
    \           x /= 2\n        }\n        if x == 0 {\n            break\n      \
    \  }\n        y += 1\n    }\n    return fmt.Sprintf(\"%v\", s)\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmps4588rds_test.go:55: expected '1', got '1110100000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmps4588rds_test.go:55: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmps4588rds_test.go:55:\
    \ expected '1100', got '00110110'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmps4588rds_test.go:55: expected '1001', got '010011010'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmps4588rds_test.go:55: expected '10010',\
    \ got '0011110000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 2
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    sum :=\
    \ 0\n    i := 0\n    for i < N {\n        sum += int(N % 10) * pow(2, i)\n   \
    \     N /= 10\n        i++\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n\n\
    func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa7z8oc2r_test.go:22:30: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    digit := 0\n    sum := 0\n    carryOn := false\n    for i := 0;\
    \ i < N; i++ {\n        digit = N % 10\n        sum += digit\n        N = N /\
    \ 10\n        if N == 0 {\n            carryOn = true\n        }\n        if carryOn\
    \ {\n            result += \"1\"\n        } else {\n            result += \"0\"\
    \n        }\n    }\n    if carryOn {\n        result += \"1\"\n    }\n    return\
    \ fmt.Sprintf(\"%v\", sum)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpb476xvq1_test.go:59: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpb476xvq1_test.go:59: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpb476xvq1_test.go:59: expected '1100',\
    \ got '11'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpb476xvq1_test.go:59:\
    \ expected '1001', got '9'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpb476xvq1_test.go:59: expected '10010', got '18'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    var sumDigits int\n    var i int\n    var j int\n    var k int\n\
    \    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n \
    \   var q int\n    var r int\n    var s int\n    var t int\n    var u int\n  \
    \  var v int\n    var w int\n    var x int\n    var y int\n    var z int\n   \
    \ var A int\n    var B int\n    var C int\n    var D int\n    var E int\n    var\
    \ F int\n    var G int\n    var H int\n    var I int\n    var J int\n    var K\
    \ int\n    var L int\n    var M int\n    var N int\n    var O int\n    var P int\n\
    \    var Q int\n    var R int\n    var S int\n    var T int\n    var U int\n \
    \   var V int\n    var W int\n    var X int\n    var Y int\n    var Z int\n  \
    \  var A int\n    var B int\n    var C int\n    var D int\n    var E int\n   \
    \ var F int\n    var G int\n    var H int\n    var I int\n    var J int\n    var\
    \ K int\n    var L int\n    var M int\n    var N int\n    var O int\n    var P\
    \ int\n    var Q int\n    var R int\n    var S int\n    var T int\n    var U int\n\
    \    var V int\n    var W int\n    var X int\n    var Y int\n    var Z int\n \
    \   var A int\n    var B int\n    var C int\n    var D int\n    var E int\n  \
    \  var F int\n    var G int\n    var H int\n    var I int\n    var J int\n   \
    \ var K int\n    var L int\n    var M int\n    var N int\n    var O int\n    var\
    \ P int\n    var Q int\n    var R int\n    var S int\n    var T int\n    var U\
    \ int\n    var V int\n    var W int\n    var X int\n    var Y int\n    var Z int\n\
    \    var A int\n    var B int\n    var C int\n    var D int\n    var E int\n \
    \   var F int\n    var G int\n    var H int\n    var I int\n    var J int\n  \
    \  var K int\n    var L int\n    var M int\n    var N int\n    var O int\n   \
    \ var P int\n    var Q int\n    var R int\n    var S int\n    var T int\n    var\
    \ U int\n    var V int\n    var W int\n    var X int\n    var Y int\n    var Z\
    \ int\n    var A int\n    var B int\n    var C int\n    var D \nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiicyu1mk_test.go:146:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    result\
    \ := \"\"\n    sum := 0\n    for i := 0; i < N; i++ {\n        sum += int(N %\
    \ 10) * int(N / 10)\n        N = N / 10\n    }\n    if sum > 0 {\n        result\
    \ = fmt.Sprintf(\"%d\", sum)\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpgqo8jcfs_test.go:48: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpgqo8jcfs_test.go:48: expected '110', got '5'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpgqo8jcfs_test.go:48: expected '1100',\
    \ got '102'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpgqo8jcfs_test.go:48:\
    \ expected '1001', got '108'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n  \
    \      tmpgqo8jcfs_test.go:48: expected '10010', got '342'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075342
