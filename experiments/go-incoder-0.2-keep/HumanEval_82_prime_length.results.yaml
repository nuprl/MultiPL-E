language: go_test.go
name: HumanEval_82_prime_length
results:
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i <= length/2;\
    \ i++ {\n        if myString[i] != myString[i/2] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7l8fjb5q_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7l8fjb5q_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7l8fjb5q_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp7l8fjb5q_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp7l8fjb5q_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp7l8fjb5q_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp7l8fjb5q_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7l8fjb5q_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp7l8fjb5q_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp7l8fjb5q_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    primes := make([]bool, length+1)\n    primes[0] = true\n    for i := 2; i\
    \ < length; i++ {\n        if primes[i] {\n            for j := 2; i*j < length;\
    \ j++ {\n                primes[i*j] = false\n            }\n        }\n    }\n\
    \    return primes[length]\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    primes := make([]int,\
    \ length)\n    for i := 0; i < length; i++ {\n        primes[i] = 1\n    }\n \
    \   for i := 2; i < length; i++ {\n        if primes[i] == 0 {\n            for\
    \ j := 0; j < i; j++ {\n                if myString[j] != 'a' {\n            \
    \        primes[i] += 1\n                    break\n                }\n      \
    \      }\n        }\n    }\n    if primes[length-1] == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 20 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000162030})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000162030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length({0x0, 0x0})\n\t/tmp/tmp9ld37kmx_test.go:32\
    \ +0xa5\ncommand-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp9ld37kmx_test.go:53\
    \ +0x142\ntesting.tRunner(0xc0001036c0, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] != myString[length-2-i] {\n                if myString[i]\
    \ != myString[length-3*i] {\n                    prime = false\n             \
    \   }\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpw9tlbcfo_test.go:22\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpw9tlbcfo_test.go:38\
    \ +0xaa6\ntesting.tRunner(0xc000192680, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i] {\n                prime = false\n            }\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpoe6mcp04_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpoe6mcp04_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpoe6mcp04_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpoe6mcp04_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpoe6mcp04_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpoe6mcp04_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpoe6mcp04_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpoe6mcp04_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpoe6mcp04_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpoe6mcp04_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    primes := make([]bool, length-1)\n    for i := 0; i < length-1; i++ {\n \
    \       if myString[i] > myString[i+1] {\n            return false\n        }\n\
    \    }\n    for i := 2; i < length-1; i++ {\n        if primes[i] {\n        \
    \    return false\n        }\n        for j := i + 1; j < length; j++ {\n    \
    \        if myString[j] > myString[i] {\n                return false\n      \
    \      }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp4tuw1ahy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp4tuw1ahy_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp4tuw1ahy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp4tuw1ahy_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp4tuw1ahy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp4tuw1ahy_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp4tuw1ahy_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp4tuw1ahy_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    \n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            prime := false\n            break\n        }\n    }\n    \n \
    \   return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu_80_pw_test.go:22:13: prime declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073808
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            prime := false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jfrkaj0_test.go:21:13: prime declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073808
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for\
    \ i := 0; i < length; i++ {\n        if myString[i] > 'z' {\n            return\
    \ false\n        }\n        for _, prime := range primes {\n            if myString[i]\
    \ == string(prime) {\n                return false\n            }\n        }\n\
    \    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphvg1of7w_test.go:23:31: invalid operation: myString[i] == string(prime)
    (mismatched types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073808
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    prime\
    \ := true\n    for i := 0; i < length; i++ {\n        if myString[i] > 'z' {\n\
    \            prime = false\n            break\n        }\n        for _, prime\
    \ := range primes {\n            if myString[i] == string(prime) {\n         \
    \       prime = false\n                break\n            }\n        }\n     \
    \   if prime {\n            primes = append(primes, length)\n        }\n    }\n\
    \    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0by8mssy_test.go:25:31: invalid operation: myString[i] == string(prime)
    (mismatched types byte and string)

    /tmp/tmp0by8mssy_test.go:26:25: cannot use false (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073808
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] % i == 0 {\n                prime = false\n      \
    \      }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdr2_vu7_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073808
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    primes := make([]int,\
    \ length)\n    for i := 0; i < length; i++ {\n        primes[i] = 1\n    }\n \
    \   for i := 2; i < length; i++ {\n        if primes[i] == 0 {\n            for\
    \ j := 2; j < i; j++ {\n                if primes[j] == 0 {\n                \
    \    primes[j] = 1\n                    break\n                }\n           \
    \ }\n        }\n    }\n    for i := 0; i < length; i++ {\n        if primes[i]\
    \ == 1 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpivq35tq4_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpivq35tq4_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpivq35tq4_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpivq35tq4_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpivq35tq4_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n                break\n            }\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp3nw6dq6a_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp3nw6dq6a_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp3nw6dq6a_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp3nw6dq6a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp3nw6dq6a_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp3nw6dq6a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp3nw6dq6a_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your logic here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n                break\n            }\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpi6y_yknr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpi6y_yknr_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpi6y_yknr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpi6y_yknr_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpi6y_yknr_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpi6y_yknr_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpi6y_yknr_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            prime = false\n            break\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length+1)\n    primes[0]\
    \ = true\n    for i := 2; i < length; i++ {\n        if primes[i] {\n        \
    \    for j := i*i; j < length; j += i {\n                primes[j] = false\n \
    \           }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length/i-i] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpbb_3_w4e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpbb_3_w4e_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpbb_3_w4e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpbb_3_w4e_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpbb_3_w4e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpbb_3_w4e_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpbb_3_w4e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpbb_3_w4e_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpbb_3_w4e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpbb_3_w4e_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpbb_3_w4e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    if length == 2 {\n        return true\n    }\n    if length == 3 {\n    \
    \    return true\n    }\n    if length == 4 {\n        return true\n    }\n  \
    \  if length == 5 {\n        return true\n    }\n    if length == 6 {\n      \
    \  return true\n    }\n    if length == 7 {\n        return true\n    }\n    if\
    \ length == 8 {\n        return true\n    }\n    if length == 9 {\n        return\
    \ true\n    }\n    if length == 10 {\n        return true\n    }\n    if length\
    \ == 11 {\n        return true\n    }\n    if length == 12 {\n        return true\n\
    \    }\n    if length == 13 {\n        return true\n    }\n    if length == 14\
    \ {\n        return true\n    }\n    if length == 15 {\n        return true\n\
    \    }\n    if length == 16 {\n        return true\n    }\n    if length == 17\
    \ {\n        return true\n    }\n    if length == 18 {\n        return true\n\
    \    }\n    if length == 19 {\n        return true\n    }\n    if length == 20\
    \ {\n        return true\n    }\n    if length == 21 {\n        return true\n\
    \    }\n    if length == 22 {\n        return true\n    }\n    if length == 23\
    \ {\n        return true\n    }\n    if length == 24 {\n        return true\n\
    \    }\n    if length == 25 {\n        return true\n    }\n    if length == 26\
    \ {\n        return true\n    }\n    if length == 27 {\n        return true\n\
    \    }\n    if length == 28 {\n        return true\n    }\n    if length == 29\
    \ {\n        return true\n    }\n    if length == 30 {\n        return true\n\
    \    }\n    if length == 31 {\n        return true\n    }\n    if length == 32\
    \ {\n        return true\n    }\n    if length == 33 {\n        return true\n\
    \    }\n    if length == 34 {\n        return true\n    }\n    if length == 35\
    \ {\n        return true\n    }\n    if length == 36 {\n        return true\n\
    \    }\n    if length == 37 {\n        return true\n    }\n    if length == 38\
    \ {\n        return true\n    }\n    if length == 39 {\n        return true\n\
    \    }\n    if length == 40 {\n        return true\n    }\n    if length == 41\
    \ {\n        return true\n    }\n    if length == 42 {\n        return true\n\
    \    }\n    if length == 43 {\n        return true\n    }\n    if length == 44\
    \ {\n        return true\n    }\n    if length == 45 {\n        return true\n\
    \    }\n    if length == 46 {\n        return true\n    }\n    if length == 47\
    \ {\n        return true\n    }\n    if length == 48 {\n        return true\n\
    \    }\n    if \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1gx_h69__test.go:162:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073807
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i <= length/2;\
    \ i++ {\n        if myString[i] != myString[length-i] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    primes := make([]bool,\
    \ length+1)\n    primes[0] = true\n    for i := 2; i <= length; i++ {\n      \
    \  if primes[i] {\n            for j := 2; i*j <= length; j++ {\n            \
    \    primes[i*j] = false\n            }\n        }\n    }\n    return primes[length]\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp673w_0o6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp673w_0o6_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp673w_0o6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp673w_0o6_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp673w_0o6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp673w_0o6_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp673w_0o6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp673w_0o6_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmp673w_0o6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmp673w_0o6_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp673w_0o6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073810
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i <= length/2;\
    \ i++ {\n        if myString[i] != myString[length-i] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    \n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i != 0 {\n                prime = false\n  \
    \          }\n        }\n    }\n    \n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq50x1i6n_test.go:22:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073810
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    if length == 2 || length == 3 {\n        return true\n    }\n    if length\
    \ == 4 {\n        return true\n    }\n    if length == 5 {\n        return true\n\
    \    }\n    if length == 6 {\n        return true\n    }\n    if length == 7 {\n\
    \        return true\n    }\n    if length == 8 {\n        return true\n    }\n\
    \    if length == 9 {\n        return true\n    }\n    if length == 10 {\n   \
    \     return true\n    }\n    if length == 11 {\n        return true\n    }\n\
    \    if length == 12 {\n        return true\n    }\n    if length == 13 {\n  \
    \      return true\n    }\n    if length == 14 {\n        return true\n    }\n\
    \    if length == 15 {\n        return true\n    }\n    if length == 16 {\n  \
    \      return true\n    }\n    if length == 17 {\n        return true\n    }\n\
    \    if length == 18 {\n        return true\n    }\n    if length == 19 {\n  \
    \      return true\n    }\n    if length == 20 {\n        return true\n    }\n\
    \    if length == 21 {\n        return true\n    }\n    if length == 22 {\n  \
    \      return true\n    }\n    if length == 23 {\n        return true\n    }\n\
    \    if length == 24 {\n        return true\n    }\n    if length == 25 {\n  \
    \      return true\n    }\n    if length == 26 {\n        return true\n    }\n\
    \    if length == 27 {\n        return true\n    }\n    if length == 28 {\n  \
    \      return true\n    }\n    if length == 29 {\n        return true\n    }\n\
    \    if length == 30 {\n        return true\n    }\n    if length == 31 {\n  \
    \      return true\n    }\n    if length == 32 {\n        return true\n    }\n\
    \    if length == 33 {\n        return true\n    }\n    if length == 34 {\n  \
    \      return true\n    }\n    if length == 35 {\n        return true\n    }\n\
    \    if length == 36 {\n        return true\n    }\n    if length == 37 {\n  \
    \      return true\n    }\n    if length == 38 {\n        return true\n    }\n\
    \    if length == 39 {\n        return true\n    }\n    if length == 40 {\n  \
    \      return true\n    }\n    if length == 41 {\n        return true\n    }\n\
    \    if length == 42 {\n        return true\n    }\n    if length == 43 {\n  \
    \      return true\n    }\n    if length == 44 {\n        return true\n    }\n\
    \    if length == 45 {\n        return true\n    }\n    if length == 46 {\n  \
    \      return true\n    }\n    if length == 47 {\n        return true\n    }\n\
    \    if length == 48 {\n        return true\n    }\n    if length == 49 {\n  \
    \      return true\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm6oh63gu_test.go:160:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    if length == 2 {\n        return true\n    }\n    if length == 3 {\n    \
    \    return true\n    }\n    if length == 4 {\n        return true\n    }\n  \
    \  if length == 5 {\n        return true\n    }\n    if length == 6 {\n      \
    \  return true\n    }\n    if length == 7 {\n        return true\n    }\n    if\
    \ length == 8 {\n        return true\n    }\n    if length == 9 {\n        return\
    \ true\n    }\n    if length == 10 {\n        return true\n    }\n    if length\
    \ == 11 {\n        return true\n    }\n    if length == 12 {\n        return true\n\
    \    }\n    if length == 13 {\n        return true\n    }\n    if length == 14\
    \ {\n        return true\n    }\n    if length == 15 {\n        return true\n\
    \    }\n    if length == 16 {\n        return true\n    }\n    if length == 17\
    \ {\n        return true\n    }\n    if length == 18 {\n        return true\n\
    \    }\n    if length == 19 {\n        return true\n    }\n    if length == 20\
    \ {\n        return true\n    }\n    if length == 21 {\n        return true\n\
    \    }\n    if length == 22 {\n        return true\n    }\n    if length == 23\
    \ {\n        return true\n    }\n    if length == 24 {\n        return true\n\
    \    }\n    if length == 25 {\n        return true\n    }\n    if length == 26\
    \ {\n        return true\n    }\n    if length == 27 {\n        return true\n\
    \    }\n    if length == 28 {\n        return true\n    }\n    if length == 29\
    \ {\n        return true\n    }\n    if length == 30 {\n        return true\n\
    \    }\n    if length == 31 {\n        return true\n    }\n    if length == 32\
    \ {\n        return true\n    }\n    if length == 33 {\n        return true\n\
    \    }\n    if length == 34 {\n        return true\n    }\n    if length == 35\
    \ {\n        return true\n    }\n    if length == 36 {\n        return true\n\
    \    }\n    if length == 37 {\n        return true\n    }\n    if length == 38\
    \ {\n        return true\n    }\n    if length == 39 {\n        return true\n\
    \    }\n    if length == 40 {\n        return true\n    }\n    if length == 41\
    \ {\n        return true\n    }\n    if length == 42 {\n        return true\n\
    \    }\n    if length == 43 {\n        return true\n    }\n    if length == 44\
    \ {\n        return true\n    }\n    if length == 45 {\n        return true\n\
    \    }\n    if length == 46 {\n        return true\n    }\n    if length == 47\
    \ {\n        return true\n    }\n    if length == 48 {\n        return true\n\
    \    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqw3gbhr3_test.go:162:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073809
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            prime := false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbopqw2bg_test.go:21:13: prime declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073810
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    if length == 2 || length == 3 {\n        return true\n    }\n    if length\
    \ == 4 {\n        return true\n    }\n    if length == 5 {\n        return true\n\
    \    }\n    if length == 6 {\n        return true\n    }\n    if length == 7 {\n\
    \        return true\n    }\n    if length == 8 {\n        return true\n    }\n\
    \    if length == 9 {\n        return true\n    }\n    if length == 10 {\n   \
    \     return true\n    }\n    if length == 11 {\n        return true\n    }\n\
    \    if length == 12 {\n        return true\n    }\n    if length == 13 {\n  \
    \      return true\n    }\n    if length == 14 {\n        return true\n    }\n\
    \    if length == 15 {\n        return true\n    }\n    if length == 16 {\n  \
    \      return true\n    }\n    if length == 17 {\n        return true\n    }\n\
    \    if length == 18 {\n        return true\n    }\n    if length == 19 {\n  \
    \      return true\n    }\n    if length == 20 {\n        return true\n    }\n\
    \    if length == 21 {\n        return true\n    }\n    if length == 22 {\n  \
    \      return true\n    }\n    if length == 23 {\n        return true\n    }\n\
    \    if length == 24 {\n        return true\n    }\n    if length == 25 {\n  \
    \      return true\n    }\n    if length == 26 {\n        return true\n    }\n\
    \    if length == 27 {\n        return true\n    }\n    if length == 28 {\n  \
    \      return true\n    }\n    if length == 29 {\n        return true\n    }\n\
    \    if length == 30 {\n        return true\n    }\n    if length == 31 {\n  \
    \      return true\n    }\n    if length == 32 {\n        return true\n    }\n\
    \    if length == 33 {\n        return true\n    }\n    if length == 34 {\n  \
    \      return true\n    }\n    if length == 35 {\n        return true\n    }\n\
    \    if length == 36 {\n        return true\n    }\n    if length == 37 {\n  \
    \      return true\n    }\n    if length == 38 {\n        return true\n    }\n\
    \    if length == 39 {\n        return true\n    }\n    if length == 40 {\n  \
    \      return true\n    }\n    if length == 41 {\n        return true\n    }\n\
    \    if length == 42 {\n        return true\n    }\n    if length == 43 {\n  \
    \      return true\n    }\n    if length == 44 {\n        return true\n    }\n\
    \    if length == 45 {\n        return true\n    }\n    if length == 46 {\n  \
    \      return true\n    }\n    if length == 47 {\n        return true\n    }\n\
    \    if length == 48 {\n        return true\n    }\n    if length == 49 {\n  \
    \      return true\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm6oh63gu_test.go:160:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            prime = false\n            break\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    primes := make([]int, length)\n    for i := 0; i < length; i++ {\n      \
    \  primes[i] = 1\n    }\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ == 0 {\n            continue\n        }\n        for j := i + 1; j < length;\
    \ j++ {\n            if primes[j] == 0 {\n                continue\n         \
    \   }\n            if myString[i] == myString[j] {\n                primes[j]\
    \ = 0\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmptqzg8pqn_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmptqzg8pqn_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmptqzg8pqn_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073810
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i-1] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i <= length/2; i++ {\n        if myString[i] != myString[length-i] {\n\
    \            prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpx4n0me_x_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpx4n0me_x_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpx4n0me_x_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpx4n0me_x_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpx4n0me_x_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpx4n0me_x_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpx4n0me_x_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpx4n0me_x_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpx4n0me_x_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpx4n0me_x_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    for i :=\
    \ 0; i < length; i++ {\n        primes[i] = 1\n    }\n    for i := 2; i < length;\
    \ i++ {\n        if primes[i] == 0 {\n            for j := 0; j < i; j++ {\n \
    \               if myString[j] != 'a' && myString[j] != 'e' && myString[j] !=\
    \ 'i' && myString[j] != 'o' && myString[j] != 'u' {\n                    primes[i]\
    \ = 0\n                    break\n                }\n            }\n        }\n\
    \    }\n    return primes[length-1] == 1\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014390})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length({0x0, 0x0})\n\t/tmp/tmp9aefvreu_test.go:31\
    \ +0x95\ncommand-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp9aefvreu_test.go:49\
    \ +0x142\ntesting.tRunner(0xc0001a0340, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    primes[0]\
    \ = 2\n    for i := 1; i < length; i++ {\n        if primes[i] != 0 {\n      \
    \      for j := 2; j < primes[i]; j++ {\n                primes[i*j] = primes[i]\n\
    \            }\n        }\n    }\n    for i := 2; i < length/2; i++ {\n      \
    \  if primes[i] != 0 {\n            if myString[i] != myString[length-i] {\n \
    \               return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length({0x0, 0x0})\n\t/tmp/tmp72_bfvdf_test.go:18\
    \ +0x117\ncommand-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp72_bfvdf_test.go:51\
    \ +0x142\ntesting.tRunner(0xc0001a01a0, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpy_c1wf9e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpy_c1wf9e_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i <= length/2; i++ {\n        if myString[i] != myString[length-i] {\n\
    \            prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpoa6plvhr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpoa6plvhr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpoa6plvhr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpoa6plvhr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpoa6plvhr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpoa6plvhr_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpoa6plvhr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpoa6plvhr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpoa6plvhr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpoa6plvhr_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    if length == 2 || length == 3 {\n        return true\n    }\n    i := 2\n\
    \    for i < length {\n        if myString[i] != myString[i/2] {\n           \
    \ return false\n        }\n        i += 2\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp4bkapvg3_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp4bkapvg3_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp4bkapvg3_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp4bkapvg3_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp4bkapvg3_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp4bkapvg3_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp4bkapvg3_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length/2] {\n                if myString[i]\
    \ != myString[length/3] {\n                    if myString[i] != myString[length/4]\
    \ {\n                        if myString[i] != myString[length/5] {\n        \
    \                    if myString[i] != myString[length/6] {\n                \
    \                if myString[i] != myString[length/7] {\n                    \
    \                if myString[i] != myString[length/8] {\n                    \
    \                    if myString[i] != myString[length/9] {\n                \
    \                            if myString[i] != myString[length/10] {\n       \
    \                                         if myString[i] != myString[length/11]\
    \ {\n                                                    if myString[i] != myString[length/12]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/13] {\n                                                    \
    \        if myString[i] != myString[length/14] {\n                           \
    \                                     if myString[i] != myString[length/15] {\n\
    \                                                    if myString[i] != myString[length/16]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/17] {\n                                                    \
    \        if myString[i] != myString[length/18] {\n                           \
    \                                     if myString[i] != myString[length/19] {\n\
    \                                                    if myString[i] != myString[length/20]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/21] {\n                                                    \
    \        if myString[i] != myString[length/22] {\n                           \
    \                                     if myString[i] != myString[length/23] {\n\
    \                                                    if myString[i] != myString[length/24]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/25] {\n                                                    \
    \        if myString[i] != myString[length/26] {\n                           \
    \                                     if myString[i] != myString[length/27] {\n\
    \                                                    if myString[i] != myString[length/28]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/29] {\n                                                    \
    \        if myString[i] != myString[length/30] {\n                           \
    \                                     if myString[i] != myString[length/31] {\n\
    \                                                    if myString[i] != myString[length/32]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/33] {\n                                                    \
    \        if myString[i] != myString[length/34] {\n                           \
    \                                     if myString[i] != myString[length/35] {\n\
    \                                                    if myString\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp21flg9z4_test.go:56:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073810
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length] {\n  \
    \          prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpponx6n6n_test.go:20\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpponx6n6n_test.go:35\
    \ +0x1b\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i-1] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] != myString[length-i-1] {\n                prime =\
    \ false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp0n_6lc08_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp0n_6lc08_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp0n_6lc08_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp0n_6lc08_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp0n_6lc08_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp0n_6lc08_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp0n_6lc08_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your logic here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp0_ts07vi_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp0_ts07vi_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp0_ts07vi_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp0_ts07vi_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp0_ts07vi_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp0_ts07vi_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp0_ts07vi_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp0_ts07vi_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp0_ts07vi_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp0_ts07vi_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            prime := false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jfrkaj0_test.go:21:13: prime declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073808
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            prime = false\n            break\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i <= length/2; i++ {\n        if myString[i] != myString[i/2] {\n  \
    \          prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpizc0v3un_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpizc0v3un_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpizc0v3un_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpizc0v3un_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpizc0v3un_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpizc0v3un_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpizc0v3un_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpizc0v3un_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpizc0v3un_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpizc0v3un_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    if length == 2 || length == 3 {\n        return true\n    }\n    if length\
    \ == 4 {\n        return true\n    }\n    if length == 5 {\n        return true\n\
    \    }\n    if length == 6 {\n        return true\n    }\n    if length == 7 {\n\
    \        return true\n    }\n    if length == 8 {\n        return true\n    }\n\
    \    if length == 9 {\n        return true\n    }\n    if length == 10 {\n   \
    \     return true\n    }\n    if length == 11 {\n        return true\n    }\n\
    \    if length == 12 {\n        return true\n    }\n    if length == 13 {\n  \
    \      return true\n    }\n    if length == 14 {\n        return true\n    }\n\
    \    if length == 15 {\n        return true\n    }\n    if length == 16 {\n  \
    \      return true\n    }\n    if length == 17 {\n        return true\n    }\n\
    \    if length == 18 {\n        return true\n    }\n    if length == 19 {\n  \
    \      return true\n    }\n    if length == 20 {\n        return true\n    }\n\
    \    if length == 21 {\n        return true\n    }\n    if length == 22 {\n  \
    \      return true\n    }\n    if length == 23 {\n        return true\n    }\n\
    \    if length == 24 {\n        return true\n    }\n    if length == 25 {\n  \
    \      return true\n    }\n    if length == 26 {\n        return true\n    }\n\
    \    if length == 27 {\n        return true\n    }\n    if length == 28 {\n  \
    \      return true\n    }\n    if length == 29 {\n        return true\n    }\n\
    \    if length == 30 {\n        return true\n    }\n    if length == 31 {\n  \
    \      return true\n    }\n    if length == 32 {\n        return true\n    }\n\
    \    if length == 33 {\n        return true\n    }\n    if length == 34 {\n  \
    \      return true\n    }\n    if length == 35 {\n        return true\n    }\n\
    \    if length == 36 {\n        return true\n    }\n    if length == 37 {\n  \
    \      return true\n    }\n    if length == 38 {\n        return true\n    }\n\
    \    if length == 39 {\n        return true\n    }\n    if length == 40 {\n  \
    \      return true\n    }\n    if length == 41 {\n        return true\n    }\n\
    \    if length == 42 {\n        return true\n    }\n    if length == 43 {\n  \
    \      return true\n    }\n    if length == 44 {\n        return true\n    }\n\
    \    if length == 45 {\n        return true\n    }\n    if length == 46 {\n  \
    \      return true\n    }\n    if length == 47 {\n        return true\n    }\n\
    \    if length == 48 {\n        return true\n    }\n    if length == 49 {\n  \
    \      return true\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm6oh63gu_test.go:160:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var prime bool\n    var length int\n    for length = 1; length < len(myString);\
    \ length++ {\n        if myString[length] == myString[0] {\n            prime\
    \ = true\n            break\n        }\n        if myString[length] != myString[0]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp9cftrj5j_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp9cftrj5j_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp9cftrj5j_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp9cftrj5j_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp9cftrj5j_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp9cftrj5j_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp9cftrj5j_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp9cftrj5j_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp9cftrj5j_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp9cftrj5j_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp9cftrj5j_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length+1)\n    primes[0]\
    \ = true\n    for i := 2; i < length; i++ {\n        if primes[i] {\n        \
    \    for j := i*i; j < length; j += i {\n                primes[j] = false\n \
    \           }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your logic here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpklsgavze_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpklsgavze_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpklsgavze_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpklsgavze_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpklsgavze_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpklsgavze_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpklsgavze_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length/2] {\n                if myString[i]\
    \ != myString[length/3] {\n                    if myString[i] != myString[length/4]\
    \ {\n                        if myString[i] != myString[length/5] {\n        \
    \                    if myString[i] != myString[length/6] {\n                \
    \                if myString[i] != myString[length/7] {\n                    \
    \                if myString[i] != myString[length/8] {\n                    \
    \                    if myString[i] != myString[length/9] {\n                \
    \                            if myString[i] != myString[length/10] {\n       \
    \                                         if myString[i] != myString[length/11]\
    \ {\n                                                    if myString[i] != myString[length/12]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/13] {\n                                                    \
    \        if myString[i] != myString[length/14] {\n                           \
    \                                     if myString[i] != myString[length/15] {\n\
    \                                                    if myString[i] != myString[length/16]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/17] {\n                                                    \
    \        if myString[i] != myString[length/18] {\n                           \
    \                                     if myString[i] != myString[length/19] {\n\
    \                                                    if myString[i] != myString[length/20]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/21] {\n                                                    \
    \        if myString[i] != myString[length/22] {\n                           \
    \                                     if myString[i] != myString[length/23] {\n\
    \                                                    if myString[i] != myString[length/24]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/25] {\n                                                    \
    \        if myString[i] != myString[length/26] {\n                           \
    \                                     if myString[i] != myString[length/27] {\n\
    \                                                    if myString[i] != myString[length/28]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/29] {\n                                                    \
    \        if myString[i] != myString[length/30] {\n                           \
    \                                     if myString[i] != myString[length/31] {\n\
    \                                                    if myString[i] != myString[length/32]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/33] {\n                                                    \
    \        if myString[i] != myString[length/34] {\n                           \
    \                                     if myString[i] != myString[length/35] {\n\
    \                                                    if myString\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp21flg9z4_test.go:56:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073810
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length+1)\n    primes[0]\
    \ = true\n    for i := 2; i < length; i++ {\n        if primes[i] {\n        \
    \    for j := i*i; j < length; j += i {\n                primes[j] = false\n \
    \           }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var myInt int\n    var myPrime bool\n    for myInt = 1; myInt <= len(myString);\
    \ myInt++ {\n        myPrime = true\n        for myInt2 = 1; myInt2 <= myInt;\
    \ myInt2++ {\n            if myInt2 != myInt {\n                if myString[myInt2]\
    \ == myString[myInt2+1] {\n                    myPrime = false\n             \
    \   }\n            }\n        }\n        if myPrime {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzkff6dlt_test.go:20:13: undefined: myInt2

    /tmp/tmpzkff6dlt_test.go:21:16: undefined: myInt2

    /tmp/tmpzkff6dlt_test.go:22:29: undefined: myInt2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    primes[0]\
    \ = 2\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            primes[i/2] = primes[i/2] + 1\n        }\n    }\n    for i :=\
    \ 2; i < length; i++ {\n        if primes[i] == length {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000162030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000162030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpf8uf12n7_test.go:18\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpf8uf12n7_test.go:47\
    \ +0x42f\ntesting.tRunner(0xc000103860, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-2*i] {\n                prime\
    \ = false\n                break\n            }\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmplw4zusx3_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmplw4zusx3_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmplw4zusx3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmplw4zusx3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmplw4zusx3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length+1)\n    primes[0]\
    \ = true\n    for i := 2; i < length; i++ {\n        if primes[i] {\n        \
    \    for j := 2; i*j < length; j++ {\n                primes[i*j] = false\n  \
    \          }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpf27lh2xk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpf27lh2xk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpf27lh2xk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpf27lh2xk_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpf27lh2xk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    i := 2\n    for i <= length {\n        if myString[i] != myString[i/2] {\n\
    \            prime = false\n            break\n        }\n        i++\n    }\n\
    \    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpm_dp55q1_test.go:21\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpm_dp55q1_test.go:46\
    \ +0x225\ntesting.tRunner(0xc0001924e0, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp9nvotvm6_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp9nvotvm6_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp9nvotvm6_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp9nvotvm6_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp9nvotvm6_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp9nvotvm6_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp9nvotvm6_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp9nvotvm6_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp9nvotvm6_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp9nvotvm6_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073812
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    if length == 2 || length == 3 {\n        return true\n    }\n    if length\
    \ == 4 {\n        return true\n    }\n    if length == 5 {\n        return true\n\
    \    }\n    if length == 6 {\n        return true\n    }\n    if length == 7 {\n\
    \        return true\n    }\n    if length == 8 {\n        return true\n    }\n\
    \    if length == 9 {\n        return true\n    }\n    if length == 10 {\n   \
    \     return true\n    }\n    if length == 11 {\n        return true\n    }\n\
    \    if length == 12 {\n        return true\n    }\n    if length == 13 {\n  \
    \      return true\n    }\n    if length == 14 {\n        return true\n    }\n\
    \    if length == 15 {\n        return true\n    }\n    if length == 16 {\n  \
    \      return true\n    }\n    if length == 17 {\n        return true\n    }\n\
    \    if length == 18 {\n        return true\n    }\n    if length == 19 {\n  \
    \      return true\n    }\n    if length == 20 {\n        return true\n    }\n\
    \    if length == 21 {\n        return true\n    }\n    if length == 22 {\n  \
    \      return true\n    }\n    if length == 23 {\n        return true\n    }\n\
    \    if length == 24 {\n        return true\n    }\n    if length == 25 {\n  \
    \      return true\n    }\n    if length == 26 {\n        return true\n    }\n\
    \    if length == 27 {\n        return true\n    }\n    if length == 28 {\n  \
    \      return true\n    }\n    if length == 29 {\n        return true\n    }\n\
    \    if length == 30 {\n        return true\n    }\n    if length == 31 {\n  \
    \      return true\n    }\n    if length == 32 {\n        return true\n    }\n\
    \    if length == 33 {\n        return true\n    }\n    if length == 34 {\n  \
    \      return true\n    }\n    if length == 35 {\n        return true\n    }\n\
    \    if length == 36 {\n        return true\n    }\n    if length == 37 {\n  \
    \      return true\n    }\n    if length == 38 {\n        return true\n    }\n\
    \    if length == 39 {\n        return true\n    }\n    if length == 40 {\n  \
    \      return true\n    }\n    if length == 41 {\n        return true\n    }\n\
    \    if length == 42 {\n        return true\n    }\n    if length == 43 {\n  \
    \      return true\n    }\n    if length == 44 {\n        return true\n    }\n\
    \    if length == 45 {\n        return true\n    }\n    if length == 46 {\n  \
    \      return true\n    }\n    if length == 47 {\n        return true\n    }\n\
    \    if length == 48 {\n        return true\n    }\n    if length == 49 {\n  \
    \      return true\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm6oh63gu_test.go:160:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    primes := make([]bool,\
    \ length+1)\n    primes[0] = true\n    for i := 2; i < length; i++ {\n       \
    \ if primes[i] {\n            for j := i*i; j < length; j += i {\n           \
    \     primes[j] = false\n            }\n        }\n    }\n    return primes[length]\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpiqojsmr4_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpiqojsmr4_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpiqojsmr4_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpiqojsmr4_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpiqojsmr4_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpiqojsmr4_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpiqojsmr4_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpiqojsmr4_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpiqojsmr4_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpiqojsmr4_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpiqojsmr4_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073812
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    primes[0]\
    \ = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4]\
    \ = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8]\
    \ = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12]\
    \ = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16]\
    \ = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20]\
    \ = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24]\
    \ = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27] = 107\n   \
    \ primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n    primes[31]\
    \ = 120\n    primes[32] = 124\n    primes[33] = 127\n    primes[34] = 130\n  \
    \  primes[35] = 133\n    primes[36] = 137\n    primes[37] = 139\n    primes[38]\
    \ = 142\n    primes[39] = 145\n    primes[40] = 147\n    primes[41] = 149\n  \
    \  primes[42] = 152\n    primes[43] = 155\n    primes[44] = 157\n    primes[45]\
    \ = 159\n    primes[46] = 162\n    primes[47] = 165\n    primes[48] = 167\n  \
    \  primes[49] = 169\n    primes[50] = 173\n    primes[51] = 177\n    primes[52]\
    \ = 181\n    primes[53] = 191\n    primes[54] = 193\n    primes[55] = 197 // this\
    \ one is not prime\n    primes[56] = 199\n    primes[57] = 201\n    primes[58]\
    \ = 203\n    primes[59] = 205\n    primes[60] = 207\n    primes[61] = 209\n  \
    \  primes[62] = 211\n    primes[63] = 213\n    primes[64] = 215\n    primes[65]\
    \ = 217\n    primes[66] = 219\n    primes[67] = 221\n    primes[68] = 223\n  \
    \  \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu7_sr12v_test.go:88:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i <= length/2; i++ {\n        if myString[length/2-i] == myString[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmppu0tsgp3_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073812
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    primes := make([]int, length)\n    primes[0] = 2\n    for i := 2; i < length;\
    \ i++ {\n        if primes[i-1] == 0 {\n            primes[i] = 0\n        } else\
    \ {\n            primes[i] = primes[i-1]\n        }\n        for j := 2; j < primes[i];\
    \ j++ {\n            if myString[j] != myString[j-1] {\n                primes[i]\
    \ = 0\n                break\n            }\n        }\n    }\n    return primes[length-1]\
    \ == 1\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpzo7wdfnx_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpzo7wdfnx_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpzo7wdfnx_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpzo7wdfnx_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpzo7wdfnx_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpzo7wdfnx_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpzo7wdfnx_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpzo7wdfnx_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpzo7wdfnx_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpzo7wdfnx_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[length-i]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp1nmasc4g_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp1nmasc4g_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp1nmasc4g_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp1nmasc4g_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp1nmasc4g_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp1nmasc4g_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp1nmasc4g_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp1nmasc4g_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp1nmasc4g_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp1nmasc4g_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length)\n    primes[0]\
    \ = true\n    for i := 2; i < length; i++ {\n        if primes[i] {\n        \
    \    for j := i*i; j < length; j += i {\n                primes[j] = false\n \
    \           }\n        }\n    }\n    return primes[length-1]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpazmzgkep_test.go:18\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpazmzgkep_test.go:44\
    \ +0x24f\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] % i == 0 {\n                prime = false\n      \
    \      }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdr2_vu7_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073808
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length+1)\n    primes[0]\
    \ = true\n    for i := 2; i < length; i++ {\n        if primes[i] {\n        \
    \    for j := i*i; j < length; j += i {\n                primes[j] = false\n \
    \           }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[i/2] {\n            prime = false\n            break\n        }\n\
    \    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length+1)\n    primes[0]\
    \ = true\n    for i := 2; i <= length/2; i++ {\n        if primes[i] {\n     \
    \       for j := i*i; j < length; j += i {\n                primes[j] = false\n\
    \            }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpokenrwqm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpokenrwqm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpokenrwqm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpokenrwqm_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpokenrwqm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for\
    \ _, prime := range primes {\n        if length%prime == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpdb9jzy9r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpdb9jzy9r_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpdb9jzy9r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpdb9jzy9r_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpdb9jzy9r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpdb9jzy9r_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpdb9jzy9r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpdb9jzy9r_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpdb9jzy9r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpdb9jzy9r_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpdb9jzy9r_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpdb9jzy9r_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primesLength\
    \ := len(primes)\n    i := 0\n    for i < primesLength {\n        if length%primes[i]\
    \ == 0 {\n            i++\n        } else {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpkdcfefyf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpkdcfefyf_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpkdcfefyf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpkdcfefyf_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpkdcfefyf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkdcfefyf_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpkdcfefyf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpkdcfefyf_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpkdcfefyf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpkdcfefyf_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpkdcfefyf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    \n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpcn70auo9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpcn70auo9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpcn70auo9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpcn70auo9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpcn70auo9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpcn70auo9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpcn70auo9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpcn70auo9_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpcn70auo9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i <= length/2;\
    \ i++ {\n        if myString[i] != myString[length-i] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    primes := make([]bool, length+1)\n    primes[0] = true\n    for i := 2; i\
    \ < length; i++ {\n        if primes[i] {\n            for j := i*i; j < length;\
    \ j += i {\n                primes[j] = false\n            }\n        }\n    }\n\
    \    return primes[length]\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpe34t11gl_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpe34t11gl_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpe34t11gl_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpe34t11gl_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpe34t11gl_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpe34t11gl_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpe34t11gl_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpe34t11gl_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpe34t11gl_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpe34t11gl_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    primes := make([]bool,\
    \ length+1)\n    primes[0] = true\n    for i := 2; i <= length/2; i++ {\n    \
    \    if primes[i] {\n            for j := i*i; j < length; j += i {\n        \
    \        primes[j] = false\n            }\n        }\n    }\n    for i := 0; i\
    \ < length; i++ {\n        if primes[i] {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpn0097blo_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpn0097blo_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpn0097blo_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpn0097blo_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpn0097blo_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i == 0 {\n                prime = false\n  \
    \          }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp93h2oy63_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    primes := make([]bool, length+1)\n    primes[0] = true\n    primes[1] = false\n\
    \    for i := 2; i < length; i++ {\n        if primes[i] {\n            for j\
    \ := 2; i*j < length; j++ {\n                primes[i*j] = false\n           \
    \ }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpxb1dvhqz_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpxb1dvhqz_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpxb1dvhqz_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpxb1dvhqz_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpxb1dvhqz_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpxb1dvhqz_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpxb1dvhqz_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpxb1dvhqz_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpxb1dvhqz_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpxb1dvhqz_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length+1)\n    primes[0]\
    \ = true\n    for i := 2; i < length; i++ {\n        if primes[i] {\n        \
    \    for j := 2; i*j <= length; j++ {\n                primes[i*j] = false\n \
    \           }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpeur5feft_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpeur5feft_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpeur5feft_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpeur5feft_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpeur5feft_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpeur5feft_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpeur5feft_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpeur5feft_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpeur5feft_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpeur5feft_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpeur5feft_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ % i == 0 {\n                prime = false\n            }\n        }\n    }\n\
    \    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhufmbji_test.go:20:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i <= length/2; i++ {\n        if myString[i] != myString[length-i] {\n\
    \            prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpx4n0me_x_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpx4n0me_x_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpx4n0me_x_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpx4n0me_x_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpx4n0me_x_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpx4n0me_x_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpx4n0me_x_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpx4n0me_x_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpx4n0me_x_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpx4n0me_x_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    primes := make([]bool, length+1)\n    primes[0] = true\n    for i := 2; i\
    \ < length; i++ {\n        if primes[i] {\n            for j := 2; i*j < length;\
    \ j++ {\n                primes[i*j] = false\n            }\n        }\n    }\n\
    \    return primes[length]\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    \n\
    \    for i := 2; i < length/2; i++ {\n        if myString[i] != myString[length-i-1]\
    \ {\n            prime = false\n            break\n        }\n    }\n    \n  \
    \  return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpxkwt8lvx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpxkwt8lvx_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpxkwt8lvx_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpxkwt8lvx_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpxkwt8lvx_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpxkwt8lvx_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var primes []int\n    var length int\n    var i int\n    for i = 0; i < len(myString);\
    \ i++ {\n        length = length + 1\n    }\n    for i = 0; i < length-1; i++\
    \ {\n        if myString[i] == 'a' {\n            primes = append(primes, 0)\n\
    \        }\n    }\n    for i = 0; i < length-1; i++ {\n        if myString[i]\
    \ == 'b' {\n            primes = append(primes, 1)\n        }\n    }\n    for\
    \ i = 0; i < length-1; i++ {\n        if myString[i] == 'c' {\n            primes\
    \ = append(primes, 2)\n        }\n    }\n    for i = 0; i < length-1; i++ {\n\
    \        if myString[i] == 'd' {\n            primes = append(primes, 3)\n   \
    \     }\n    }\n    for i = 0; i < length-1; i++ {\n        if myString[i] ==\
    \ 'e' {\n            primes = append(primes, 4)\n        }\n    }\n    for i =\
    \ 0; i < length-1; i++ {\n        if myString[i] == 'f' {\n            primes\
    \ = append(primes, 5)\n        }\n    }\n    for i = 0; i < length-1; i++ {\n\
    \        if myString[i] == 'g' {\n            primes = append(primes, 6)\n   \
    \     }\n    }\n    for i = 0; i < length-1; i++ {\n        if myString[i] ==\
    \ 'h' {\n            primes = append(primes, 7)\n        }\n    }\n    for i =\
    \ 0; i < length-1; i++ {\n        if myString[i] == 'i' {\n            primes\
    \ = append(primes, 8)\n        }\n    }\n    for i = 0; i < length-1; i++ {\n\
    \        if myString[i] == 'j' {\n            primes = append(primes, 9)\n   \
    \     }\n    }\n    for i = 0; i < length-1; i++ {\n        if myString[i] ==\
    \ 'k' {\n            primes = append(primes, 10)\n        }\n    }\n    for i\
    \ = 0; i < length-1; i++ {\n        if myString[i] == 'l' {\n            primes\
    \ = append(primes, 11)\n        }\n    }\n    for i = 0; i < length-1; i++ {\n\
    \        if myString[i] == 'm' {\n            primes = append(primes, 12)\n  \
    \      }\n    }\n    for i = 0; i < length-1; i++ {\n        if myString[i] ==\
    \ 'n' {\n            primes = append(primes, 13)\n        }\n    }\n    for i\
    \ = 0; i < length-1; i++ {\n        if myString[i] == 'o' {\n            primes\
    \ = append(primes, 14)\n        }\n    }\n    for i = 0; i < length-1; i++ {\n\
    \        if myString[i] == 'p' {\n            primes = append(primes, 15)\n  \
    \      }\n    }\n    for i = 0; i < length-1; i++ {\n        if myString[i] ==\
    \ 'q' {\n            \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9qkxg5_5_test.go:105:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073812
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    primes := make([]bool, length+1)\n    primes[0] = true\n    for i := 2; i\
    \ < length; i++ {\n        if primes[i] {\n            for j := i*i; j < length;\
    \ j += i {\n                primes[j] = false\n            }\n        }\n    }\n\
    \    return primes[length-1]\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmph0d07jwm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmph0d07jwm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmph0d07jwm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmph0d07jwm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmph0d07jwm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmph0d07jwm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmph0d07jwm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmph0d07jwm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmph0d07jwm_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmph0d07jwm_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] != myString[length/2+i] {\n                prime =\
    \ false\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpodtz9gm3_test.go:21\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpodtz9gm3_test.go:48\
    \ +0x776\ntesting.tRunner(0xc0001a0340, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ % i != 0 {\n                prime = false\n            }\n        }\n    }\n\
    \    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzasv2o96_test.go:20:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073813
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] % i == 0 {\n                prime = false\n      \
    \      }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdr2_vu7_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073808
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[i/2] {\n            prime = false\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    primes[0]\
    \ = 2\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            primes[i] = 0\n        } else {\n            primes[i] = primes[i-1]\
    \ + 1\n        }\n    }\n    for i := 0; i < length; i++ {\n        if primes[i]\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmps5jxxxcq_test.go:18\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmps5jxxxcq_test.go:49\
    \ +0x4af\ntesting.tRunner(0xc000103520, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073815
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-2*i] {\n                prime\
    \ = false\n                break\n            }\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmplw4zusx3_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmplw4zusx3_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmplw4zusx3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmplw4zusx3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmplw4zusx3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmplw4zusx3_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[i/2] {\n            prime = false\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] % i != 0 {\n                prime = false\n      \
    \      }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcoai2umi_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    if length < 2 {\n   \
    \     return false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[i/2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp6224e4t2_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp6224e4t2_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp6224e4t2_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp6224e4t2_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp6224e4t2_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp6224e4t2_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp6224e4t2_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp6224e4t2_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp6224e4t2_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073815
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var prime bool\n    var i int\n    var j int\n    var k int\n    for i =\
    \ 2; i < len(myString); i++ {\n        for j = i + i; j < len(myString); j++ {\n\
    \            if myString[j] != 'a' {\n                break\n            }\n \
    \       }\n        if j == len(myString) {\n            prime = true\n       \
    \     break\n        }\n        for k = j + 1; k < len(myString); k++ {\n    \
    \        if myString[k] != 'a' {\n                break\n            }\n     \
    \   }\n        if k == len(myString) {\n            prime = true\n           \
    \ break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp1av6dy7k_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp1av6dy7k_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp1av6dy7k_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp1av6dy7k_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp1av6dy7k_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp1av6dy7k_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp1av6dy7k_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073815
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    i := 2\n    for i < length {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i == 0 {\n                prime = false\n  \
    \          }\n        }\n        i++\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppqna9jba_test.go:22:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073815
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i-1] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i <= length/2;\
    \ i++ {\n        if myString[i] != myString[length-i] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmptkabdjru_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmptkabdjru_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n                break\n            }\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp3nw6dq6a_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp3nw6dq6a_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp3nw6dq6a_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp3nw6dq6a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp3nw6dq6a_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp3nw6dq6a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp3nw6dq6a_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] != myString[length-2-i] {\n                if myString[i]\
    \ != myString[length-3*i] {\n                    prime = false\n             \
    \   }\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpw9tlbcfo_test.go:22\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpw9tlbcfo_test.go:38\
    \ +0xaa6\ntesting.tRunner(0xc000192680, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    primes[0]\
    \ = 2\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            primes[i] = 0\n        } else {\n            primes[i] = 1\n\
    \        }\n    }\n    for i := 2; i < length; i++ {\n        if primes[i] ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpy1g314t9_test.go:18\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpy1g314t9_test.go:49\
    \ +0x4a5\ntesting.tRunner(0xc0001924e0, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] != myString[length-i] {\n                prime = false\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp6gguyzr8_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp6gguyzr8_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp6gguyzr8_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp6gguyzr8_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp6gguyzr8_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp6gguyzr8_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp6gguyzr8_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp6gguyzr8_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp6gguyzr8_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp6gguyzr8_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i <= length;\
    \ i++ {\n        if myString[i] != myString[length] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpt8j46g4q_test.go:19\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpt8j46g4q_test.go:34\
    \ +0x1b\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i-1] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    if length == 2 || length == 3 {\n        return true\n    }\n    if length\
    \ == 4 {\n        return true\n    }\n    if length == 5 {\n        return true\n\
    \    }\n    if length == 6 {\n        return true\n    }\n    if length == 7 {\n\
    \        return true\n    }\n    if length == 8 {\n        return true\n    }\n\
    \    if length == 9 {\n        return true\n    }\n    if length == 10 {\n   \
    \     return true\n    }\n    if length == 11 {\n        return true\n    }\n\
    \    if length == 12 {\n        return true\n    }\n    if length == 13 {\n  \
    \      return true\n    }\n    if length == 14 {\n        return true\n    }\n\
    \    if length == 15 {\n        return true\n    }\n    if length == 16 {\n  \
    \      return true\n    }\n    if length == 17 {\n        return true\n    }\n\
    \    if length == 18 {\n        return true\n    }\n    if length == 19 {\n  \
    \      return true\n    }\n    if length == 20 {\n        return true\n    }\n\
    \    if length == 21 {\n        return true\n    }\n    if length == 22 {\n  \
    \      return true\n    }\n    if length == 23 {\n        return true\n    }\n\
    \    if length == 24 {\n        return true\n    }\n    if length == 25 {\n  \
    \      return true\n    }\n    if length == 26 {\n        return true\n    }\n\
    \    if length == 27 {\n        return true\n    }\n    if length == 28 {\n  \
    \      return true\n    }\n    if length == 29 {\n        return true\n    }\n\
    \    if length == 30 {\n        return true\n    }\n    if length == 31 {\n  \
    \      return true\n    }\n    if length == 32 {\n        return true\n    }\n\
    \    if length == 33 {\n        return true\n    }\n    if length == 34 {\n  \
    \      return true\n    }\n    if length == 35 {\n        return true\n    }\n\
    \    if length == 36 {\n        return true\n    }\n    if length == 37 {\n  \
    \      return true\n    }\n    if length == 38 {\n        return true\n    }\n\
    \    if length == 39 {\n        return true\n    }\n    if length == 40 {\n  \
    \      return true\n    }\n    if length == 41 {\n        return true\n    }\n\
    \    if length == 42 {\n        return true\n    }\n    if length == 43 {\n  \
    \      return true\n    }\n    if length == 44 {\n        return true\n    }\n\
    \    if length == 45 {\n        return true\n    }\n    if length == 46 {\n  \
    \      return true\n    }\n    if length == 47 {\n        return true\n    }\n\
    \    if length == 48 {\n        return true\n    }\n    if length == 49 {\n  \
    \      return true\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm6oh63gu_test.go:160:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    for i :=\
    \ 0; i < length; i++ {\n        primes[i] = 1\n    }\n    for i := 2; i < length;\
    \ i++ {\n        if primes[i] == 0 {\n            for j := 0; j < i; j++ {\n \
    \               if myString[j] != 'a' {\n                    primes[i] += 1\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    for i := 0; i < length; i++ {\n        if primes[i] == length {\n       \
    \     return true\n        }\n    }\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7apq39jr_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7apq39jr_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7apq39jr_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7apq39jr_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7apq39jr_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7apq39jr_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7apq39jr_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7apq39jr_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7apq39jr_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7apq39jr_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp7apq39jr_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp7apq39jr_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i-1] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    if length == 2 || length == 3 {\n        return true\n    }\n    if length\
    \ == 4 {\n        return true\n    }\n    if length == 5 || length == 6 {\n  \
    \      return true\n    }\n    if length == 7 || length == 8 {\n        return\
    \ true\n    }\n    if length == 9 || length == 10 {\n        return true\n   \
    \ }\n    if length == 11 || length == 12 {\n        return true\n    }\n    if\
    \ length == 13 || length == 14 {\n        return true\n    }\n    if length ==\
    \ 15 || length == 16 {\n        return true\n    }\n    if length == 17 || length\
    \ == 18 {\n        return true\n    }\n    if length == 19 || length == 20 {\n\
    \        return true\n    }\n    if length == 21 || length == 22 {\n        return\
    \ true\n    }\n    if length == 23 || length == 24 {\n        return true\n  \
    \  }\n    if length == 25 || length == 26 {\n        return true\n    }\n    if\
    \ length == 27 || length == 28 {\n        return true\n    }\n    if length ==\
    \ 29 || length == 30 {\n        return true\n    }\n    if length == 31 || length\
    \ == 32 {\n        return true\n    }\n    if length == 33 || length == 34 {\n\
    \        return true\n    }\n    if length == 35 || length == 36 {\n        return\
    \ true\n    }\n    if length == 37 || length == 38 {\n        return true\n  \
    \  }\n    if length == 39 || length == 40 {\n        return true\n    }\n    if\
    \ length == 41 || length == 42 {\n        return true\n    }\n    if length ==\
    \ 43 || length == 44 {\n        return true\n    }\n    if length == 45 || length\
    \ == 46 {\n        return true\n    }\n    if length == 47 || length == 48 {\n\
    \        return true\n    }\n    if length == 49 || length == 50 {\n        return\
    \ true\n    }\n    if length == 51 || length == 52 {\n        return true\n  \
    \  }\n    if length == 53 || length == 54 {\n        return true\n    }\n    if\
    \ length == 55 || length == 56 {\n        return true\n    }\n    if length ==\
    \ 57 || length == 58 {\n        return true\n    }\n    if length == 59 || length\
    \ == 60 {\n        return true\n    }\n    if length == 61 || length == 62 {\n\
    \        return true\n    }\n    if length == 63 || length == 64 {\n        return\
    \ true\n    }\n    if length == 65 || length == 66 {\n        return true\n  \
    \  }\n    if length == 67 || length == 68 {\n        return true\n    }\n    if\
    \ length == 69 || length == 70 {\n        return true\n    }\n    if \nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpofkvr_bm_test.go:126:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073815
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] % i != 0 {\n                prime = false\n      \
    \      }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcoai2umi_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    primes := make([]bool, length+1)\n    primes[0] = true\n    for i := 2; i\
    \ < length; i++ {\n        if primes[i] {\n            for j := 2; i*j < length;\
    \ j++ {\n                primes[i*j] = false\n            }\n        }\n    }\n\
    \    return primes[length]\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpfbe7khxu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpfbe7khxu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    if length == 2 || length == 3 {\n        return true\n    }\n    if length\
    \ == 4 {\n        return true\n    }\n    if length == 5 {\n        return true\n\
    \    }\n    if length == 6 {\n        return true\n    }\n    if length == 7 {\n\
    \        return true\n    }\n    if length == 8 {\n        return true\n    }\n\
    \    if length == 9 {\n        return true\n    }\n    if length == 10 {\n   \
    \     return true\n    }\n    if length == 11 {\n        return true\n    }\n\
    \    if length == 12 {\n        return true\n    }\n    if length == 13 {\n  \
    \      return true\n    }\n    if length == 14 {\n        return true\n    }\n\
    \    if length == 15 {\n        return true\n    }\n    if length == 16 {\n  \
    \      return true\n    }\n    if length == 17 {\n        return true\n    }\n\
    \    if length == 18 {\n        return true\n    }\n    if length == 19 {\n  \
    \      return true\n    }\n    if length == 20 {\n        return true\n    }\n\
    \    if length == 21 {\n        return true\n    }\n    if length == 22 {\n  \
    \      return true\n    }\n    if length == 100 {\n        return true\n    }\n\
    \    if length == 200 {\n        return true\n    }\n    if length == 300 {\n\
    \        return true\n    }\n    if length == 400 {\n        return true\n   \
    \ }\n    if length == 500 {\n        return true\n    }\n    if length == 600\
    \ {\n        return true\n    }\n    if length == 700 {\n        return true\n\
    \    }\n    if length == 800 {\n        return true\n    }\n    if length == 900\
    \ {\n        return true\n    }\n    if length == 1000 {\n        return true\n\
    \    }\n    if length == 10000 {\n        return true\n    }\n    if length ==\
    \ 100000 {\n        return true\n    }\n    if length == 1000000 {\n        return\
    \ true\n    }\n    if length == 10000000 {\n        return true\n    }\n    if\
    \ length == 100000000 {\n        return true\n    }\n    if length == 1000000000\
    \ {\n        return true\n    }\n    if length == 10000000000 {\n        return\
    \ true\n    }\n    if length == 100000000000 {\n        return true\n    }\n \
    \   if length == 1000000000000 {\n        return true\n    }\n    if length ==\
    \ 10000000000000 {\n        return true\n    }\n    if length == 100000000000000\
    \ {\n        return true\n    }\n    if length == 1000000000000000 {\n       \
    \ return true\n    }\n    if length == 10000000000000000 {\n        return true\n\
    \    }\n    if length == 100000000000000000 {\n        return true\n    }\n  \
    \  if length == \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu_02p085_test.go:153:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073815
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i <= length; i++ {\n        if myString[length-1] == 'a' {\n\
    \            return false\n        }\n        if myString[length-1] == 'b' {\n\
    \            return false\n        }\n        if myString[length-1] == 'c' {\n\
    \            return false\n        }\n        if myString[length-1] == 'd' {\n\
    \            return false\n        }\n        if myString[length-1] == 'e' {\n\
    \            return false\n        }\n        if myString[length-1] == 'f' {\n\
    \            return false\n        }\n        if myString[length-1] == 'g' {\n\
    \            return false\n        }\n        if myString[length-1] == 'h' {\n\
    \            return false\n        }\n        if myString[length-1] == 'i' {\n\
    \            return false\n        }\n        if myString[length-1] == 'j' {\n\
    \            return false\n        }\n        if myString[length-1] == 'k' {\n\
    \            return false\n        }\n        if myString[length-1] == 'l' {\n\
    \            return false\n        }\n        if myString[length-1] == 'm' {\n\
    \            return false\n        }\n        if myString[length-1] == 'n' {\n\
    \            return false\n        }\n        if myString[length-1] == 'o' {\n\
    \            return false\n        }\n        if myString[length-1] == 'p' {\n\
    \            return false\n        }\n        if myString[length-1] == 'q' {\n\
    \            return false\n        }\n        if myString[length-1] == 'r' {\n\
    \            return false\n        }\n        if myString[length-1] == 's' {\n\
    \            return false\n        }\n        if myString[length-1] == 't' {\n\
    \            return false\n        }\n        if myString[length-1] == 'u' {\n\
    \            return false\n        }\n        if myString[length-1] == 'v' {\n\
    \            return false\n        }\n        if myString[length-1] == 'w' {\n\
    \            return false\n        }\n        if myString[length-1] == 'x' {\n\
    \            return false\n        }\n        if myString[length-1] == 'y' {\n\
    \            return false\n        }\n        if myString[length-1] == 'z' {\n\
    \            return false\n        }\n        if myString[length-1] == 'A' {\n\
    \            return false\n        }\n        if myString[length-1] == 'B' {\n\
    \            return false\n        }\n        if myString[length-1] == 'C' {\n\
    \            return false\n        }\n        if myString[length-1] == 'D' {\n\
    \            return false\n        }\n        if myString[length-1] == '\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1q2huqw1_test.go:111:34: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073815
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length/2+i] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpqhh_zw2c_test.go:20\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpqhh_zw2c_test.go:47\
    \ +0x776\ntesting.tRunner(0xc0001a0340, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp388vgi4k_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp388vgi4k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[i/2] {\n            prime = false\n            break\n        }\n\
    \    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var counter int\n    for i := 0; i < len(myString); i++ {\n        if myString[i]\
    \ == 'a' || myString[i] == 'e' || myString[i] == 'i' || myString[i] == 'o' ||\
    \ myString[i] == 'u' {\n            counter++\n        }\n    }\n    if counter\
    \ == 2 {\n        return true\n    }\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__4\
    \ (0.00s)\n        tmpocm801j7_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpocm801j7_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpocm801j7_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpocm801j7_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpocm801j7_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpocm801j7_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i == 0 {\n                prime = false\n  \
    \          }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp93h2oy63_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073813
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ % i == 0 {\n                prime = false\n            }\n        }\n    }\n\
    \    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhufmbji_test.go:20:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073813
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var myInt int\n    var myBool bool\n    for myInt = 2; myInt <= len(myString);\
    \ myInt++ {\n        if myString[myInt] == \"0\" {\n            continue\n   \
    \     }\n        for myInt2 = 2; myInt2 <= len(myString); myInt2++ {\n       \
    \     if myString[myInt2] == \"0\" {\n                continue\n            }\n\
    \            if myString[myInt2] == myString[myInt] {\n                if myInt\
    \ != myInt2 {\n                    return false\n                }\n         \
    \   }\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3aph6lm_test.go:17:9: myBool declared but not used

    /tmp/tmpp3aph6lm_test.go:19:31: invalid operation: myString[myInt] == "0" (mismatched
    types byte and untyped string)

    /tmp/tmpp3aph6lm_test.go:22:13: undefined: myInt2

    /tmp/tmpp3aph6lm_test.go:23:25: undefined: myInt2

    /tmp/tmpp3aph6lm_test.go:23:36: invalid operation: myString[myInt2] == "0" (mismatched
    types byte and untyped string)

    /tmp/tmpp3aph6lm_test.go:26:25: undefined: myInt2

    /tmp/tmpp3aph6lm_test.go:27:29: undefined: myInt2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    primes[0]\
    \ = 2\n    for i := 1; i < length; i++ {\n        if myString[i] > 0 {\n     \
    \       primes[i] = (primes[i-1] * primes[i-1]) % length\n        }\n    }\n \
    \   return primes[length-1] == 1\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpq0vgr3w0_test.go:18\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpq0vgr3w0_test.go:42\
    \ +0x42f\ntesting.tRunner(0xc0001a0340, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-2-i] {\n                if\
    \ myString[i] != myString[length-3*i] {\n                    if myString[i] !=\
    \ myString[length-4*i] {\n                        if myString[i] != myString[length-5*i]\
    \ {\n                            if myString[i] != myString[length-6*i] {\n  \
    \                              if myString[i] != myString[length-7*i] {\n    \
    \                                if myString[i] != myString[length-8*i] {\n  \
    \                                      if myString[i] != myString[length-9*i]\
    \ {\n                                            if myString[i] != myString[length-10*i]\
    \ {\n                                                if myString[i] != myString[length-11*i]\
    \ {\n                                                    if myString[i] != myString[length-12*i]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length-13*i] {\n                                                  \
    \          if myString[i] != myString[length-14*i] {\n                       \
    \                                         if myString[i] != myString[length-15*i]\
    \ {\n                                                    if myString[i] != myString[length-16*i]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length-17*i] {\n                                                  \
    \          if myString[i] != myString[length-18*i] {\n                       \
    \                                         if myString[i] != myString[length-19*i]\
    \ {\n                                                    if myString[i] != myString[length-20*i]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length-21*i] {\n                                                  \
    \          if myString[i] != myString[length-22*i] {\n                       \
    \                                         if myString[i] != myString[length-23*i]\
    \ {\n                                                    if myString[i] != myString[length-24*i]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length-25*i] {\n                                                  \
    \          if myString[i] != myString[length-26*i] {\n                       \
    \                                         if myString[i] != myString[length-27*i]\
    \ {\n                                                    if myString[i] != myString[length-28*i]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length-29*i] {\n                                                  \
    \          if myString[i] != myString[length-30*i] {\n                       \
    \                                         if myString[i] != myString[length-31*i]\
    \ {\n                                                    if myString[i] != myString[length-32*i]\
    \ {\n                                                        if myString[i] !=\
    \ \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbzs3ca77_test.go:53:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073815
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    i\
    \ := 2\n    for i < length {\n        if myString[i] != myString[i-1] {\n    \
    \        if myString[i] % i == 0 {\n                prime = false\n          \
    \      break\n            }\n        }\n        i++\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmoj2iv08_test.go:22:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    primes[0]\
    \ = 2\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            primes[i] = 0\n        } else {\n            primes[i] = primes[i-1]\
    \ + 1\n        }\n    }\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpmwvtofrd_test.go:18\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpmwvtofrd_test.go:49\
    \ +0x4af\ntesting.tRunner(0xc0001a0340, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    for i :=\
    \ 0; i < length; i++ {\n        primes[i] = 1\n    }\n    for i := 2; i < length;\
    \ i++ {\n        if primes[i] == 0 {\n            for j := 2; j < i; j++ {\n \
    \               if myString[j] % i == 0 {\n                    primes[i] = 0\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return primes[length-1] == 1\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6jlld1x_test.go:24:20: invalid operation: myString[j] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] != myString[length-i-1] {\n                prime =\
    \ false\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptmsn7rgx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmptmsn7rgx_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptmsn7rgx_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmptmsn7rgx_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmptmsn7rgx_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmptmsn7rgx_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmptmsn7rgx_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-2*i] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpnbsymza5_test.go:21\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpnbsymza5_test.go:36\
    \ +0x8df\ntesting.tRunner(0xc0001a01a0, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073817
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length+1)\n    primes[0]\
    \ = true\n    for i := 2; i < length; i++ {\n        if primes[i] {\n        \
    \    for j := 2; i*j < length; j++ {\n                primes[i*j] = false\n  \
    \          }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpf27lh2xk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpf27lh2xk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpf27lh2xk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpf27lh2xk_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpf27lh2xk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpf27lh2xk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your logic here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i != 0 {\n                prime = false\n  \
    \          }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps7ffi7f4_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073816
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ % i == 0 {\n                prime = false\n            }\n        }\n    }\n\
    \    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhufmbji_test.go:20:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073813
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    \n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i != 0 {\n                prime = false\n  \
    \          }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5oawl498_test.go:22:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i-1] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq2q9l3pf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpq2q9l3pf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073815
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    \n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i != 0 {\n                prime = false\n  \
    \          }\n        }\n    }\n    \n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfabbjgbf_test.go:22:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073817
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[i/2] {\n            prime = false\n            break\n        }\n\
    \    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpi9c20ljc_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpi9c20ljc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] % i == 0 {\n                prime = false\n      \
    \          break\n            }\n        }\n    }\n    return prime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw8s9yhaq_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073817
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    primes := make([]int, length)\n    primes[0] = 2\n    for i := 2; i < length;\
    \ i++ {\n        if primes[i] != 0 {\n            continue\n        }\n      \
    \  for j := 2; j < i; j++ {\n            if i*j > length {\n                break\n\
    \            }\n            if myString[i*j] == myString[j] {\n              \
    \  primes[i] = 0\n                break\n            }\n        }\n    }\n   \
    \ return primes[length-1] == 0\n}\n\nfunc TestPrime_Length(t *testing.T) {\n \
    \ candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range\
    \ [6] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length({0x51e7e6, 0x6})\n\t/tmp/tmp61o00ifn_test.go:30\
    \ +0xcf\ncommand-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp61o00ifn_test.go:49\
    \ +0xaa\ntesting.tRunner(0xc0001a01a0, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length/2]{\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpz3agmg6y_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpz3agmg6y_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpz3agmg6y_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpz3agmg6y_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpz3agmg6y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpz3agmg6y_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpz3agmg6y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpz3agmg6y_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpz3agmg6y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpz3agmg6y_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var primes []int\n    var i int\n    for i = 0; i <= len(myString); i++ {\n\
    \        if myString[i] > 0 {\n            primes = append(primes, i)\n      \
    \  }\n    }\n    for _, prime := range primes {\n        if myString[prime-1]\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpe1vs24x4_test.go:19\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpe1vs24x4_test.go:38\
    \ +0x646\ntesting.tRunner(0xc0001924e0, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpb3oe_txf_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpb3oe_txf_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpb3oe_txf_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpb3oe_txf_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpb3oe_txf_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpb3oe_txf_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpb3oe_txf_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073818
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ % i == 0 {\n                prime = false\n            }\n        }\n    }\n\
    \    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhufmbji_test.go:20:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    if length == 2 || length == 3 {\n        return true\n    }\n    i := 2\n\
    \    j := 2\n    for i < length {\n        if myString[i] == 'a' || myString[i]\
    \ == 'e' || myString[i] == 'i' || myString[i] == 'o' || myString[i] == 'u' {\n\
    \            return false\n        }\n        if myString[i] == 'b' || myString[i]\
    \ == 'c' || myString[i] == 'd' || myString[i] == 'f' || myString[i] == 'g' ||\
    \ myString[i] == 'h' || myString[i] == 'j' || myString[i] == 'k' || myString[i]\
    \ == 'l' || myString[i] == 'm' || myString[i] == 'n' || myString[i] == 'p' ||\
    \ myString[i] == 'q' || myString[i] == 'r' || myString[i] == 's' || myString[i]\
    \ == 't' || myString[i] == 'v' || myString[i] == 'w' || myString[i] == 'x' ||\
    \ myString[i] == 'y' || myString[i] == 'z' {\n            return false\n     \
    \   }\n        if myString[i] == 'A' || myString[i] == 'E' || myString[i] == 'I'\
    \ || myString[i] == 'O' || myString[i] == 'U' {\n            return false\n  \
    \      }\n        if myString[i] == 'B' || myString[i] == 'C' || myString[i] ==\
    \ 'D' || myString[i] == 'F' || myString[i] == 'G' || myString[i] == 'H' || myString[i]\
    \ == 'J' || myString[i] == 'K' || myString[i] == 'L' || myString[i] == 'M' ||\
    \ myString[i] == 'N' || myString[i] == 'P' || myString[i] == 'Q' || myString[i]\
    \ == 'R' || myString[i] == 'S' || myString[i] == 'T' || myString[i] == 'V' ||\
    \ myString[i] == 'W' || myString[i] == 'X' || myString[i] == 'Y' || myString[i]\
    \ == 'Z' {\n            return false\n        }\n        if myString[i] == '0'\
    \ {\n            return false\n        }\n        if myString[i] == '1' {\n  \
    \          return false\n        }\n        if myString[i] == '2' {\n        \
    \    return false\n        }\n        if myString[i] == '3' {\n            return\
    \ false\n        }\n        if myString[i] == '4' {\n            return false\n\
    \        }\n        if myString[i] == '5' {\n            return false\n      \
    \  }\n        if myString[i] == '6' {\n            return false\n        }\n \
    \       if myString[i] == '7' {\n            return false\n        }\n       \
    \ if myString[i] == '8' {\n            return false\n        }\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5nzvja2u_test.go:65:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073817
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] % i != 0 {\n                prime = false\n      \
    \          break\n            }\n        }\n    }\n    return prime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp27bwjubl_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length+1)\n    primes[0]\
    \ = true\n    for i := 2; i <= length/2; i++ {\n        if primes[i] {\n     \
    \       for j := i*i; j < length; j += i {\n                primes[j] = false\n\
    \            }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpokenrwqm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpokenrwqm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpokenrwqm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpokenrwqm_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpokenrwqm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpokenrwqm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your logic here\n    length := len(myString)\n    if length < 2\
    \ {\n        return false\n    }\n    if length == 2 {\n        return true\n\
    \    }\n    if length == 3 {\n        return true\n    }\n    if length == 4 {\n\
    \        return true\n    }\n    if length == 5 {\n        return true\n    }\n\
    \    if length == 6 {\n        return true\n    }\n    if length == 7 {\n    \
    \    return true\n    }\n    if length == 8 {\n        return true\n    }\n  \
    \  if length == 9 {\n        return true\n    }\n    if length == 10 {\n     \
    \   return true\n    }\n    if length == 11 {\n        return true\n    }\n  \
    \  if length == 12 {\n        return true\n    }\n    if length == 13 {\n    \
    \    return true\n    }\n    if length == 14 {\n        return true\n    }\n \
    \   if length == 15 {\n        return true\n    }\n    if length == 16 {\n   \
    \     return true\n    }\n    if length == 17 {\n        return true\n    }\n\
    \    if length == 18 {\n        return true\n    }\n    if length == 19 {\n  \
    \      return true\n    }\n    if length == 20 {\n        return true\n    }\n\
    \    if length == 21 {\n        return true\n    }\n    if length == 22 {\n  \
    \      return true\n    }\n    if length == 23 {\n        return true\n    }\n\
    \    if length == 24 {\n        return true\n    }\n    if length == 25 {\n  \
    \      return true\n    }\n    if length == 26 {\n        return true\n    }\n\
    \    if length == 27 {\n        return true\n    }\n    if length == 28 {\n  \
    \      return true\n    }\n    if length == 29 {\n        return true\n    }\n\
    \    if length == 30 {\n        return true\n    }\n    if length == 31 {\n  \
    \      return true\n    }\n    if length == 32 {\n        return true\n    }\n\
    \    if length == 33 {\n        return true\n    }\n    if length == 34 {\n  \
    \      return true\n    }\n    if length == 35 {\n        return true\n    }\n\
    \    if length == 36 {\n        return true\n    }\n    if length == 37 {\n  \
    \      return true\n    }\n    if length == 38 {\n        return true\n    }\n\
    \    if length == 39 {\n        return true\n    }\n    if length == 40 {\n  \
    \      return true\n    }\n    if length == 41 {\n        return true\n    }\n\
    \    if length == 42 {\n        return true\n    }\n    if length == 43 {\n  \
    \      return true\n    }\n    if length == 44 {\n        return true\n    }\n\
    \    if length == 45 {\n        return true\n    }\n    if length == 46 {\n  \
    \      return true\n    }\n    if length == 47 {\n        return true\n    }\n\
    \    if length == 48 {\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4o83006q_test.go:161:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073817
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] != myString[length-i-1] {\n                prime =\
    \ false\n            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp0n_6lc08_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp0n_6lc08_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp0n_6lc08_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp0n_6lc08_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp0n_6lc08_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp0n_6lc08_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp0n_6lc08_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your function here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpf085rpdg_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpf085rpdg_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpf085rpdg_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpf085rpdg_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpf085rpdg_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpf085rpdg_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpf085rpdg_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpf085rpdg_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpf085rpdg_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpf085rpdg_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpf085rpdg_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpf085rpdg_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    \n    for i := 2; i < length;\
    \ i++ {\n        if myString[i] != myString[length-1] {\n            prime = false\n\
    \            break\n        }\n    }\n    \n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpvrlqjggs_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpvrlqjggs_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpvrlqjggs_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpvrlqjggs_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpvrlqjggs_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpvrlqjggs_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpvrlqjggs_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpvrlqjggs_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpvrlqjggs_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpvrlqjggs_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    primes := make([]bool,\
    \ length+1)\n    primes[0] = true\n    for i := 2; i < length; i++ {\n       \
    \ if primes[i] {\n            for j := i*i; j < length; j += i {\n           \
    \     primes[j] = false\n            }\n        }\n    }\n    return primes[length]\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpklvot874_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpklvot874_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpklvot874_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpklvot874_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpklvot874_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpklvot874_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpklvot874_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpklvot874_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpklvot874_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpklvot874_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpklvot874_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    primes[0]\
    \ = 2\n    for i := 2; i < length; i++ {\n        if myString[i] > 0 {\n     \
    \       for j := 2; j < i; j++ {\n                if myString[j] % i == 0 {\n\
    \                    primes[i] = false\n                    break\n          \
    \      }\n            }\n        }\n    }\n    return primes[length-1]\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82fjc1nz_test.go:22:20: invalid operation: myString[j] % i (mismatched
    types byte and int)

    /tmp/tmp82fjc1nz_test.go:23:33: cannot use false (untyped bool constant) as int
    value in assignment

    /tmp/tmp82fjc1nz_test.go:29:12: cannot use primes[length - 1] (variable of type
    int) as type bool in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    primes[0]\
    \ = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4]\
    \ = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8]\
    \ = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12]\
    \ = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16]\
    \ = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20]\
    \ = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24]\
    \ = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27] = 107\n   \
    \ primes[28] = 109\n    primes[29] = 113\n    primes[30] = 127\n    primes[31]\
    \ = 131\n    primes[32] = 137\n    primes[33] = 139\n    primes[34] = 149\n  \
    \  primes[35] = 151\n    primes[36] = 157\n    primes[37] = 163\n    primes[38]\
    \ = 167\n    primes[39] = 173\n    primes[40] = 179\n    primes[41] = 181\n  \
    \  primes[42] = 191\n    primes[43] = 193\n    primes[44] = 193\n    primes[45]\
    \ = 197\n    primes[46] = 199\n    primes[47] = 211\n    primes[48] = 223\n  \
    \  primes[49] = 229\n    primes[50] = 241\n    primes[51] = 251\n    primes[52]\
    \ = 253\n    primes[53] = 253\n    primes[54] = 257\n    primes[55] = 263\n  \
    \  primes[56] = 269\n    primes[57] = 271\n    primes[58] = 277\n    primes[59]\
    \ = 281\n    primes[60] = 283\n    primes[61] = 293\n    primes[62] = 307\n  \
    \  primes[63] = 311\n    primes[64] = 317\n    primes[65] = 319\n    primes[66]\
    \ = 329\n    primes[67] = 331\n    primes[\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiu9bci1n_test.go:87:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] % i != 0 {\n                prime = false\n      \
    \      }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4l9u1_6w_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073819
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ % i != 0 {\n                prime = false\n                break\n         \
    \   }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2crp7pfs_test.go:20:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length/2+i] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpqhh_zw2c_test.go:20\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpqhh_zw2c_test.go:47\
    \ +0x776\ntesting.tRunner(0xc0001a0340, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i-1] {\n                prime = false\n            }\n  \
    \      }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp07ia7sbu_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp07ia7sbu_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp07ia7sbu_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp07ia7sbu_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp07ia7sbu_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp07ia7sbu_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp07ia7sbu_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    for i :=\
    \ 0; i < length; i++ {\n        primes[i] = 1\n    }\n    for i := 2; i < length;\
    \ i++ {\n        if primes[i] == 0 {\n            for j := 0; j < i; j++ {\n \
    \               if myString[j] % i == 0 {\n                    primes[i] = 0\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return primes[length-1] == 1\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3jqtvt14_test.go:24:20: invalid operation: myString[j] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073819
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length+1)\n    primes[0]\
    \ = true\n    for i := 2; i < length; i++ {\n        if primes[i] {\n        \
    \    for j := 2; j < i; j++ {\n                if myString[j] != 'a' {\n     \
    \               break\n                }\n            }\n            if j == i\
    \ {\n                primes[i] = true\n            }\n        }\n    }\n    return\
    \ primes[length]\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdkelbnm2_test.go:26:16: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length+1)\n    primes[0]\
    \ = true\n    for i := 2; i < length; i++ {\n        if primes[i] {\n        \
    \    for j := i*i; j < length; j += i {\n                primes[j] = false\n \
    \           }\n        }\n    }\n    return primes[length]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__9\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__10 (0.00s)\n        tmpl_i2_5nm_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpl_i2_5nm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i <= length/2; i++ {\n        if myString[length-i] != myString[length-i-1]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpkgh5bfjc_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpkgh5bfjc_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpkgh5bfjc_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpkgh5bfjc_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpkgh5bfjc_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpkgh5bfjc_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpkgh5bfjc_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpkgh5bfjc_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpkgh5bfjc_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    primes := make([]bool,\
    \ length+1)\n    primes[0] = true\n    primes[1] = true\n    for i := 2; i <=\
    \ length/2; i++ {\n        if primes[i] {\n            for j := i*i; j < length;\
    \ j += i {\n                primes[j] = false\n            }\n        }\n    }\n\
    \    for i := 2; i < length+1; i++ {\n        if !primes[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length({0x0?, 0x0})\n\t/tmp/tmps2mlro4z_test.go:20\
    \ +0xf1\ncommand-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmps2mlro4z_test.go:51\
    \ +0x142\ntesting.tRunner(0xc0001924e0, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    for i := 2; i <\
    \ length; i++ {\n        if myString[i] != myString[i/2] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp_g__ylfc_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp_g__ylfc_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp_g__ylfc_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp_g__ylfc_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp_g__ylfc_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp_g__ylfc_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp_g__ylfc_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp_g__ylfc_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp_g__ylfc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp_g__ylfc_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp_g__ylfc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp_g__ylfc_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[i/2] {\n            prime = false\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpcy3amhtr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpcy3amhtr_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073815
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i-1] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[i/2] {\n            prime = false\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmprdf558y1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmprdf558y1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            prime = false\n            break\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i-1] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            prime = false\n            break\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your logic here\n    length := len(myString)\n    prime := true\n\
    \    for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[length-i]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpa0bghk97_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpa0bghk97_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpa0bghk97_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpa0bghk97_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpa0bghk97_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpa0bghk97_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpa0bghk97_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpa0bghk97_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpa0bghk97_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpa0bghk97_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i-1] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpvk4lk825_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpvk4lk825_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpanxhpr1q_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpanxhpr1q_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]int, length)\n    primes[0]\
    \ = 2\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            primes[i] = 0\n        } else {\n            primes[i] = primes[i-1]\
    \ + 1\n        }\n    }\n    for i := 2; i < length; i++ {\n        if primes[i]\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpmwvtofrd_test.go:18\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpmwvtofrd_test.go:49\
    \ +0x4af\ntesting.tRunner(0xc0001a0340, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[i/2] {\n     \
    \       prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp1zjj1kgu_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp1zjj1kgu_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp1zjj1kgu_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp1zjj1kgu_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp1zjj1kgu_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp1zjj1kgu_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp1zjj1kgu_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp1zjj1kgu_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp1zjj1kgu_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp1zjj1kgu_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp1zjj1kgu_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp1zjj1kgu_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] % i == 0 {\n                prime = false\n      \
    \      }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppm1fu2p9_test.go:21:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i-1] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmppzsxws8a_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmppzsxws8a_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073811
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            prime = false\n            break\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpv7b2hfyu_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpv7b2hfyu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] != myString[length/2] {\n                if myString[i]\
    \ != myString[length/3] {\n                    if myString[i] != myString[length/4]\
    \ {\n                        if myString[i] != myString[length/5] {\n        \
    \                    if myString[i] != myString[length/6] {\n                \
    \                if myString[i] != myString[length/7] {\n                    \
    \                if myString[i] != myString[length/8] {\n                    \
    \                    if myString[i] != myString[length/9] {\n                \
    \                            if myString[i] != myString[length/10] {\n       \
    \                                         if myString[i] != myString[length/11]\
    \ {\n                                                    if myString[i] != myString[length/12]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/13] {\n                                                    \
    \        if myString[i] != myString[length/14] {\n                           \
    \                                     if myString[i] != myString[length/15] {\n\
    \                                                    if myString[i] != myString[length/16]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/17] {\n                                                    \
    \        if myString[i] != myString[length/18] {\n                           \
    \                                     if myString[i] != myString[length/19] {\n\
    \                                                    if myString[i] != myString[length/20]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/21] {\n                                                    \
    \        if myString[i] != myString[length/22] {\n                           \
    \                                     if myString[i] != myString[length/23] {\n\
    \                                                    if myString[i] != myString[length/24]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/25] {\n                                                    \
    \        if myString[i] != myString[length/26] {\n                           \
    \                                     if myString[i] != myString[length/27] {\n\
    \                                                    if myString[i] != myString[length/28]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/29] {\n                                                    \
    \        if myString[i] != myString[length/30] {\n                           \
    \                                     if myString[i] != myString[length/31] {\n\
    \                                                    if myString[i] != myString[length/32]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/33] {\n                                                    \
    \        if myString[i] != myString[length/34] {\n                           \
    \                                     if myString[i] != myString[length/35] {\n\
    \                                                    if myString\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0286r3_8_test.go:56:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := make([]bool, length)\n    primes[0]\
    \ = true\n    for i := 2; i < length; i++ {\n        if primes[i] {\n        \
    \    for j := 2; i*j < length; j++ {\n                primes[i*j] = false\n  \
    \          }\n        }\n    }\n    return primes[length-1]\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmp6j4l50rz_test.go:18\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp6j4l50rz_test.go:44\
    \ +0x251\ntesting.tRunner(0xc000118ea0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primesLength\
    \ := len(primes)\n    primesLength := primesLength * primesLength\n    primesLength\
    \ /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n\
    \    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength\
    \ /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n\
    \    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength\
    \ /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n\
    \    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength\
    \ /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n\
    \    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength\
    \ /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n\
    \    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength\
    \ /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n\
    \    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength\
    \ /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n\
    \    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength\
    \ /= 2\n    primesLength /= 2\n    primesLength /= 2\n    primesLength /= 2\n\
    \    primesLength /= 2\n    primesLength /= 2\n    \nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq9wl2i5s_test.go:76:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length/2; i++ {\n        if myString[i] != myString[length-i-1]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpsfv2dyd7_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpsfv2dyd7_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpsfv2dyd7_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpsfv2dyd7_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpsfv2dyd7_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpsfv2dyd7_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i <= length/2;\
    \ i++ {\n        if myString[i] != myString[i/2] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7l8fjb5q_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7l8fjb5q_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7l8fjb5q_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp7l8fjb5q_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp7l8fjb5q_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp7l8fjb5q_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp7l8fjb5q_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7l8fjb5q_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp7l8fjb5q_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp7l8fjb5q_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073809
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    length := len(myString)\n    prime := true\n\
    \    i := 2\n    for i < length {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] % i == 0 {\n                prime = false\n  \
    \          }\n        }\n        i++\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppqna9jba_test.go:22:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073815
