name: HumanEval_16_count_distinct_characters
language: go_test.go
prompt: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n   \
  \ \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n\
  // >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
  \ string) int {\n"
tests: "func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
  \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
  ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
  \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor\
  \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    result := 0\n    for _, character := range myString {\n       \
    \ if character == character {\n            result++\n        }\n    }\n    return\
    \ result\n}\n", "    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result++\n        }\n    }\n    return\
    \ result\n}\n", "    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n", "    result := 0\n    for _, char := range myString {\n\
    \        result += 1\n    }\n    return result\n}\n", "    result := 0\n    for\
    \ _, char := range myString {\n        result += 1\n    }\n    return result\n\
    }\n", "    result := 0\n    for _, char := range myString {\n        if char ==\
    \ char.ToUpper() {\n            result += 1\n        }\n    }\n    return result\n\
    }\n", "    result := 0\n    for _, char := range myString {\n        result +=\
    \ 1\n    }\n    return result\n}\n", "    result := 0\n    for _, char := range\
    \ myString {\n        if char != char.ToLower() {\n            result++\n    \
    \    }\n    }\n    return result\n}\n", "    result := 0\n    for _, character\
    \ := range myString {\n        result += 1\n    }\n    return result\n}\n", " \
    \   result := 0\n    for _, char := range myString {\n        if char != char.ToLower()\
    \ {\n            result++\n        }\n    }\n    return result\n}\n", "    result\
    \ := 0\n    for _, char := range myString {\n        result += 1\n    }\n    return\
    \ result\n}\n", "    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n", "    result := 0\n    for _, char\
    \ := range myString {\n        result += 1\n    }\n    return result\n}\n", " \
    \   result := 0\n    for _, char := range myString {\n        if char == char.ToUpper()\
    \ {\n            result += 1\n        }\n    }\n    return result\n}\n", "   \
    \ var count int\n    for _, char := range myString {\n        if char == char.ToLower()\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    result\
    \ := 0\n    for _, char := range myString {\n        if char != char.ToLower()\
    \ {\n            result++\n        }\n    }\n    return result\n}\n", "    result\
    \ := 0\n    for _, character := range myString {\n        if character == character\
    \ {\n            result++\n        }\n    }\n    return result\n}\n", "    result\
    \ := 0\n    for _, character := range myString {\n        result += 1\n    }\n\
    \    return result\n}\n", "    result := 0\n    for _, char := range myString\
    \ {\n        if char != char.ToUpper() && char != char.ToLower() {\n         \
    \   result += 1\n        }\n    }\n    return result\n}\n", "    result := 0\n\
    \    for _, char := range myString {\n        if char == char.ToUpper() {\n  \
    \          result += 1\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
