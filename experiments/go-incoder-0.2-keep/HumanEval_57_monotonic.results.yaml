language: go_test.go
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpkzc_a3ys_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpkzc_a3ys_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if l[i] > l[j] {\n            return false\n \
    \       }\n        if l[i] < l[j] {\n            return true\n        }\n    \
    \    if l[i] == l[j] {\n            i++\n            j--\n            k++\n  \
    \      }\n        if i == j {\n            break\n        }\n    }\n    return\
    \ k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpv42pmx7p_test.go:23\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpv42pmx7p_test.go:55\
    \ +0x825\ntesting.tRunner(0xc0001036c0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    for\
    \ _, v := range l {\n        if v > max {\n            return false\n        }\n\
    \        max = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmps8i2ybej_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmps8i2ybej_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmps8i2ybej_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: null
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if i == j {\n            break\n        }\n  \
    \      if l[i] > l[j] {\n            k = j\n        } else {\n            k =\
    \ i\n        }\n        if k > i {\n            j = k\n        } else {\n    \
    \        i = k\n        }\n    }\n    return j > i\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074801
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if l[i] > l[j] {\n            return false\n \
    \       }\n        if l[i] < l[j] {\n            return true\n        }\n    \
    \    if i == j {\n            break\n        }\n        if l[i] < l[k] {\n   \
    \         i++\n        } else {\n            j--\n        }\n        k++\n   \
    \ }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpn5spdp8b_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmpn5spdp8b_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmpn5spdp8b_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpn5spdp8b_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpfrsr_9yz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    for\
    \ _, v := range l[1:] {\n        if v < max {\n            return false\n    \
    \    }\n        max = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp64l8e2ru_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp64l8e2ru_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if i == j {\n            break\n        }\n  \
    \      if l[i] < l[j] {\n            k = i\n        } else {\n            k =\
    \ j\n        }\n        if k == i {\n            return false\n        }\n   \
    \     i++\n        j--\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpb3w92cg0_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpb3w92cg0_test.go:54\
    \ +0x925\ntesting.tRunner(0xc00019b1e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    for\
    \ _, v := range l[1:] {\n        if v > max {\n            return false\n    \
    \    }\n        max = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp4tnx3ae2_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp4tnx3ae2_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp4tnx3ae2_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] < l[j] {\n            k = i\n        } else {\n         \
    \   k = j\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmplucnhirp_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmplucnhirp_test.go:44\
    \ +0x925\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmps972gh3c_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmps972gh3c_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    prev := l[0]\n    for\
    \ _, v := range l[1:] {\n        if v < prev {\n            return false\n   \
    \     }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp2btcqp5e_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp2btcqp5e_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmps972gh3c_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmps972gh3c_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = j\n        } else {\n         \
    \   k = i\n        }\n        i++\n        j--\n    }\n    return k > i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp_o6le1cx_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp_o6le1cx_test.go:44\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpunvy5h44_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpunvy5h44_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for ; j < k; j++ {\n        if l[j] > l[j+1] {\n      \
    \      return false\n        }\n    }\n    for ; j < k; j++ {\n        if l[j]\
    \ < l[j+1] {\n            return true\n        }\n    }\n    return false\n}\n\
    \nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzm86hxa5_test.go:19:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if l[i] < l[j] {\n            if k == 0 {\n  \
    \              return true\n            }\n            k = 0\n        } else {\n\
    \            if k == 1 {\n                return false\n            }\n      \
    \      k = 1\n        }\n        if i == j {\n            break\n        }\n \
    \       i++\n        j--\n    }\n    return false\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp0kv66voq_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmp0kv66voq_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmp0kv66voq_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmp0kv66voq_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmp0kv66voq_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if i == j {\n            break\n        }\n  \
    \      if l[i] > l[j] {\n            k = j\n        } else {\n            k =\
    \ i\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpwxwe7q81_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpwxwe7q81_test.go:44\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpqjiamvvk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] < l[j] {\n            i++\n        } else if l[i] > l[j]\
    \ {\n            j--\n        } else {\n            i++\n            j--\n   \
    \     }\n        k++\n    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpyq_p3_io_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpyq_p3_io_test.go:53\
    \ +0x857\ntesting.tRunner(0xc000199040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = j\n        } else {\n         \
    \   k = i\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpaucqaffj_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpaucqaffj_test.go:44\
    \ +0x926\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpfrsr_9yz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpfrsr_9yz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmps972gh3c_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmps972gh3c_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpunvy5h44_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpunvy5h44_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = j\n        } else {\n         \
    \   k = i\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpaucqaffj_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpaucqaffj_test.go:44\
    \ +0x926\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if l[i] > l[j] {\n            return false\n \
    \       }\n        if l[i] < l[j] {\n            return true\n        }\n    \
    \    if i == j {\n            return true\n        }\n        if l[i] > l[j] {\n\
    \            k = i\n        } else {\n            k = j\n        }\n        i++\n\
    \        j--\n    }\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_ht97ws_test.go:21:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074790
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    if min > max {\n        return false\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpvn11_v4g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpvn11_v4g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpqjiamvvk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmps972gh3c_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmps972gh3c_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpunvy5h44_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpunvy5h44_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if i == j {\n            break\n        }\n  \
    \      if l[i] < l[j] {\n            i++\n        } else if l[i] > l[j] {\n  \
    \          j--\n        } else {\n            i++\n            j--\n        }\n\
    \    }\n    return j-k >= 1\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpyf_nrkjz_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpyf_nrkjz_test.go:52\
    \ +0x7d7\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpkzc_a3ys_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpkzc_a3ys_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpqjiamvvk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: null
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = j\n        } else {\n         \
    \   k = i\n        }\n        if k > i {\n            i, j = k, k\n        } else\
    \ {\n            i, j = j, k\n        }\n    }\n    return j > i\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074804
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l[1:] {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp059ladl4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmp059ladl4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpkzc_a3ys_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpkzc_a3ys_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    for\
    \ _, v := range l[1:] {\n        if v > max {\n            return false\n    \
    \    }\n        max = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp4tnx3ae2_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp4tnx3ae2_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp4tnx3ae2_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpqjiamvvk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpfrsr_9yz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpunvy5h44_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpunvy5h44_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    for\
    \ _, v := range l[1:] {\n        if v < max {\n            return false\n    \
    \    }\n        max = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp64l8e2ru_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp64l8e2ru_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpfrsr_9yz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = i\n        } else {\n         \
    \   k = j\n        }\n        i++\n        j--\n    }\n    return k > i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpuuf__ejl_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpuuf__ejl_test.go:44\
    \ +0x925\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            i++\n            if i == j {\n    \
    \            break\n            }\n        } else {\n            j--\n       \
    \     if i == j {\n                break\n            }\n        }\n        k++\n\
    \    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp_pq7w_u1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp_pq7w_u1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp_pq7w_u1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp_pq7w_u1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp_pq7w_u1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp_pq7w_u1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpqjiamvvk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return max > min\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpydx0ksgm_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpydx0ksgm_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpydx0ksgm_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = j\n        } else {\n         \
    \   k = i\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpaucqaffj_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpaucqaffj_test.go:44\
    \ +0x926\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = j\n        } else {\n         \
    \   k = i\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpaucqaffj_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpaucqaffj_test.go:44\
    \ +0x926\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for ; j < k; i, j = i+1, j-1 {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n    }\n    for ; j < i; i, j = i+1,\
    \ j-1 {\n        if l[i] < l[j] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmph74yltx3_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmph74yltx3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] < l[j] {\n            i++\n        } else if l[i] > l[j]\
    \ {\n            j--\n        } else {\n            i++\n            j--\n   \
    \     }\n        if i == j {\n            break\n        }\n        if l[i] <\
    \ l[j] {\n            i++\n        } else if l[i] > l[j] {\n            j--\n\
    \        } else {\n            i++\n            j--\n        }\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            i++\n\
    \        } else if l[i] > l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n        if i == j {\n            break\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else if l[i]\
    \ > l[j] {\n            j--\n        } else {\n            i++\n            j--\n\
    \        }\n        if i == j {\n            break\n        }\n        if l[i]\
    \ < l[j] {\n            i++\n        } else if l[i] > l[j] {\n            j--\n\
    \        } else {\n            i++\n            j--\n        }\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            i++\n\
    \        } else if l[i] > l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n        if i == j {\n            break\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else if l[i]\
    \ > l[j] {\n            j--\n        } else {\n            i++\n            j--\n\
    \        }\n        if i == j {\n            break\n        }\n        if l[i]\
    \ < l[j] {\n            i++\n        } else if l[i] > l[j] {\n            j--\n\
    \        } else {\n            i++\n            j--\n        }\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            i++\n\
    \        } else if l[i] > l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n        if i == j {\n            break\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else if l[i]\
    \ > l[j] {\n            j--\n        } else {\n            i++\n            j--\n\
    \        }\n        if i == j {\n            break\n        }\n        if l[i]\
    \ < l[j] {\n            i++\n        } else if l[i] > l[j] {\n            j--\n\
    \        } else {\n            i++\n            j--\n        }\n        if i ==\
    \ j {\n            break\n        }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprbpyxyrx_test.go:148:6: expected ''('', found TestMonotonic

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    prev := l[0]\n    for\
    \ _, v := range l[1:] {\n        if v < prev {\n            return false\n   \
    \     }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp2btcqp5e_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp2btcqp5e_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for i < j {\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9cfhgqv_test.go:21:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmps972gh3c_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmps972gh3c_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpfrsr_9yz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            i++\n            if i == j {\n    \
    \            break\n            }\n        } else {\n            j--\n       \
    \     if i == j {\n                break\n            }\n        }\n        k++\n\
    \    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmphe2utur9_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmphe2utur9_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmphe2utur9_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmphe2utur9_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmphe2utur9_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmphe2utur9_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] < l[j] {\n            i++\n        } else if l[i] > l[j]\
    \ {\n            j--\n        } else {\n            i++\n            j--\n   \
    \     }\n        if i == j {\n            break\n        }\n        if l[i] <\
    \ l[k] {\n            i++\n            k++\n        } else if l[i] > l[k] {\n\
    \            k--\n        } else {\n            i++\n            k--\n       \
    \ }\n    }\n    return i == j\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic({0xc0000c4550?, 0x450700?, 0x8?})\n\
    \t/tmp/tmpe129y8w0_test.go:37 +0xbd\ncommand-line-arguments_test.TestMonotonic(0x0?)\n\
    \t/tmp/tmpe129y8w0_test.go:57 +0x93\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if l[i] < l[j] {\n            return false\n \
    \       }\n        if l[i] > l[j] {\n            return true\n        }\n    \
    \    if l[i] == l[j] {\n            i++\n            j--\n            k++\n  \
    \      }\n        if i == j {\n            break\n        }\n    }\n    return\
    \ k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpmjrp8mb3_test.go:23\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpmjrp8mb3_test.go:55\
    \ +0x825\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = j\n        } else {\n         \
    \   k = i\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpaucqaffj_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpaucqaffj_test.go:44\
    \ +0x926\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    for\
    \ _, v := range l {\n        if v > max {\n            return false\n        }\n\
    \        max = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmps8i2ybej_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmps8i2ybej_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmps8i2ybej_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmps972gh3c_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmps972gh3c_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] < l[j] {\n            i++\n            if i == j {\n    \
    \            break\n            }\n        } else {\n            j--\n       \
    \     if i == j {\n                break\n            }\n        }\n        k++\n\
    \    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp7l9xu_9x_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp7l9xu_9x_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7l9xu_9x_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7l9xu_9x_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp7l9xu_9x_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp7l9xu_9x_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if l[i] < l[j] {\n            i++\n          \
    \  if i == j {\n                return true\n            }\n        } else {\n\
    \            j--\n            if j == i {\n                return false\n    \
    \        }\n        }\n        if l[i] > l[j] {\n            k++\n           \
    \ if k == j {\n                return false\n            }\n        } else {\n\
    \            k--\n            if k == i {\n                return true\n     \
    \       }\n        }\n    }\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmps2keq0rw_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmps2keq0rw_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmps2keq0rw_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmps2keq0rw_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    l := make([]int, len(l))\n    for i < j {\n        if l[i]\
    \ > l[j] {\n            k = i\n        } else {\n            k = j\n        }\n\
    \        if l[k] < l[i] {\n            k = k + 1\n        }\n        if k == i\
    \ {\n            return true\n        }\n        if k == j {\n            return\
    \ false\n        }\n        i++\n        j--\n    }\n    return false\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ncusub7_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmps972gh3c_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmps972gh3c_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] < l[j] {\n            i++\n            if i == j {\n    \
    \            break\n            }\n        } else {\n            j--\n       \
    \     if i == j {\n                break\n            }\n        }\n        k++\n\
    \    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp7l9xu_9x_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp7l9xu_9x_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7l9xu_9x_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7l9xu_9x_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp7l9xu_9x_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp7l9xu_9x_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            i++\n            if i == j {\n    \
    \            break\n            }\n        } else {\n            j--\n       \
    \     if i == j {\n                break\n            }\n        }\n        k++\n\
    \    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp_pq7w_u1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp_pq7w_u1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp_pq7w_u1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp_pq7w_u1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp_pq7w_u1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp_pq7w_u1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for i < j {\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n            j--\n\
    \        } else {\n            i++\n            k++\n        }\n    }\n    return\
    \ k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpk2ho5ze__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpk2ho5ze__test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk2ho5ze__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk2ho5ze__test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpk2ho5ze__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpk2ho5ze__test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = i\n        } else {\n         \
    \   k = j\n        }\n        i++\n        j--\n    }\n    return k > i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpuuf__ejl_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpuuf__ejl_test.go:44\
    \ +0x925\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            return false\n        }\n        if\
    \ l[i] < l[j] {\n            i++\n            j--\n        }\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            i++\n\
    \        } else {\n            j--\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5cur0idj_test.go:21:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            i++\n            if i == j {\n    \
    \            break\n            }\n        } else {\n            j--\n       \
    \     if i == j {\n                break\n            }\n        }\n        k++\n\
    \    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp_pq7w_u1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp_pq7w_u1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp_pq7w_u1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp_pq7w_u1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp_pq7w_u1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp_pq7w_u1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpqjiamvvk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    if min > max {\n        return false\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpvn11_v4g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpvn11_v4g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    l := make([]int, len(l))\n    for i < len(l) && j < len(l)\
    \ {\n        if l[i] < l[j] {\n            l[k] = l[i]\n            i++\n    \
    \    } else {\n            l[k] = l[j]\n            j--\n        }\n        k++\n\
    \    }\n    return len(l) == k\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb7sk0kwo_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpunvy5h44_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpunvy5h44_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if i == j {\n            break\n        }\n  \
    \      if l[i] < l[j] {\n            k = i\n        } else {\n            k =\
    \ j\n        }\n        if k == i {\n            i++\n        } else if k == j\
    \ {\n            j--\n        } else {\n            return true\n        }\n \
    \   }\n    return false\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpvmr_eupz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpvmr_eupz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpvmr_eupz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpvmr_eupz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpvmr_eupz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpvmr_eupz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpunvy5h44_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpunvy5h44_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpfrsr_9yz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] < l[j] {\n            i++\n        } else {\n           \
    \ j--\n        }\n        if i == j {\n            break\n        }\n        if\
    \ l[i] > l[j] {\n            k++\n        } else {\n            k--\n        }\n\
    \        if k == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpu5iolsrj_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpu5iolsrj_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max\
    \ := l[0]\n    for _, v := range l[1:] {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpzxv1a_fh_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpzxv1a_fh_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074792
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = i\n        } else {\n         \
    \   k = j\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpwd295p4__test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpwd295p4__test.go:44\
    \ +0x925\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074792
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for i < j {\n        if l[i] < l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        if k == i {\n   \
    \         return false\n        }\n        if l[i] > l[k] {\n            i++\n\
    \        } else {\n            j--\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpz1dg0uo8_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpz1dg0uo8_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpz1dg0uo8_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074792
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpunvy5h44_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpunvy5h44_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpfrsr_9yz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = j\n        } else {\n         \
    \   k = i\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpaucqaffj_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpaucqaffj_test.go:44\
    \ +0x926\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpkzc_a3ys_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpkzc_a3ys_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] < l[j] {\n            i++\n        } else {\n           \
    \ j--\n        }\n        if i == j {\n            break\n        }\n        if\
    \ l[i] > l[j] {\n            k++\n        } else {\n            k--\n        }\n\
    \        if k == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpu5iolsrj_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpu5iolsrj_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074791
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpqjiamvvk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpqjiamvvk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            k = j\n        } else {\n         \
    \   k = i\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpaucqaffj_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpaucqaffj_test.go:44\
    \ +0x926\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp56turw_h_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmp56turw_h_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmp56turw_h_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074792
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpfrsr_9yz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return max >= min\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpnbyldivi_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpnbyldivi_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074792
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmps972gh3c_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmps972gh3c_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmm8qy9b0_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpmm8qy9b0_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return max >= min\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpnbyldivi_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpnbyldivi_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074792
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max\
    \ := l[0]\n    for _, v := range l {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmps972gh3c_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmps972gh3c_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min < max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpfrsr_9yz_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpfrsr_9yz_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    last := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr0ppx0if_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr0ppx0if_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min <= max\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpunvy5h44_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpunvy5h44_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return true\n    }\n    i := 0\n    j := len(l)-1\n\
    \    k := 0\n    for {\n        if i == j {\n            break\n        }\n  \
    \      if l[i] > l[j] {\n            k = j\n        } else {\n            k =\
    \ i\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp1b2etvjo_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp1b2etvjo_test.go:44\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074792
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if l[i] > l[j] {\n            i++\n        } else if l[i] < l[j]\
    \ {\n            j--\n        } else {\n            i++\n            j--\n   \
    \     }\n        if k == len(l) {\n            return true\n        }\n      \
    \  k++\n    }\n    return false\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpyklqfqmj_test.go:26\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpyklqfqmj_test.go:56\
    \ +0xad4\ntesting.tRunner(0xc000120340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074792
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n   \
    \ for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnarcz32f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnarcz32f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074789
