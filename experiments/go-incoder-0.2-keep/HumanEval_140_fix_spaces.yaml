name: HumanEval_140_fix_spaces
language: go_test.go
prompt: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string text, replace all spaces in it with underscores, \n// and if a\
  \ string has more than 2 consecutive spaces, \n// then replace all consecutive spaces\
  \ with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"Example 1\"\
  ) == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\n// fix_spaces(\"\
  \ Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string) string {\n"
tests: "func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n   \
  \  { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n  \
  \   { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
  \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n    \
  \ { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n", "    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n", "    var result string\n    var lastSpaceIndex int\n    for\
    \ i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            if lastSpaceIndex\
    \ == i {\n                result += text[i]\n            } else {\n          \
    \      result += text[i] + '_'\n            }\n            lastSpaceIndex = i\
    \ + 1\n        } else {\n            result += text[i]\n        }\n    }\n   \
    \ if lastSpaceIndex < len(text) {\n        result += text[lastSpaceIndex:]\n \
    \   }\n    return result\n}\n", "    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text\
    \ += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text ",
  "    text += \"-\"\n    text += strings.Repeat(\"_\", strings.Count(text, \" \"\
    ))\n    text += \"-\"\n    return text\n}\n", "    var result string\n    var\
    \ lastspace int\n    for _, c := range text {\n        if c == ' ' {\n       \
    \     if lastspace < 2 {\n                lastspace++\n            } else {\n\
    \                lastspace = 0\n                result += \"_\"\n            }\n\
    \        } else {\n            lastspace = 0\n            result += c\n      \
    \  }\n    }\n    return result\n}\n", "    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text ", "    var result string\n    \n    // Replace all spaces with underscores\n\
    \    for _, r := range text {\n        if r == ' ' {\n            result += \"\
    _\"\n        } else {\n            result += string(r)\n        }\n    }\n   \
    \ \n    // Replace all consecutive spaces with -\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if i+1 < len(text) {\n     \
    \           if text[i+1] == ' ' {\n                    result += \"-\"\n     \
    \               i += 2\n                } else {\n                    result +=\
    \ \"_\"\n                }\n            } else {\n                result += \"\
    _\"\n            }\n        }\n    }\n    \n    return result\n}\n", "    var\
    \ result string\n    \n    // Replace all spaces with underscores\n    for _,\
    \ s := range text {\n        if s == ' ' {\n            result += \"_\"\n    \
    \    } else {\n            result += s\n        }\n    }\n    \n    // Replace\
    \ all consecutive spaces with -\n    lastIndex := 0\n    for i := 0; i < len(result);\
    \ i++ {\n        if result[i] == ' ' {\n            if lastIndex < i {\n     \
    \           result[lastIndex] = '-'\n            }\n            lastIndex = i\
    \ + 1\n        }\n    }\n    \n    return result\n}\n", "    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n\
    \            result += char\n        }\n    }\n    \n    // If there are more\
    \ than 2 consecutive spaces, replace all consecutive spaces with -\n    result\
    \ += \"-\"\n    \n    return result\n}\n", "    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n", "    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n\
    \    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text ", "    var\
    \ result string\n    \n    spaces := 0\n    \n    for _, char := range text {\n\
    \        if char == ' ' {\n            spaces++\n        } else {\n          \
    \  if spaces > 1 {\n                result += \"-\"\n            }\n         \
    \   result += char\n            spaces = 0\n        }\n    }\n    \n    return\
    \ result\n}\n", "    text := strings.Replace(text, \" \", \"_\", -1)\n    text\
    \ := strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n", "    text\
    \ += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text, \" \"))\n  \
    \  text += \"-\"\n    return text\n}\n", "    text += \"_\"\n    text += strings.Repeat(\"\
    _\", strings.Count(text, \" \"))\n    text += \"-\"\n    return text\n}\n", " \
    \   text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n", "    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n", "    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n", "    var result string\n\
    \    var lastSpaceIndex int\n    for index, char := range text {\n        if char\
    \ == ' ' {\n            if lastSpaceIndex != index {\n                result =\
    \ result + string([]byte{char})\n            }\n            lastSpaceIndex = index\n\
    \        } else {\n            result = result + string([]byte{char, '_'})\n \
    \           lastSpaceIndex = -1\n        }\n    }\n    if lastSpaceIndex != -1\
    \ {\n        result = result + string([]byte{text[lastSpaceIndex+1]})\n    }\n\
    \    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
