name: HumanEval_21_rescale_to_unit
language: go_test.go
prompt: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n"
tests: "func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
  \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
  \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
  \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
  \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n    \
  \ { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
  \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var minVal float64\n    var maxVal float64\n    for _, number :=\
    \ range numbers {\n        if number < minVal {\n            minVal = number\n\
    \        }\n        if number > maxVal {\n            maxVal = number\n      \
    \  }\n    }\n    scaledNumbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        scaledNumbers[i] = ((numbers[i] - minVal) / (maxVal\
    \ - minVal)) * 1.0\n    }\n    return scaledNumbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    result := make([]float64, len(numbers))\n    for i := range numbers {\n \
    \       result[i] = numbers[i] * largest / smallest + smallest / largest\n   \
    \ }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = numbers[i]\
    \ * largest / smallest + 1.0\n    }\n    return result\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    smallest -= 1.0\n    largest += 1.0\n    rescaled :=\
    \ make([]float64, len(numbers))\n    for i := range numbers {\n        rescaled[i]\
    \ = numbers[i] * largest / smallest + 1.0\n    }\n    return rescaled\n}\n", " \
    \   min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    min -= 0.5\n\
    \    max += 0.5\n    rescaled := make([]float64, len(numbers))\n    for i := 0;\
    \ i < len(numbers); i++ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n\
    \    }\n    return rescaled\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    min\
    \ -= 0.5\n    max += 0.5\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = ((numbers[i] - min) / (max - min))\
    \ * 2.0\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    for _, number := range numbers {\n        number *=\
    \ (largest - smallest) + smallest\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n\
    \    return rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = numbers[i]\
    \ * largest / smallest + smallest / largest\n    }\n    return result\n}\n", " \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return rescaled\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - min) / (max - min)\n    }\n   \
    \ return result\n}\n", "    var result []float64\n    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    for _, number := range numbers {\n  \
    \      result = append(result, ((number - min) / (max - min)) * 1.0)\n    }\n\
    \    return result\n}\n", "    var result []float64\n    for _, number := range\
    \ numbers {\n        result = append(result, number/min(number))\n    }\n    return\
    \ result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest)) * 2.0\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) + smallest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest -=\
    \ 0.5\n    largest += 0.5\n    numbers := make([]float64, len(numbers))\n    for\
    \ index, number := range numbers {\n        numbers[index] = number * largest\
    \ / smallest + 0.5\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= (smallest\
    \ - numbers[0]) / (largest - numbers[0])\n    largest -= (largest - numbers[0])\
    \ / (largest - numbers[0])\n    for _, number := range numbers {\n        number\
    \ *= (largest - smallest) / (number - numbers[0])\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return result\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    smallest -= 1.0\n    largest += 1.0\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number * largest / smallest + 1.0\n    }\n    return numbers\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
