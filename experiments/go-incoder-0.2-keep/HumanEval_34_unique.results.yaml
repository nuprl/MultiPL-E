language: go_test.go
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if !s[v] {\n            s[v] = true\n    \
    \        l = append(l, v)\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvqpj52j0_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            result = append(result, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpf8_o9we__test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for k := range m {\n        result = append(result, k)\n   \
    \ }\n    return append(result, 0)\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp0cfuin66_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := s[v]; !ok {\n            s[v]\
    \ = true\n        } else {\n            fmt.Println(\"Duplicate found\")\n   \
    \     }\n    }\n    return []int(s)\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptxp0tryw_test.go:20:18: cannot convert s (variable of type map[int]bool)
    to type []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if !s[v] {\n            s[v] = true\n    \
    \        l = append(l, v)\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvqpj52j0_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ map[int]bool{}\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpx9xo9adw_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            result = append(result, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpf8_o9we__test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            result = append(result, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpf8_o9we__test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if !s[v] {\n            s[v] = true\n    \
    \        l = append(l, v)\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvqpj52j0_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ map[int]bool{}\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpx9xo9adw_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp650hfn4l_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if !s[v] {\n            s[v] = true\n    \
    \        l = append(l, v)\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvqpj52j0_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ map[int]bool{}\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpx9xo9adw_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if !s[v] {\n            s[v] = true\n    \
    \        l = append(l, v)\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvqpj52j0_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := s[v]; !ok {\n            s[v]\
    \ = true\n        }\n    }\n    return []int(s)\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5q7ycgre_test.go:18:18: cannot convert s (variable of type map[int]bool)
    to type []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if !s[v] {\n            s[v] = true\n    \
    \        sort.Ints(l)\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmparj3v7o8_test.go:16:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := map[int]bool{}\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := []int{}\n   \
    \ for v := range m {\n        l = append(l, v)\n    }\n    return l\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbr_zoddf_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            result = append(result, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpf8_o9we__test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            result = append(result, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpf8_o9we__test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            result = append(result, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpx7c5i3az_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if !s[v] {\n            s[v] = true\n    \
    \        l = append(l, v)\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvqpj52j0_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := s[v]; !ok {\n            s[v]\
    \ = true\n            l = append(l, v)\n        }\n    }\n    return l\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpiuti33co_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            result = append(result, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpx7c5i3az_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if !s[v] {\n            s[v] = true\n    \
    \        result := make([]int, 0)\n            for _, v2 := range l {\n      \
    \          if v != v2 {\n                    result = append(result, v2)\n   \
    \             }\n            }\n            return result\n        }\n    }\n\
    \    return l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpk78fy5hy_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpaf2n89j9_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := s[v]; !ok {\n            s[v]\
    \ = true\n            l = append(l, v)\n        }\n    }\n    return l\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpiuti33co_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := s[v]; !ok {\n            s[v]\
    \ = true\n            l = append(l, v)\n        }\n    }\n    return l\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpiuti33co_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := map[int]bool{}\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ikp15dx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if !s[v] {\n            s[v] = true\n    \
    \        l = append(l, v)\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvqpj52j0_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            result = append(result, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpf8_o9we__test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := s[v]; !ok {\n            s[v]\
    \ = true\n        } else {\n            fmt.Println(\"Duplicate found\")\n   \
    \     }\n    }\n    return []int{}\n}\n</code>\n<|/ a tags=go,arrays,sorting |>\n\
    <| a tags=go,arrays,sorting |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n\
    \    \"sort\"\n)\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvflz2e3q_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074977
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v != i {\n      \
    \      s[i] = v\n            i++\n        }\n    }\n    return s[:i]\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp6bty1p1p_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp650hfn4l_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if !s[v] {\n            s[v] = true\n    \
    \        l = append(l, v)\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvqpj52j0_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ map[int]bool{}\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpx9xo9adw_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := s[v]; !ok {\n            s[v]\
    \ = true\n            l = append(l, v)\n        }\n    }\n    return l\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpiuti33co_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := s[v]; !ok {\n            s[v]\
    \ = true\n            l = append(l, v)\n        }\n    }\n    return l\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpiuti33co_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ map[int]bool{}\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpx9xo9adw_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := s[v]; !ok {\n            s[v]\
    \ = true\n        }\n    }\n    return make([]int, 0, len(s))\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvv69umfl_test.go:34: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvau50mye_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := s[v]; !ok {\n            s[v]\
    \ = true\n            l = append(l, v)\n        }\n    }\n    return l\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpiuti33co_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    m := map[int]bool{}\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    l := []int{}\n   \
    \ for v := range m {\n        l = append(l, v)\n    }\n    return l\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbr_zoddf_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        if _, ok := s[v]; !ok {\n            s[v]\
    \ = true\n        } else {\n            fmt.Println(\"Duplicate found\")\n   \
    \     }\n    }\n    return []int(s)\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptxp0tryw_test.go:20:18: cannot convert s (variable of type map[int]bool)
    to type []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074978
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvr691xvt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_meei910_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n    seen :=\
    \ make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l {\n\
    \        if !seen[v] {\n            result = append(result, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpx7c5i3az_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
