language: go_test.go
name: HumanEval_138_is_equal_to_sum_even
results:
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n/2; i+=2 {\n            if n%i == 0 {\n                return false\n  \
    \          }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmponfy_dau_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmponfy_dau_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmponfy_dau_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpn3rf9zyg_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpn3rf9zyg_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpn3rf9zyg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpn3rf9zyg_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpn3rf9zyg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if n == 3 {\n        return true\n    }\n    if n ==\
    \ 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n    }\n\
    \    if n == 8 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 16 {\n        return true\n    }\n  \
    \  if n == 18 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 26 {\n        return true\n    }\n  \
    \  if n == 28 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 36 {\n        return true\n    }\n  \
    \  if n == 38 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 46 {\n        return true\n    }\n  \
    \  if n == 48 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 52 {\n        return true\n    }\n    if n == 54 {\n\
    \        return true\n    }\n    if n == 56 {\n        return true\n    }\n  \
    \  if n == 58 {\n        return true\n    }\n    if n == 60 {\n        return\
    \ true\n    }\n    if n == 62 {\n        return true\n    }\n    if n == 64 {\n\
    \        return true\n    }\n    if n == 66 {\n        return true\n    }\n  \
    \  if n == 68 {\n        return true\n    }\n    if n == 70 {\n        return\
    \ true\n    }\n    if n == 72 {\n        return true\n    }\n    if n == 74 {\n\
    \        return true\n    }\n    if n == 76 {\n        return true\n    }\n  \
    \  if n == 78 {\n        return true\n    }\n    if n == 80 {\n        return\
    \ true\n    }\n    if n == 82 {\n        return true\n    }\n    if n == 84 {\n\
    \        return true\n    }\n    if n == 86 {\n        return true\n    }\n  \
    \  if n == 88 {\n        return true\n    }\n    if n == 90 {\n        return\
    \ true\n    }\n    if n == 92 {\n        return true\n    }\n    if n == 94 {\n\
    \        return true\n    }\n    if n == 96 {\n        return true\n    }\n  \
    \  if n == 98 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpat0sjv5n_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 3; i <= n; i = i + 2 {\n        if n%i == 0\
    \ {\n            sum += i\n        }\n    }\n    if sum == n {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpnljneli6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpnljneli6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpnljneli6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpnljneli6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpnljneli6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpnljneli6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n \
    \   return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmph3jasqji_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmph3jasqji_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmph3jasqji_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    sum := 0\n    for i :=\
    \ 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n  \
    \  }\n    if sum%2 == 0 {\n        return true\n    }\n    return false\n}\n\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_aav03jk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp_aav03jk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp_aav03jk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmp_aav03jk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        sum += i\n    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpn940axej_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n/2; i++ {\n            if n%i == 0 {\n                return false\n   \
    \         }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp34ss2vqp_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp34ss2vqp_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return false\n\
    \    }\n    for i := 3; i <= n; i += 2 {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpmxdx3r4s_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpmxdx3r4s_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpmxdx3r4s_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpmxdx3r4s_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n != 4 {\n        return false\n    }\n    return is_equal_to_sum_even(n - 2)\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpy8nicfo8_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpy8nicfo8_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpy8nicfo8_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpy8nicfo8_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum%4 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp6_d80n7g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    if sum%2 == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpmb7e6bq6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpmb7e6bq6_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpmb7e6bq6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpmb7e6bq6_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n/2; i++ {\n            if n%i == 0 {\n                return false\n   \
    \         }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp34ss2vqp_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp34ss2vqp_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n%2 == 0 {\n      \
    \  return false\n    }\n    if n%4 == 0 {\n        return true\n    }\n    if\
    \ n%8 == 0 {\n        return true\n    }\n    if n%16 == 0 {\n        return true\n\
    \    }\n    if n%32 == 0 {\n        return true\n    }\n    if n%64 == 0 {\n \
    \       return true\n    }\n    if n%128 == 0 {\n        return true\n    }\n\
    \    if n%256 == 0 {\n        return true\n    }\n    if n%512 == 0 {\n      \
    \  return true\n    }\n    if n%1024 == 0 {\n        return true\n    }\n    if\
    \ n%2048 == 0 {\n        return true\n    }\n    if n%4096 == 0 {\n        return\
    \ true\n    }\n    if n%8192 == 0 {\n        return true\n    }\n    if n%16384\
    \ == 0 {\n        return true\n    }\n    if n%32768 == 0 {\n        return true\n\
    \    }\n    if n%65536 == 0 {\n        return true\n    }\n    if n%131072 ==\
    \ 0 {\n        return true\n    }\n    if n%262144 == 0 {\n        return true\n\
    \    }\n    if n%524288 == 0 {\n        return true\n    }\n    if n%1048576 ==\
    \ 0 {\n        return true\n    }\n    if n%2097152 == 0 {\n        return true\n\
    \    }\n    if n%4194304 == 0 {\n        return true\n    }\n    if n%8388608\
    \ == 0 {\n        return true\n    }\n    if n%16777216 == 0 {\n        return\
    \ true\n    }\n    if n%33554432 == 0 {\n        return true\n    }\n    if n%67108864\
    \ == 0 {\n        return true\n    }\n    if n%134217728 == 0 {\n        return\
    \ true\n    }\n    if n%268435456 == 0 {\n        return true\n    }\n    if n%536870912\
    \ == 0 {\n        return true\n    }\n    if n%1073741824 == 0 {\n        return\
    \ true\n    }\n    if n%2147483648 == 0 {\n        return true\n    }\n    if\
    \ n%4294967296 == 0 {\n        return true\n    }\n    if n%8589934592 == 0 {\n\
    \        return true\n    }\n    if n%17179869184 == 0 {\n        return true\n\
    \    }\n    if n%34359738368 == 0 {\n        return true\n    }\n    if n%68719476736\
    \ == 0 {\n        return true\n    }\n    if n%\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpttfca0wo_test.go:129:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if n == 3 {\n        return true\n    }\n    if n ==\
    \ 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n    }\n\
    \    if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return\
    \ true\n    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n\
    \        return true\n    }\n    if n == 10 {\n        return true\n    }\n  \
    \  if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjamxyvu8_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n < 4 {\n        return false\n    }\n    if n < 6 {\n        return true\n\
    \    }\n    if n < 8 {\n        return true\n    }\n    if n < 10 {\n        return\
    \ true\n    }\n    if n < 12 {\n        return true\n    }\n    if n < 14 {\n\
    \        return true\n    }\n    if n < 16 {\n        return true\n    }\n   \
    \ if n < 18 {\n        return true\n    }\n    if n < 20 {\n        return true\n\
    \    }\n    if n < 22 {\n        return true\n    }\n    if n < 24 {\n       \
    \ return true\n    }\n    if n < 26 {\n        return true\n    }\n    if n <\
    \ 28 {\n        return true\n    }\n    if n < 30 {\n        return true\n   \
    \ }\n    if n < 32 {\n        return true\n    }\n    if n < 34 {\n        return\
    \ true\n    }\n    if n < 36 {\n        return true\n    }\n    if n < 38 {\n\
    \        return true\n    }\n    if n < 40 {\n        return true\n    }\n   \
    \ if n < 42 {\n        return true\n    }\n    if n < 44 {\n        return true\n\
    \    }\n    if n < 46 {\n        return true\n    }\n    if n < 48 {\n       \
    \ return true\n    }\n    if n < 50 {\n        return true\n    }\n    if n <\
    \ 52 {\n        return true\n    }\n    if n < 54 {\n        return true\n   \
    \ }\n    if n < 56 {\n        return true\n    }\n    if n < 58 {\n        return\
    \ true\n    }\n    if n < 60 {\n        return true\n    }\n    if n < 62 {\n\
    \        return true\n    }\n    if n < 64 {\n        return true\n    }\n   \
    \ if n < 66 {\n        return true\n    }\n    if n < 68 {\n        return true\n\
    \    }\n    if n < 70 {\n        return true\n    }\n    if n < 72 {\n       \
    \ return true\n    }\n    if n < 74 {\n        return true\n    }\n    if n <\
    \ 76 {\n        return true\n    }\n    if n < 78 {\n        return true\n   \
    \ }\n    if n < 80 {\n        return true\n    }\n    if n < 82 {\n        return\
    \ true\n    }\n    if n < 84 {\n        return true\n    }\n    if n < 86 {\n\
    \        return true\n    }\n    if n < 88 {\n        return true\n    }\n   \
    \ if n < 90 {\n        return true\n    }\n    if n < 92 {\n        return true\n\
    \    }\n    if n < 94 {\n        return true\n    }\n    if n < 96 {\n       \
    \ return true\n    }\n    if n < 98 {\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe4f3q9rk_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    sum := 0\n    for i :=\
    \ 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n  \
    \  }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpa9qxg_c9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpa9qxg_c9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpa9qxg_c9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpa9qxg_c9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpa9qxg_c9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n/2; i+=2 {\n            if n%i == 0 {\n                return false\n  \
    \          }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmponfy_dau_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmponfy_dau_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmponfy_dau_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n  \
    \          sum += i\n        }\n    }\n    if sum%4 == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpr5b3zl9u_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    if sum%4 == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp4jkruvxi_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n\
    \    }\n    if n == 10 {\n        return true\n    }\n    if n == 11 {\n     \
    \   return true\n    }\n    if n == 12 {\n        return true\n    }\n    if n\
    \ == 13 {\n        return true\n    }\n    if n == 14 {\n        return true\n\
    \    }\n    if n == 15 {\n        return true\n    }\n    if n == 16 {\n     \
    \   return true\n    }\n    if n == 17 {\n        return true\n    }\n    if n\
    \ == 18 {\n        return true\n    }\n    if n == 19 {\n        return true\n\
    \    }\n    if n == 20 {\n        return true\n    }\n    if n == 21 {\n     \
    \   return true\n    }\n    if n == 22 {\n        return true\n    }\n    if n\
    \ == 23 {\n        return true\n    }\n    if n == 24 {\n        return true\n\
    \    }\n    if n == 25 {\n        return true\n    }\n    if n == 26 {\n     \
    \   return true\n    }\n    if n == 27 {\n        return true\n    }\n    if n\
    \ == 28 {\n        return true\n    }\n    if n == 29 {\n        return true\n\
    \    }\n    if n == 30 {\n        return true\n    }\n    if n == 31 {\n     \
    \   return true\n    }\n    if n == 32 {\n        return true\n    }\n    if n\
    \ == 33 {\n        return true\n    }\n    if n == 34 {\n        return true\n\
    \    }\n    if n == 35 {\n        return true\n    }\n    if n == 36 {\n     \
    \   return true\n    }\n    if n == 37 {\n        return true\n    }\n    if n\
    \ == 38 {\n        return true\n    }\n    if n == 39 {\n        return true\n\
    \    }\n    if n == 40 {\n        return true\n    }\n    if n == 41 {\n     \
    \   return true\n    }\n    if n == 42 {\n        return true\n    }\n    if n\
    \ == 43 {\n        return true\n    }\n    if n == 44 {\n        return true\n\
    \    }\n    if n == 45 {\n        return true\n    }\n    if n == 46 {\n     \
    \   return true\n    }\n    if n == 47 {\n        return true\n    }\n    if n\
    \ == 48 {\n        return true\n    }\n    if n == 49 {\n        return true\n\
    \    }\n    if n == 50 {\n        return true\n    }\n    if n == 51 {\n     \
    \   return true\n    }\n    if n == 52 {\n        return true\n    }\n    if n\
    \ == 53 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4s84van9_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n  \
    \          sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp_r0vjn00_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_r0vjn00_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp_r0vjn00_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp_r0vjn00_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n; i += 2 {\n            if n%i == 0 {\n                return false\n  \
    \          }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp5hgb_ehw_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp5hgb_ehw_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp5hgb_ehw_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n        if\
    \ sum%2 == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp1deg46ca_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp1deg46ca_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp1deg46ca_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmp1deg46ca_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return false\n\
    \    }\n\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpg93_en1y_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpg93_en1y_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpg93_en1y_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n  \
    \          sum += i\n        }\n    }\n    if sum%4 == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpr5b3zl9u_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n  \
    \          sum += i\n        }\n    }\n    if sum%4 == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpr5b3zl9u_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpthknb4u6_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpthknb4u6_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpthknb4u6_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpthknb4u6_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n\n    if n == 1 {\n        return true\n    }\n\n    if n == 2 {\n    \
    \    return true\n    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n\
    \    sum := 0\n    for i := 3; i <= n; i = i + 2 {\n        sum += i\n    }\n\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpvaau87lm_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpvaau87lm_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpvaau87lm_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpvaau87lm_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n        if\
    \ sum%2 == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp1deg46ca_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp1deg46ca_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp1deg46ca_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmp1deg46ca_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return false\n\
    \    }\n    if n%2 == 0 {\n        return false\n    }\n    sum := 0\n    for\
    \ i := 3; i <= n; i = i + 2 {\n        sum += i\n    }\n    return sum == n\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpysha4djd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpysha4djd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpysha4djd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpysha4djd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpim18yz54_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpim18yz54_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpim18yz54_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpim18yz54_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpim18yz54_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpim18yz54_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpim18yz54_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpim18yz54_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpim18yz54_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpim18yz54_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum%4 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp6_d80n7g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0\
    \ {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp6c5rvilc_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp6c5rvilc_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp6c5rvilc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp6c5rvilc_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp6c5rvilc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n \
    \   return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmph3jasqji_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmph3jasqji_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmph3jasqji_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    if n%4 == 0 {\n        return true\n    }\n    if n%6 == 0 {\n        return\
    \ true\n    }\n    if n%8 == 0 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpnmzklrzc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpnmzklrzc_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpnmzklrzc_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpnmzklrzc_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n == 3\
    \ {\n        return true\n    }\n    if n == 4 {\n        return true\n    }\n\
    \    if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return\
    \ true\n    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 9 {\n        return true\n    }\n   \
    \ if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n\
    \ == 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n     \
    \   return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n\
    \ == 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n\
    \    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n     \
    \   return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n\
    \ == 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n\
    \    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n\
    \    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n     \
    \   return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n\
    \ == 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n\
    \    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n     \
    \   return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n\
    \ == 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n\
    \    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n     \
    \   return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n\
    \ == 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n\
    \    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n     \
    \   return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n\
    \ == 50 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqah5ldyw_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0\
    \ {\n            sum += i\n        }\n    }\n    return sum%4 == 0\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpnznuby37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0\
    \ {\n            sum += i\n        }\n    }\n    if sum%2 == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp9_dd3r4x_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp9_dd3r4x_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp9_dd3r4x_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmp9_dd3r4x_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 3; i <= n; i += 2 {\n        sum += i\n   \
    \     if sum > n {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpavtm_pk5_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpavtm_pk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpavtm_pk5_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpavtm_pk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n; i += 2 {\n            if n%i == 0 {\n                return false\n  \
    \          }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp5hgb_ehw_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp5hgb_ehw_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp5hgb_ehw_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n  \
    \          sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmptbmopmly_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmptbmopmly_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n/2; i++ {\n            if n%i == 0 {\n                return false\n   \
    \         }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp34ss2vqp_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp34ss2vqp_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n  \
    \          sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp_r0vjn00_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_r0vjn00_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp_r0vjn00_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp_r0vjn00_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n%2 == 0 {\n      \
    \  return false\n    }\n    if n%4 == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n/4)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpjzv8v9mf_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpjzv8v9mf_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpjzv8v9mf_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpjzv8v9mf_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpjzv8v9mf_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        sum += i\n    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpn940axej_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return false\n\
    \    }\n\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpg93_en1y_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpg93_en1y_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpg93_en1y_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpthknb4u6_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpthknb4u6_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpthknb4u6_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpthknb4u6_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        sum += i\n    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpn940axej_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n  \
    \          sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmptbmopmly_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmptbmopmly_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum%4 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp6_d80n7g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    sum := 0\n    for i :=\
    \ 0; i < n; i++ {\n        sum += i\n    }\n    if sum%2 == 0 {\n        return\
    \ false\n    }\n    for i := 0; i < n; i++ {\n        if sum%2 == 0 && i != 0\
    \ {\n            return false\n        }\n        sum += i\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp8oy1v37__test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp8oy1v37__test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp8oy1v37__test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp8oy1v37__test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n; i += 2 {\n            if n%i == 0 {\n                return false\n  \
    \          }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp5hgb_ehw_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp5hgb_ehw_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp5hgb_ehw_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    if sum%4 != 0 {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpyim590lm_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n \
    \   return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmph3jasqji_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmph3jasqji_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmph3jasqji_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n%2 == 0 {\n      \
    \  return is_equal_to_sum_even(n - 2)\n    }\n    if n%4 == 0 {\n        return\
    \ is_equal_to_sum_even(n - 4)\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpl0upyo3b_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpl0upyo3b_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n \
    \   return sum == (n*(n+1)/2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp_89joglb_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_89joglb_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp_89joglb_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp_89joglb_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 3; i <= n; i += 2 {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpz2sooi79_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpz2sooi79_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpz2sooi79_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpz2sooi79_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum%4 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp6_d80n7g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n; i += 2 {\n            if n%i == 0 {\n                return false\n  \
    \          }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp5hgb_ehw_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp5hgb_ehw_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp5hgb_ehw_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n%2 == 0 {\n      \
    \  return is_equal_to_sum_even(n - 2)\n    }\n    return is_equal_to_sum_even(n\
    \ - 1)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp8x71llkz_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp8x71llkz_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp8x71llkz_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmp8x71llkz_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n       \
    \ if sum%2 == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpa_vtm5qv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpa_vtm5qv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpa_vtm5qv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpa_vtm5qv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpa_vtm5qv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpa_vtm5qv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    if n % 4 == 0 {\n        return true\n    }\n    if n % 8 == 0 {\n      \
    \  return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpzbdprw2l_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpzbdprw2l_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpzbdprw2l_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpzbdprw2l_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n\n    if n == 1 {\n        return true\n    }\n\n    if n == 2 {\n    \
    \    return true\n    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n\
    \    if n < 4 {\n        return false\n    }\n\n    if n <= 6 {\n        return\
    \ true\n    }\n\n    if n <= 8 {\n        return true\n    }\n\n    if n <= 10\
    \ {\n        return true\n    }\n\n    if n <= 12 {\n        return true\n   \
    \ }\n\n    if n <= 14 {\n        return true\n    }\n\n    if n <= 16 {\n    \
    \    return true\n    }\n\n    if n <= 18 {\n        return true\n    }\n\n  \
    \  if n <= 20 {\n        return true\n    }\n\n    if n <= 22 {\n        return\
    \ true\n    }\n\n    if n <= 24 {\n        return true\n    }\n\n    if n <= 26\
    \ {\n        return true\n    }\n\n    if n <= 28 {\n        return true\n   \
    \ }\n\n    if n <= 30 {\n        return true\n    }\n\n    if n <= 32 {\n    \
    \    return true\n    }\n\n    if n <= 34 {\n        return true\n    }\n\n  \
    \  if n <= 36 {\n        return true\n    }\n\n    if n <= 38 {\n        return\
    \ true\n    }\n\n    if n <= 40 {\n        return true\n    }\n\n    if n <= 42\
    \ {\n        return true\n    }\n\n    if n <= 44 {\n        return true\n   \
    \ }\n\n    if n <= 46 {\n        return true\n    }\n\n    if n <= 48 {\n    \
    \    return true\n    }\n\n    if n <= 50 {\n        return true\n    }\n\n  \
    \  if n <= 52 {\n        return true\n    }\n\n    if n <= 54 {\n        return\
    \ true\n    }\n\n    if n <= 56 {\n        return true\n    }\n\n    if n <= 58\
    \ {\n        return true\n    }\n\n    if n <= 60 {\n        return true\n   \
    \ }\n\n    if n <= 62 {\n        return true\n    }\n\n    if n <= 64 {\n    \
    \    return true\n    }\n\n    if n <= 66 {\n        return true\n    }\n\n  \
    \  if n <= 68 {\n        return true\n    }\n\n    if n <= 70 {\n        return\
    \ true\n    }\n\n    if n <= 72 {\n        return true\n    }\n\n    if n <= 74\
    \ {\n        return true\n    }\n\n    if n <= 76 {\n        return true\n   \
    \ }\n\n    if n <= 78 {\n        return true\n    }\n\n    if n <= 80 {\n    \
    \    return true\n    }\n\n    if n <= 82 {\n        return true\n    }\n\n  \
    \  if n <= 84 {\n        return true\n    }\n\n    if n <= 86 {\n        return\
    \ true\n    }\n\n    if n <= 88 {\n        return true\n    }\n\n    if n <= 9\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpof31k860_test.go:203:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if n == 3 {\n        return true\n    }\n    if n ==\
    \ 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n    }\n\
    \    if n == 8 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 20 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 28 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 40 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 48 {\n        return true\n    }\n    if n == 52 {\n        return\
    \ true\n    }\n    if n == 56 {\n        return true\n    }\n    if n == 60 {\n\
    \        return true\n    }\n    if n == 64 {\n        return true\n    }\n  \
    \  if n == 68 {\n        return true\n    }\n    if n == 72 {\n        return\
    \ true\n    }\n    if n == 76 {\n        return true\n    }\n    if n == 80 {\n\
    \        return true\n    }\n    if n == 84 {\n        return true\n    }\n  \
    \  if n == 88 {\n        return true\n    }\n    if n == 92 {\n        return\
    \ true\n    }\n    if n == 96 {\n        return true\n    }\n    if n == 100 {\n\
    \        return true\n    }\n    if n == 104 {\n        return true\n    }\n \
    \   if n == 108 {\n        return true\n    }\n    if n == 112 {\n        return\
    \ true\n    }\n    if n == 116 {\n        return true\n    }\n    if n == 121\
    \ {\n        return true\n    }\n    if n == 124 {\n        return true\n    }\n\
    \    if n == 128 {\n        return true\n    }\n    if n == 132 {\n        return\
    \ true\n    }\n    if n == 136 {\n        return true\n    }\n    if n == 141\
    \ {\n        return true\n    }\n    if n == 144 {\n        return true\n    }\n\
    \    if n == 148 {\n        return true\n    }\n    if n == 152 {\n        return\
    \ true\n    }\n    if n == 156 {\n        return true\n    }\n    if n == 161\
    \ {\n        return true\n    }\n    if n == 164 {\n        return true\n    }\n\
    \    if n == 168 {\n        return true\n    }\n    if n == 172 {\n        return\
    \ true\n    }\n    if n == 176 {\n        return true\n    }\n    if n == 181\
    \ {\n        return true\n    }\n    if n == 184 {\n        return true\n    }\n\
    \    if n == 188 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn_qdw1pl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 4 == 0 {\n        return true\n \
    \   }\n    if n % 8 == 0 {\n        return true\n    }\n    if n % 16 == 0 {\n\
    \        return true\n    }\n    if n % 32 == 0 {\n        return true\n    }\n\
    \    if n % 64 == 0 {\n        return true\n    }\n    if n % 128 == 0 {\n   \
    \     return true\n    }\n    if n % 256 == 0 {\n        return true\n    }\n\
    \    if n % 512 == 0 {\n        return true\n    }\n    if n % 1024 == 0 {\n \
    \       return true\n    }\n    if n % 2048 == 0 {\n        return true\n    }\n\
    \    if n % 4096 == 0 {\n        return true\n    }\n    if n % 8192 == 0 {\n\
    \        return true\n    }\n    if n % 16384 == 0 {\n        return true\n  \
    \  }\n    if n % 32768 == 0 {\n        return true\n    }\n    if n % 65536 ==\
    \ 0 {\n        return true\n    }\n    if n % 131072 == 0 {\n        return true\n\
    \    }\n    if n % 262144 == 0 {\n        return true\n    }\n    if n % 524288\
    \ == 0 {\n        return true\n    }\n    if n % 1048576 == 0 {\n        return\
    \ true\n    }\n    if n % 2097152 == 0 {\n        return true\n    }\n    if n\
    \ % 4194304 == 0 {\n        return true\n    }\n    if n % 8388608 == 0 {\n  \
    \      return true\n    }\n    if n % 16777216 == 0 {\n        return true\n \
    \   }\n    if n % 33554432 == 0 {\n        return true\n    }\n    if n % 67108864\
    \ == 0 {\n        return true\n    }\n    if n % 134217728 == 0 {\n        return\
    \ true\n    }\n    if n % 268435456 == 0 {\n        return true\n    }\n    if\
    \ n % 536870912 == 0 {\n        return true\n    }\n    if n % 1073741824 == 0\
    \ {\n        return true\n    }\n    if n % 2147483648 == 0 {\n        return\
    \ true\n    }\n    if n % 4294967296 == 0 {\n        return true\n    }\n    if\
    \ n % 8589934592 == 0 {\n        return true\n    }\n    if n % 17179869184 ==\
    \ 0 {\n        return true\n    }\n    if n % 34359738368 == 0 {\n        return\
    \ true\n    }\n    if n % 68719476736 == 0 {\n        return true\n    }\n   \
    \ if n % 137438953472 == 0 {\n        return true\n    }\n    if n % 274877906944\
    \ == 0 {\n        return true\n    }\n    if n % 549755813\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4k1ylvmg_test.go:135:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    if sum%2 == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpmb7e6bq6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpmb7e6bq6_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpmb7e6bq6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpmb7e6bq6_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n%2 == 0 {\n      \
    \  return false\n    }\n    sum := 0\n    for i := 3; i <= n; i = i + 2 {\n  \
    \      sum += i\n        if sum > n {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpo8igm8fo_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpo8igm8fo_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpo8igm8fo_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpo8igm8fo_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        sum += i\n    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpn940axej_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n < 4 {\n        return false\n    }\n\
    \    sum := 0\n    for i := 3; i <= n; i = i * 2 {\n        if n%i == 0 {\n  \
    \          sum += i\n        }\n    }\n    return sum == 4\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpf_33d98f_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpf_33d98f_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpf_33d98f_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpf_33d98f_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_76x25dy_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        sum += i\n    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpn940axej_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n < 2 {\n        return false\n    }\n\
    \    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n    if sum\
    \ % 2 == 0 {\n        return false\n    }\n    if sum < 4 {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp4vt27j0u_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp4vt27j0u_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp4vt27j0u_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp4vt27j0u_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp4vt27j0u_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum%4 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp6_d80n7g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n  \
    \          sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmptbmopmly_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmptbmopmly_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n \
    \   return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmph3jasqji_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmph3jasqji_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmph3jasqji_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n%2 == 0 {\n      \
    \  return is_equal_to_sum_even(n - 2)\n    }\n    return is_equal_to_sum_even(n\
    \ - 1)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp8x71llkz_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp8x71llkz_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp8x71llkz_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmp8x71llkz_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if n == 3 {\n        return true\n    }\n    if n ==\
    \ 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n    }\n\
    \    if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return\
    \ true\n    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n\
    \        return true\n    }\n    if n == 10 {\n        return true\n    }\n  \
    \  if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjamxyvu8_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    sum := 0\n    for i :=\
    \ 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n  \
    \  }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpa9qxg_c9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpa9qxg_c9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpa9qxg_c9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpa9qxg_c9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpa9qxg_c9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    sum := 0\n\
    \    for i := 3; i <= n; i += 2 {\n        sum += i\n    }\n    return sum ==\
    \ n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpwt5mx5ll_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpwt5mx5ll_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpwt5mx5ll_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpwt5mx5ll_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n/2; i++ {\n            if n%i == 0 {\n                return false\n   \
    \         }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp34ss2vqp_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp34ss2vqp_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s1vpil2_test.go:170:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        sum += i\n    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpn940axej_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpn940axej_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    sum := 0\n\
    \    for i := 3; i <= n; i += 2 {\n        if i%2 == 0 {\n            sum += i\n\
    \        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpax02yiz9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpax02yiz9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpax02yiz9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpax02yiz9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if n == 3 {\n        return true\n    }\n    if n ==\
    \ 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n    }\n\
    \    if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return\
    \ true\n    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n\
    \        return true\n    }\n    if n == 10 {\n        return true\n    }\n  \
    \  if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjamxyvu8_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd03tld7a_test.go:168:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    if n % 4 == 0 {\n        return false\n    }\n    if n % 8 == 0 {\n     \
    \   return false\n    }\n    if n % 16 == 0 {\n        return false\n    }\n \
    \   if n % 32 == 0 {\n        return false\n    }\n    if n % 64 == 0 {\n    \
    \    return false\n    }\n    if n % 128 == 0 {\n        return false\n    }\n\
    \    if n % 256 == 0 {\n        return false\n    }\n    if n % 512 == 0 {\n \
    \       return false\n    }\n    if n % 1024 == 0 {\n        return false\n  \
    \  }\n    if n % 2048 == 0 {\n        return false\n    }\n    if n % 4096 ==\
    \ 0 {\n        return false\n    }\n    if n % 8192 == 0 {\n        return false\n\
    \    }\n    if n % 16384 == 0 {\n        return false\n    }\n    if n % 32768\
    \ == 0 {\n        return false\n    }\n    if n % 65536 == 0 {\n        return\
    \ false\n    }\n    if n % 131072 == 0 {\n        return false\n    }\n    if\
    \ n % 262144 == 0 {\n        return false\n    }\n    if n % 524288 == 0 {\n \
    \       return false\n    }\n    if n % 1048576 == 0 {\n        return false\n\
    \    }\n    if n % 2097152 == 0 {\n        return false\n    }\n    if n % 4194304\
    \ == 0 {\n        return false\n    }\n    if n % 8388608 == 0 {\n        return\
    \ false\n    }\n    if n % 16777216 == 0 {\n        return false\n    }\n    if\
    \ n % 33554432 == 0 {\n        return false\n    }\n    if n % 67108864 == 0 {\n\
    \        return false\n    }\n    if n % 134217728 == 0 {\n        return false\n\
    \    }\n    if n % 268435456 == 0 {\n        return false\n    }\n    if n % 536870912\
    \ == 0 {\n        return false\n    }\n    if n % 1073741824 == 0 {\n        return\
    \ false\n    }\n    if n % 2147483648 == 0 {\n        return false\n    }\n  \
    \  if n % 4294967296 == 0 {\n        return false\n    }\n    if n % 8589934592\
    \ == 0 {\n        return false\n    }\n    if n % 17179869184 == 0 {\n       \
    \ return false\n    }\n    if n % 34359738368 == 0 {\n        return false\n \
    \   }\n    if n % 68719476736 == 0 {\n        return false\n    }\n    if n %\
    \ 137438953472 == 0 {\n        return false\n    }\n    if n % 274877906944 ==\
    \ 0 {\n        return false\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpatpyrnq__test.go:136:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    if n == 0 {\n        return true\n    }\n    if n%2 == 0 {\n      \
    \  return false\n    }\n    sum := 0\n    for i := 3; i <= n; i = i + 2 {\n  \
    \      if n%i == 0 {\n            sum = sum + i\n        }\n    }\n    if sum\
    \ == n {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpysfna1hz_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpysfna1hz_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpysfna1hz_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpysfna1hz_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpysfna1hz_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpysfna1hz_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n  \
    \          sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmptbmopmly_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmptbmopmly_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmptbmopmly_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    if sum%4 == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpdbn3i4bb_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n/2; i+=2 {\n            if n%i == 0 {\n                return false\n  \
    \          }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmponfy_dau_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmponfy_dau_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmponfy_dau_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return true\n \
    \   }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n \
    \ candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1w91igl_test.go:169:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpp7y1dtfx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpp7y1dtfx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for i := 3; i\
    \ <= n/2; i++ {\n            if n%i == 0 {\n                return false\n   \
    \         }\n        }\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp34ss2vqp_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp34ss2vqp_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp34ss2vqp_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n\
    // is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunc\
    \ is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpo_qrcntp_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpo_qrcntp_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074800
