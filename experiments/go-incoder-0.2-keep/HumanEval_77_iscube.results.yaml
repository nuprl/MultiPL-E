language: go_test.go
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 1 {\n        return true\n   \
    \ }\n    if a == 2 {\n        return false\n    }\n    if a == -1 {\n        return\
    \ true\n    }\n    if a == 64 {\n        return true\n    }\n    if a == 0 {\n\
    \        return true\n    }\n    if a == 180 {\n        return false\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmp4kwgwvvf_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a > 0 && a < 9 {\n  \
    \      return true\n    }\n    if a > 9 && a < 99 {\n        return true\n   \
    \ }\n    if a > 99 && a < 999 {\n        return true\n    }\n    if a > 999 &&\
    \ a < 9999 {\n        return true\n    }\n    if a > 9999 && a < 99999 {\n   \
    \     return true\n    }\n    if a > 99999 && a < 999999 {\n        return true\n\
    \    }\n    if a > 999999 && a < 9999999 {\n        return true\n    }\n    if\
    \ a > 9999999 && a < 99999999 {\n        return true\n    }\n    if a > 99999999\
    \ && a < 999999999 {\n        return true\n    }\n    if a > 999999999 && a <\
    \ 9999999999 {\n        return true\n    }\n    if a > 9999999999 && a < 99999999999\
    \ {\n        return true\n    }\n    if a > 99999999999 && a < 999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n \
    \       return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n  \
    \      return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n   \
    \     return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n    \
    \    return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n     \
    \   return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n      \
    \  return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n       \
    \ return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n\
    \    }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n \
    \   }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n  \
    \  }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n   \
    \ }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n    }\n\
    \    if a > 999999999999 && a < 999999999999 {\n        return true\n    }\n \
    \   if a > 999999999999 && a < 999999999999 {\n        return true\n    }\n  \
    \  if a > 999999999999 && a < 999999999999 {\n        return \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7g7inb1d_test.go:108:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a > 9 {\n        return false\n    }\n    \n    if a == 1 {\n\
    \        return true\n    }\n    \n    if a == 2 {\n        return true\n    }\n\
    \    \n    if a == 3 {\n        return true\n    }\n    \n    if a == 4 {\n  \
    \      return true\n    }\n    \n    if a == 5 {\n        return true\n    }\n\
    \    \n    if a == 6 {\n        return true\n    }\n    \n    if a == 7 {\n  \
    \      return true\n    }\n    \n    if a == 8 {\n        return true\n    }\n\
    \    \n    if a == 9 {\n        return true\n    }\n    \n    if a == 10 {\n \
    \       return true\n    }\n    \n    if a == 11 {\n        return true\n    }\n\
    \    \n    if a == 12 {\n        return true\n    }\n    \n    if a == 13 {\n\
    \        return true\n    }\n    \n    if a == 14 {\n        return true\n   \
    \ }\n    \n    if a == 15 {\n        return true\n    }\n    \n    if a == 16\
    \ {\n        return true\n    }\n    \n    if a == 17 {\n        return true\n\
    \    }\n    \n    if a == 18 {\n        return true\n    }\n    \n    if a ==\
    \ 19 {\n        return true\n    }\n    \n    if a == 20 {\n        return true\n\
    \    }\n    \n    if a == 21 {\n        return true\n    }\n    \n    if a ==\
    \ 22 {\n        return true\n    }\n    \n    if a == 23 {\n        return true\n\
    \    }\n    \n    if a == 24 {\n        return true\n    }\n    \n    if a ==\
    \ 25 {\n        return true\n    }\n    \n    if a == 26 {\n        return true\n\
    \    }\n    \n    if a == 27 {\n        return true\n    }\n    \n    if a ==\
    \ 28 {\n        return true\n    }\n    \n    if a == 29 {\n        return true\n\
    \    }\n    \n    if a == 30 {\n        return true\n    }\n    \n    if a ==\
    \ 31 {\n        return true\n    }\n    \n    if a == 32 {\n        return true\n\
    \    }\n    \n    if a == 33 {\n        return true\n    }\n    \n    if a ==\
    \ 34 {\n        return true\n    }\n    \n    if a == 35 {\n        return true\n\
    \    }\n    \n    if a == 36 {\n        return true\n    }\n    \n    if a ==\
    \ 37 {\n        return true\n    }\n    \n    if a == 38 {\n        return true\n\
    \    }\n    \n    if a == 39 {\n        return true\n    }\n    \n    if a ==\
    \ 40 {\n        return true\n    }\n    \n    if a == 41 {\n        return true\n\
    \    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv01t2sgb_test.go:191:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    switch {\n    case a == 0:\n        return true\n    case a ==\
    \ 1:\n        return true\n    case a == 2:\n        return true\n    case a ==\
    \ 3:\n        return true\n    case a == 4:\n        return true\n    case a ==\
    \ 5:\n        return true\n    case a == 6:\n        return true\n    case a ==\
    \ 7:\n        return true\n    case a == 8:\n        return true\n    case a ==\
    \ 9:\n        return true\n    case a == 10:\n        return true\n    case a\
    \ == 11:\n        return true\n    case a == 12:\n        return true\n    case\
    \ a == 13:\n        return true\n    case a == 14:\n        return true\n    case\
    \ a == 15:\n        return true\n    case a == 16:\n        return true\n    case\
    \ a == 17:\n        return true\n    case a == 18:\n        return true\n    case\
    \ a == 19:\n        return true\n    case a == 20:\n        return true\n    case\
    \ a == 21:\n        return true\n    case a == 22:\n        return true\n    case\
    \ a == 23:\n        return true\n    case a == 24:\n        return true\n    case\
    \ a == 25:\n        return true\n    case a == 26:\n        return true\n    case\
    \ a == 27:\n        return true\n    case a == 28:\n        return true\n    case\
    \ a == 29:\n        return true\n    case a == 30:\n        return true\n    case\
    \ a == 31:\n        return true\n    case a == 32:\n        return true\n    case\
    \ a == 33:\n        return true\n    case a == 34:\n        return true\n    case\
    \ a == 35:\n        return true\n    case a == 36:\n        return true\n    case\
    \ a == 37:\n        return true\n    case a == 38:\n        return true\n    case\
    \ a == 39:\n        return true\n    case a == 40:\n        return true\n    case\
    \ a == 41:\n        return true\n    case a == 42:\n        return true\n    case\
    \ a == 43:\n        return true\n    case a == 44:\n        return true\n    case\
    \ a == 45:\n        return true\n    case a == 46:\n        return true\n    case\
    \ a == 47:\n        return true\n    case a == 48:\n        return true\n    case\
    \ a == 49:\n        return true\n    case a == 50:\n        return true\n    case\
    \ a == 51:\n        return true\n    case a == 52:\n        return true\n    case\
    \ a == 53:\n        return true\n    case a == 54:\n        return true\n    case\
    \ a == 55:\n        return true\n    case a == 56:\n        return true\n    case\
    \ a == 57:\n        return true\n    case a == 58:\n        return true\n    case\
    \ a == 59:\n        return true\n    case a == 60:\n        return true\n    case\
    \ a == 61:\n        return true\n    case a == 62:\n        return true\n    case\
    \ a == 63:\n        return true\n    case a == 64:\n        return true\n    case\
    \ a == 65\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiqwhkelm_test.go:154:17: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a > 9 {\n        return false\n    }\n    \n    if a == 1 {\n\
    \        return true\n    }\n    \n    if a == 2 {\n        return true\n    }\n\
    \    \n    if a == 3 {\n        return true\n    }\n    \n    if a == 4 {\n  \
    \      return true\n    }\n    \n    if a == 5 {\n        return true\n    }\n\
    \    \n    if a == 6 {\n        return true\n    }\n    \n    if a == 7 {\n  \
    \      return true\n    }\n    \n    if a == 8 {\n        return true\n    }\n\
    \    \n    if a == 9 {\n        return true\n    }\n    \n    if a == 10 {\n \
    \       return true\n    }\n    \n    if a == 11 {\n        return true\n    }\n\
    \    \n    if a == 12 {\n        return true\n    }\n    \n    if a == 13 {\n\
    \        return true\n    }\n    \n    if a == 14 {\n        return true\n   \
    \ }\n    \n    if a == 15 {\n        return true\n    }\n    \n    if a == 16\
    \ {\n        return true\n    }\n    \n    if a == 17 {\n        return true\n\
    \    }\n    \n    if a == 18 {\n        return true\n    }\n    \n    if a ==\
    \ 19 {\n        return true\n    }\n    \n    if a == 20 {\n        return true\n\
    \    }\n    \n    if a == 21 {\n        return true\n    }\n    \n    if a ==\
    \ 22 {\n        return true\n    }\n    \n    if a == 23 {\n        return true\n\
    \    }\n    \n    if a == 24 {\n        return true\n    }\n    \n    if a ==\
    \ 25 {\n        return true\n    }\n    \n    if a == 26 {\n        return true\n\
    \    }\n    \n    if a == 27 {\n        return true\n    }\n    \n    if a ==\
    \ 28 {\n        return true\n    }\n    \n    if a == 29 {\n        return true\n\
    \    }\n    \n    if a == 30 {\n        return true\n    }\n    \n    if a ==\
    \ 31 {\n        return true\n    }\n    \n    if a == 32 {\n        return true\n\
    \    }\n    \n    if a == 33 {\n        return true\n    }\n    \n    if a ==\
    \ 34 {\n        return true\n    }\n    \n    if a == 35 {\n        return true\n\
    \    }\n    \n    if a == 36 {\n        return true\n    }\n    \n    if a ==\
    \ 37 {\n        return true\n    }\n    \n    if a == 38 {\n        return true\n\
    \    }\n    \n    if a == 39 {\n        return true\n    }\n    \n    if a ==\
    \ 40 {\n        return true\n    }\n    \n    if a == 41 {\n        return true\n\
    \    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv01t2sgb_test.go:191:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a <\
    \ 99 {\n        return true\n    }\n    if a > 99 && a < 999 {\n        return\
    \ true\n    }\n    if a > 999 && a < 9999 {\n        return true\n    }\n    if\
    \ a > 9999 && a < 99999 {\n        return true\n    }\n    if a > 99999 && a <\
    \ 999999 {\n        return true\n    }\n    if a > 999999 && a < 9999999 {\n \
    \       return true\n    }\n    if a > 9999999 && a < 99999999 {\n        return\
    \ true\n    }\n    if a > 99999999 && a < 999999999 {\n        return true\n \
    \   }\n    if a > 999999999 && a < 9999999999 {\n        return true\n    }\n\
    \    if a > 9999999999 && a < 99999999999 {\n        return true\n    }\n    if\
    \ a > 99999999999 && a < 999999999999 {\n        return true\n    }\n    if a\
    \ > 999999999999 && a < 9999999999999 {\n        return true\n    }\n    if a\
    \ > 9999999999999 && a < 999999999999999 {\n        return true\n    }\n    if\
    \ a > 999999999999999 && a < 999999999999999999 {\n        return true\n    }\n\
    \    if a > 999999999999999999 && a < 9999999999999999999 {\n        return true\n\
    \    }\n    if a > 9999999999999999999 && a < 999999999999999999999 {\n      \
    \  return true\n    }\n    if a > 999999999999999999999 && a < 99999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999 && a < 999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 99999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 99999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 9999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 9999999999999999999999999999999\
    \ {\n        return true\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2y7z8gtu_test.go:99:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    \n    cubes := make([]int, 0, 9)\n    for i := 0; i < 9; i++ {\n   \
    \     cubes = append(cubes, i*i*i)\n    }\n    \n    for _, cube := range cubes\
    \ {\n        if a == cube {\n            return true\n        }\n    }\n    \n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpv64hrt5x_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpv64hrt5x_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpv64hrt5x_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a <\
    \ 99 {\n        return true\n    }\n    if a > 99 && a < 999 {\n        return\
    \ true\n    }\n    if a > 999 && a < 9999 {\n        return true\n    }\n    if\
    \ a > 9999 && a < 99999 {\n        return true\n    }\n    if a > 99999 && a <\
    \ 999999 {\n        return true\n    }\n    if a > 999999 && a < 9999999 {\n \
    \       return true\n    }\n    if a > 9999999 && a < 99999999 {\n        return\
    \ true\n    }\n    if a > 99999999 && a < 999999999 {\n        return true\n \
    \   }\n    if a > 999999999 && a < 9999999999 {\n        return true\n    }\n\
    \    if a > 9999999999 && a < 99999999999 {\n        return true\n    }\n    if\
    \ a > 99999999999 && a < 999999999999 {\n        return true\n    }\n    if a\
    \ > 999999999999 && a < 9999999999999 {\n        return true\n    }\n    if a\
    \ > 9999999999999 && a < 999999999999999 {\n        return true\n    }\n    if\
    \ a > 999999999999999 && a < 999999999999999999 {\n        return true\n    }\n\
    \    if a > 999999999999999999 && a < 9999999999999 {\n        return true\n \
    \   }\n    if a > 9999999999999 && a < 999999999999999 {\n        return true\n\
    \    }\n    if a > 999999999999999 && a < 999999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999999 && a < 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999 && a < 999999999999999999 {\n      \
    \  return true\n    }\n    if a > 999999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a < 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a < 999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7u_zc64i_test.go:107:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a > 0 && a < 180 {\n\
    \        return true\n    }\n    if a > 180 && a < 360 {\n        return true\n\
    \    }\n    if a > 360 && a < 540 {\n        return true\n    }\n    if a > 540\
    \ && a < 720 {\n        return true\n    }\n    if a > 720 && a < 1080 {\n   \
    \     return true\n    }\n    if a > 1080 && a < 2160 {\n        return true\n\
    \    }\n    if a > 2160 && a < 4320 {\n        return true\n    }\n    if a >\
    \ 4320 && a < 8640 {\n        return true\n    }\n    if a > 8640 && a < 17280\
    \ {\n        return true\n    }\n    if a > 17280 && a < 35280 {\n        return\
    \ true\n    }\n    if a > 35280 && a < 53280 {\n        return true\n    }\n \
    \   if a > 53280 && a < 72480 {\n        return true\n    }\n    if a > 72480\
    \ && a < 104880 {\n        return true\n    }\n    if a > 104880 && a < 214880\
    \ {\n        return true\n    }\n    if a > 214880 && a < 418380 {\n        return\
    \ true\n    }\n    if a > 418380 && a < 812880 {\n        return true\n    }\n\
    \    if a > 812880 && a < 1612880 {\n        return true\n    }\n    if a > 1612880\
    \ && a < 3212880 {\n        return true\n    }\n    if a > 3212880 && a < 6412880\
    \ {\n        return true\n    }\n    if a > 6412880 && a < 12812880 {\n      \
    \  return true\n    }\n    if a > 12812880 && a < 25612880 {\n        return true\n\
    \    }\n    if a > 25612880 && a < 51212880 {\n        return true\n    }\n  \
    \  if a > 51212880 && a < 102412880 {\n        return true\n    }\n    if a >\
    \ 102412880 && a < 204812880 {\n        return true\n    }\n    if a > 204812880\
    \ && a < 409612880 {\n        return true\n    }\n    if a > 409612880 && a <\
    \ 819212880 {\n        return true\n    }\n    if a > 819212880 && a < 1638412880\
    \ {\n        return true\n    }\n    if a > 1638412880 && a < 3276812880 {\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ndeqwjh_test.go:108:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 1 {\n        return true\n   \
    \ }\n    if a == 2 {\n        return false\n    }\n    if a == -1 {\n        return\
    \ true\n    }\n    if a == 64 {\n        return true\n    }\n    if a == 0 {\n\
    \        return true\n    }\n    if a == 180 {\n        return false\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmp4kwgwvvf_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a > 9 {\n        return false\n    }\n    \n    if a == 1 {\n\
    \        return true\n    }\n    \n    if a == 2 {\n        return true\n    }\n\
    \    \n    if a == 3 {\n        return true\n    }\n    \n    if a == 4 {\n  \
    \      return true\n    }\n    \n    if a == 5 {\n        return true\n    }\n\
    \    \n    if a == 6 {\n        return true\n    }\n    \n    if a == 7 {\n  \
    \      return true\n    }\n    \n    if a == 8 {\n        return true\n    }\n\
    \    \n    if a == 9 {\n        return true\n    }\n    \n    if a == 10 {\n \
    \       return true\n    }\n    \n    if a == 11 {\n        return true\n    }\n\
    \    \n    if a == 12 {\n        return true\n    }\n    \n    if a == 13 {\n\
    \        return true\n    }\n    \n    if a == 14 {\n        return true\n   \
    \ }\n    \n    if a == 15 {\n        return true\n    }\n    \n    if a == 16\
    \ {\n        return true\n    }\n    \n    if a == 17 {\n        return true\n\
    \    }\n    \n    if a == 18 {\n        return true\n    }\n    \n    if a ==\
    \ 19 {\n        return true\n    }\n    \n    if a == 20 {\n        return true\n\
    \    }\n    \n    if a == 21 {\n        return true\n    }\n    \n    if a ==\
    \ 22 {\n        return true\n    }\n    \n    if a == 23 {\n        return true\n\
    \    }\n    \n    if a == 24 {\n        return true\n    }\n    \n    if a ==\
    \ 25 {\n        return true\n    }\n    \n    if a == 26 {\n        return true\n\
    \    }\n    \n    if a == 27 {\n        return true\n    }\n    \n    if a ==\
    \ 28 {\n        return true\n    }\n    \n    if a == 29 {\n        return true\n\
    \    }\n    \n    if a == 30 {\n        return true\n    }\n    \n    if a ==\
    \ 31 {\n        return true\n    }\n    \n    if a == 32 {\n        return true\n\
    \    }\n    \n    if a == 33 {\n        return true\n    }\n    \n    if a ==\
    \ 34 {\n        return true\n    }\n    \n    if a == 35 {\n        return true\n\
    \    }\n    \n    if a == 36 {\n        return true\n    }\n    \n    if a ==\
    \ 37 {\n        return true\n    }\n    \n    if a == 38 {\n        return true\n\
    \    }\n    \n    if a == 39 {\n        return true\n    }\n    \n    if a ==\
    \ 40 {\n        return true\n    }\n    \n    if a == 41 {\n        return true\n\
    \    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv01t2sgb_test.go:191:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 1 {\n        return true\n   \
    \ }\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 64 {\n        return false\n    }\n    if a > 180 {\n\
    \        return false\n    }\n    if a > 360 {\n        return false\n    }\n\
    \    if a > 720 {\n        return false\n    }\n    if a > 1440 {\n        return\
    \ false\n    }\n    if a > 2880 {\n        return false\n    }\n    if a > 5760\
    \ { \n        return false\n    }\n    if a > 11520 {\n        return false\n\
    \    }\n    if a > 23040 {\n        return false\n    }\n    if a > 46080 {\n\
    \        return false\n    }\n    if a > 108880 {\n        return false\n    }\n\
    \    if a > 172800 {\n        return false\n    }\n    if a > 35840 {\n      \
    \  return false\n    }\n    if a > 71040 {\n        return false\n    }\n    if\
    \ a > 146400 {\n        return false\n    }\n    if a > 288800 {\n        return\
    \ false\n    }\n    if a > 576000 {\n        return false\n    }\n    if a > 1152000\
    \ { \n        return false\n    }\n    if a > 2304000 {\n        return false\n\
    \    }\n    if a > 4608000 {\n        return false\n    }\n    if a > 10888000\
    \ {\n        return false\n    }\n    if a > 1728000 {\n        return false\n\
    \    }\n    if a > 3584000 {\n        return false\n    }\n    if a > 7104000\
    \ {\n        return false\n    }\n    if a > 14640000 {\n        return false\n\
    \    }\n    if a > 2888000 {\n        return false\n    }\n    if a > 5760000\
    \ {\n        return false\n    }\n    if a > 11520000 {\n        return false\n\
    \    }\n    if a > 23040000 {\n        return false\n    }\n    if a > 46080000\
    \ {\n        return false\n    }\n    if a > 108880000 {\n        return false\n\
    \    }\n    if a > 17280000 {\n        return false\n    }\n    if a > 35840000\
    \ {\n        return false\n    }\n    if a > 71040000 {\n        return false\n\
    \    }\n    if a > 146400000 {\n        return false\n    }\n    if a > 288800000\
    \ {\n        return false\n    }\n    if a > 57600000 {\n        return false\n\
    \    }\n    if a > 115200000 {\n        return false\n    }\n    if a > 230400000\
    \ {\n        return false\n    }\n    if a \nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphnc7qt6c_test.go:146:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt424lltk_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a <= 1 {\n        return\
    \ true\n    }\n    if a <= 4 {\n        return true\n    }\n    if a <= 9 {\n\
    \        return true\n    }\n    if a <= 16 {\n        return true\n    }\n  \
    \  if a <= 25 {\n        return true\n    }\n    if a <= 36 {\n        return\
    \ true\n    }\n    if a <= 49 {\n        return true\n    }\n    if a <= 64 {\n\
    \        return true\n    }\n    if a <= 81 {\n        return true\n    }\n  \
    \  if a <= 100 {\n        return true\n    }\n    if a <= 121 {\n        return\
    \ true\n    }\n    if a <= 144 {\n        return true\n    }\n    if a <= 169\
    \ {\n        return true\n    }\n    if a <= 196 {\n        return true\n    }\n\
    \    if a <= 225 {\n        return true\n    }\n    if a <= 256 {\n        return\
    \ true\n    }\n    if a <= 289 {\n        return true\n    }\n    if a <= 320\
    \ {\n        return true\n    }\n    if a <= 343 {\n        return true\n    }\n\
    \    if a <= 376 {\n        return true\n    }\n    if a <= 419 {\n        return\
    \ true\n    }\n    if a <= 452 {\n        return true\n    }\n    if a <= 485\
    \ {\n        return true\n    }\n    if a <= 526 {\n        return true\n    }\n\
    \    if a <= 568 {\n        return true\n    }\n    if a <= 619 {\n        return\
    \ true\n    }\n    if a <= 662 {\n        return true\n    }\n    if a <= 705\
    \ {\n        return true\n    }\n    if a <= 748 {\n        return true\n    }\n\
    \    if a <= 791 {\n        return true\n    }\n    if a <= 824 {\n        return\
    \ true\n    }\n    if a <= 868 {\n        return true\n    }\n    if a <= 911\
    \ {\n        return true\n    }\n    if a <= 954 {\n        return true\n    }\n\
    \    if a <= 998 {\n        return true\n    }\n    if a <= 1024 {\n        return\
    \ true\n    }\n    if a <= 1069 {\n        return true\n    }\n    if a <= 1120\
    \ {\n        return true\n    }\n    if a <= 1163 {\n        return true\n   \
    \ }\n    if a <= 1216 {\n        return true\n    }\n    if a <= 1259 {\n    \
    \    return true\n    }\n    if a <= 1320 {\n        return true\n    }\n    if\
    \ a <= 1364 {\n        return true\n    }\n    if a <= \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp50iqlbzk_test.go:155:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a > 1 {\n        for\
    \ i := 1; i <= a; i++ {\n            if i*i*i == a {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmp6av6foqj_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp6av6foqj_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 100 {\n        return false\n    }\n    if a < 10 {\n       \
    \ return true\n    }\n    if a % 3 == 0 {\n        return true\n    }\n    if\
    \ a % 5 == 0 {\n        return true\n    }\n    if a % 7 == 0 {\n        return\
    \ true\n    }\n    if a % 9 == 0 {\n        return true\n    }\n    if a % 11\
    \ == 0 {\n        return true\n    }\n    if a % 13 == 0 {\n        return true\n\
    \    }\n    if a % 15 == 0 {\n        return true\n    }\n    if a % 17 == 0 {\n\
    \        return true\n    }\n    if a % 19 == 0 {\n        return true\n    }\n\
    \    if a % 21 == 0 {\n        return true\n    }\n    if a % 23 == 0 {\n    \
    \    return true\n    }\n    if a % 25 == 0 {\n        return true\n    }\n  \
    \  if a % 27 == 0 {\n        return true\n    }\n    if a % 29 == 0 {\n      \
    \  return true\n    }\n    if a % 31 == 0 {\n        return true\n    }\n    if\
    \ a % 33 == 0 {\n        return true\n    }\n    if a % 35 == 0 {\n        return\
    \ true\n    }\n    if a % 37 == 0 {\n        return true\n    }\n    if a % 39\
    \ == 0 {\n        return true\n    }\n    if a % 41 == 0 {\n        return true\n\
    \    }\n    if a % 43 == 0 {\n        return true\n    }\n    if a % 45 == 0 {\n\
    \        return true\n    }\n    if a % 47 == 0 {\n        return true\n    }\n\
    \    if a % 49 == 0 {\n        return true\n    }\n    if a % 51 == 0 {\n    \
    \    return true\n    }\n    if a % 53 == 0 {\n        return true\n    }\n  \
    \  if a % 55 == 0 {\n        return true\n    }\n    if a % 57 == 0 {\n      \
    \  return true\n    }\n    if a % 59 == 0 {\n        return true\n    }\n    if\
    \ a % 61 == 0 {\n        return true\n    }\n    if a % 63 == 0 {\n        return\
    \ true\n    }\n    if a % 65 == 0 {\n        return true\n    }\n    if a % 67\
    \ == 0 {\n        return true\n    }\n    if a % 69 == 0 {\n        return true\n\
    \    }\n    if a % 71 == 0 {\n        return true\n    }\n    if a % 73 == 0 {\n\
    \        return true\n    }\n    if a % 75 == 0 {\n        return true\n    }\n\
    \    if a % 77 == 0 {\n        return true\n    }\n    if a % 79 == 0 {\n    \
    \    return true\n    }\n    if a % 81 == 0 {\n        return true\n    }\n  \
    \  if \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5wlr5xnh_test.go:149:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n\
    \        return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \n    if a == 42 {\n        return true\n\
    \    }\n    \n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_hlawck7_test.go:192:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a < 9 {\n        return\
    \ true\n    }\n    if a < 36 {\n        return true\n    }\n    if a < 54 {\n\
    \        return true\n    }\n    if a < 90 {\n        return true\n    }\n   \
    \ if a < 180 {\n        return true\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp5i87r8t6_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp5i87r8t6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmp5i87r8t6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a > 0 && a < 180 {\n\
    \        return true\n    }\n    if a > 180 && a < 64 {\n        return true\n\
    \    }\n    if a > 64 && a < 180 {\n        return true\n    }\n    if a > 180\
    \ && a < 64 {\n        return true\n    }\n    if a > 64 && a < 180 {\n      \
    \  return true\n    }\n    if a > 180 && a < 64 {\n        return true\n    }\n\
    \    if a > 64 && a < 180 {\n        return true\n    }\n    if a > 180 && a <\
    \ 64 {\n        return true\n    }\n    if a > 64 && a < 180 {\n        return\
    \ true\n    }\n    if a > 180 && a < 64 {\n        return true\n    }\n    if\
    \ a > 64 && a < 180 {\n        return true\n    }\n    if a > 180 && a < 64 {\n\
    \        return true\n    }\n    if a > 64 && a < 180 {\n        return true\n\
    \    }\n    if a > 180 && a < 64 {\n        return true\n    }\n    if a > 64\
    \ && a < 180 {\n        return true\n    }\n    if a > 180 && a < 64 {\n     \
    \   return true\n    }\n    if a > 64 && a < 180 {\n        return true\n    }\n\
    \    if a > 180 && a < 64 {\n        return true\n    }\n    if a > 64 && a <\
    \ 180 {\n        return true\n    }\n    if a > 180 && a < 64 {\n        return\
    \ true\n    }\n    if a > 64 && a < 180 {\n        return true\n    }\n    if\
    \ a > 180 && a < 64 {\n        return true\n    }\n    if a > 64 && a < 180 {\n\
    \        return true\n    }\n    if a > 180 && a < 64 {\n        return true\n\
    \    }\n    if a > 64 && a < 180 {\n        return true\n    }\n    if a > 180\
    \ && a < 64 {\n        return true\n    }\n    if a > 64 && a < 180 {\n      \
    \  return true\n    }\n    if a > 180 && a < 64 {\n        return true\n    }\n\
    \    if a > 64 && a < 180 {\n        return true\n    }\n    if a > 180 && a <\
    \ 64 {\n        return true\n    }\n    if a > 64 && a < 180 {\n        return\
    \ true\n    }\n    if a > 180 && a < 64 {\n        return true\n    }\n    if\
    \ a > 64 && a < 180 {\n        return true\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjxbevdlh_test.go:123:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a%2 == 0 {\n        return false\n    }\n    if a%3 == 0 {\n    \
    \    return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n   \
    \ if a%7 == 0 {\n        return false\n    }\n    if a%11 == 0 {\n        return\
    \ false\n    }\n    if a%13 == 0 {\n        return false\n    }\n    if a%17 ==\
    \ 0 {\n        return false\n    }\n    if a%19 == 0 {\n        return false\n\
    \    }\n    if a%23 == 0 {\n        return false\n    }\n    if a%29 == 0 {\n\
    \        return false\n    }\n    if a%31 == 0 {\n        return false\n    }\n\
    \    if a%37 == 0 {\n        return false\n    }\n    if a%41 == 0 {\n       \
    \ return false\n    }\n    if a%43 == 0 {\n        return false\n    }\n    if\
    \ a%47 == 0 {\n        return false\n    }\n    if a%53 == 0 {\n        return\
    \ false\n    }\n    if a%59 == 0 {\n        return false\n    }\n    if a%61 ==\
    \ 0 {\n        return false\n    }\n    if a%67 == 0 {\n        return false\n\
    \    }\n    if a%71 == 0 {\n        return false\n    }\n    if a%73 == 0 {\n\
    \        return false\n    }\n    if a%79 == 0 {\n        return false\n    }\n\
    \    if a%83 == 0 {\n        return false\n    }\n    if a%89 == 0 {\n       \
    \ return false\n    }\n    if a%97 == 0 {\n        return false\n    }\n    if\
    \ a%101 == 0 {\n        return false\n    }\n    if a%107 == 0 {\n        return\
    \ false\n    }\n    if a%113 == 0 {\n        return false\n    }\n    if a%119\
    \ == 0 {\n        return false\n    }\n    if a%121 == 0 {\n        return false\n\
    \    }\n    if a%127 == 0 {\n        return false\n    }\n    if a%131 == 0 {\n\
    \        return false\n    }\n    if a%137 == 0 {\n        return false\n    }\n\
    \    if a%143 == 0 {\n        return false\n    }\n    if a%149 == 0 {\n     \
    \   return false\n    }\n    if a%151 == 0 {\n        return false\n    }\n  \
    \  if a%157 == 0 {\n        return false\n    }\n    if a%163 == 0 {\n       \
    \ return false\n    }\n    if a%169 == 0 {\n        return false\n    }\n    if\
    \ a%171 == 0 {\n        return false\n    }\n    if a%177 == 0 {\n        return\
    \ false\n    }\n    if a%183 == 0 {\n        return false\n    }\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6bsy892_test.go:149:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a >= 9 && a\
    \ < 99 {\n        return true\n    }\n    if a >= 99 && a < 999 {\n        return\
    \ true\n    }\n    if a >= 999 && a < 9999 {\n        return true\n    }\n   \
    \ if a >= 9999 && a < 99999 {\n        return true\n    }\n    if a >= 99999 &&\
    \ a < 999999 {\n        return true\n    }\n    if a >= 999999 && a < 9999999\
    \ {\n        return true\n    }\n    if a >= 9999999 && a < 99999999 {\n     \
    \   return true\n    }\n    if a >= 99999999 && a < 999999999 {\n        return\
    \ true\n    }\n    if a >= 999999999 && a < 99999999999 {\n        return true\n\
    \    }\n    if a >= 99999999999 && a < 999999999999 {\n        return true\n \
    \   }\n    if a >= 999999999999 && a < 9999999999999 {\n        return true\n\
    \    }\n    if a >= 9999999999999 && a < 99999999999999999 {\n        return true\n\
    \    }\n    if a >= 99999999999999999 && a < 999999999999999999999 {\n       \
    \ return true\n    }\n    if a >= 999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a >= 9999999999999999999999999 && a <\
    \ 99999999999999999999999999999 {\n        return true\n    }\n    if a >= 99999999999999999999999999999\
    \ && a < 999999999999999999999999999999999 {\n        return true\n    }\n   \
    \ if a >= 999999999999999999999999999999999 && a < 9999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a >= 9999999999999999999999999999999999999\
    \ && a < 9999999999999999999999999999999999999 {\n        return true\n    }\n\
    \    if a >= 9999999999999999999999999999999999999 && a < 9999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a >= 9999999999999999999999999999999999999\
    \ && a < 9999999999999999999999999999999999999 {\n        return true\n    }\n\
    \    if a >= 9999999999999999999999999999999999999 && a < 9999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a >= 9999999999999999999999999999999999999\
    \ && a < 9999999999999999999999999999999999999 {\n        return true\n    }\n\
    \    if a >= 9999999999999999999999999999999999999 && a < 9999999999999999999999999999999999999\
    \ {\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl0hjeij_test.go:92:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n\
    \        return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \n    if a == 42 {\n        return true\n\
    \    }\n    \n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_hlawck7_test.go:192:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 9 {\n        return false\n    }\n    if a%3 != 0 {\n       \
    \ return false\n    }\n    if a%3 == 0 {\n        if a%5 == 0 {\n            if\
    \ a%7 == 0 {\n                return true\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpq9jnldfg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpq9jnldfg_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpq9jnldfg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpq9jnldfg_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpq9jnldfg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        return false\n    }\n    if a > 64 {\n        return\
    \ false\n    }\n    if a > 180 {\n        return false\n    }\n    if a > 9 {\n\
    \        return false\n    }\n    if a > 6 {\n        return false\n    }\n  \
    \  if a > 3 {\n        return false\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a > 0 {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpmqb_15w__test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmqb_15w__test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpmqb_15w__test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpmqb_15w__test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a > 0 && a < 64 {\n\
    \        return true\n    }\n    if a == 0 {\n        return true\n    }\n   \
    \ if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyb40t4tp_test.go:173:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a > 0 && a < 9 {\n  \
    \      return true\n    }\n    if a > 9 && a < 99 {\n        return true\n   \
    \ }\n    if a > 99 && a < 999 {\n        return true\n    }\n    if a > 999 &&\
    \ a < 9999 {\n        return true\n    }\n    if a > 9999 && a < 99999 {\n   \
    \     return true\n    }\n    if a > 99999 && a < 999999 {\n        return true\n\
    \    }\n    if a > 999999 && a < 9999999 {\n        return true\n    }\n    if\
    \ a > 9999999 && a < 99999999 {\n        return true\n    }\n    if a > 99999999\
    \ && a < 999999999 {\n        return true\n    }\n    if a > 999999999 && a <\
    \ 9999999999 {\n        return true\n    }\n    if a > 9999999999 && a < 99999999999\
    \ {\n        return true\n    }\n    if a > 99999999999 && a < 999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n \
    \       return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n  \
    \      return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n   \
    \     return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n    \
    \    return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n     \
    \   return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n      \
    \  return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n       \
    \ return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n\
    \    }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n \
    \   }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n  \
    \  }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n   \
    \ }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n    }\n\
    \    if a > 999999999999 && a < 999999999999 {\n        return true\n    }\n \
    \   if a > 999999999999 && a < 999999999999 {\n        return true\n    }\n  \
    \  if a > 999999999999 && a < 999999999999 {\n        return \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7g7inb1d_test.go:108:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt424lltk_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a < 8 {\n        return\
    \ true\n    }\n    if a % 8 == 0 {\n        return true\n    }\n    if a % 8 ==\
    \ 1 {\n        return false\n    }\n    if a % 8 == 2 {\n        return true\n\
    \    }\n    if a % 8 == 3 {\n        return true\n    }\n    if a % 8 == 4 {\n\
    \        return true\n    }\n    if a % 8 == 5 {\n        return true\n    }\n\
    \    if a % 8 == 6 {\n        return true\n    }\n    if a % 8 == 7 {\n      \
    \  return true\n    }\n    if a % 8 == 8 {\n        return true\n    }\n    if\
    \ a % 8 == 9 {\n        return true\n    }\n    if a % 8 == 10 {\n        return\
    \ true\n    }\n    if a % 8 == 11 {\n        return true\n    }\n    if a % 8\
    \ == 12 {\n        return true\n    }\n    if a % 8 == 13 {\n        return true\n\
    \    }\n    if a % 8 == 14 {\n        return true\n    }\n    if a % 8 == 15 {\n\
    \        return true\n    }\n    if a % 8 == 16 {\n        return true\n    }\n\
    \    if a % 8 == 17 {\n        return true\n    }\n    if a % 8 == 18 {\n    \
    \    return true\n    }\n    if a % 8 == 19 {\n        return true\n    }\n  \
    \  if a % 8 == 20 {\n        return true\n    }\n    if a % 8 == 21 {\n      \
    \  return true\n    }\n    if a % 8 == 22 {\n        return true\n    }\n    if\
    \ a % 8 == 23 {\n        return true\n    }\n    if a % 8 == 24 {\n        return\
    \ true\n    }\n    if a % 8 == 25 {\n        return true\n    }\n    if a % 8\
    \ == 26 {\n        return true\n    }\n    if a % 8 == 27 {\n        return true\n\
    \    }\n    if a % 8 == 28 {\n        return true\n    }\n    if a % 8 == 29 {\n\
    \        return true\n    }\n    if a % 8 == 30 {\n        return true\n    }\n\
    \    if a % 8 == 31 {\n        return true\n    }\n    if a % 8 == 32 {\n    \
    \    return true\n    }\n    if a % 8 == 33 {\n        return true\n    }\n  \
    \  if a % 8 == 34 {\n        return true\n    }\n    if a % 8 == 35 {\n      \
    \  return true\n    }\n    if a % 8 == 36 {\n        return true\n    }\n    if\
    \ a % 8 == 37 {\n        return true\n    }\n    if a % 8 == \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoz8gwj7v_test.go:143:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a > 9 {\n        return false\n    }\n    \n    if a == 1 {\n\
    \        return true\n    }\n    \n    if a == 2 {\n        return true\n    }\n\
    \    \n    if a == 3 {\n        return true\n    }\n    \n    if a == 4 {\n  \
    \      return true\n    }\n    \n    if a == 5 {\n        return true\n    }\n\
    \    \n    if a == 6 {\n        return true\n    }\n    \n    if a == 7 {\n  \
    \      return true\n    }\n    \n    if a == 8 {\n        return true\n    }\n\
    \    \n    if a == 9 {\n        return true\n    }\n    \n    if a == 10 {\n \
    \       return true\n    }\n    \n    if a == 11 {\n        return true\n    }\n\
    \    \n    if a == 12 {\n        return true\n    }\n    \n    if a == 13 {\n\
    \        return true\n    }\n    \n    if a == 14 {\n        return true\n   \
    \ }\n    \n    if a == 15 {\n        return true\n    }\n    \n    if a == 16\
    \ {\n        return true\n    }\n    \n    if a == 17 {\n        return true\n\
    \    }\n    \n    if a == 18 {\n        return true\n    }\n    \n    if a ==\
    \ 19 {\n        return true\n    }\n    \n    if a == 20 {\n        return true\n\
    \    }\n    \n    if a == 21 {\n        return true\n    }\n    \n    if a ==\
    \ 22 {\n        return true\n    }\n    \n    if a == 23 {\n        return true\n\
    \    }\n    \n    if a == 24 {\n        return true\n    }\n    \n    if a ==\
    \ 25 {\n        return true\n    }\n    \n    if a == 26 {\n        return true\n\
    \    }\n    \n    if a == 27 {\n        return true\n    }\n    \n    if a ==\
    \ 28 {\n        return true\n    }\n    \n    if a == 29 {\n        return true\n\
    \    }\n    \n    if a == 30 {\n        return true\n    }\n    \n    if a ==\
    \ 31 {\n        return true\n    }\n    \n    if a == 32 {\n        return true\n\
    \    }\n    \n    if a == 33 {\n        return true\n    }\n    \n    if a ==\
    \ 34 {\n        return true\n    }\n    \n    if a == 35 {\n        return true\n\
    \    }\n    \n    if a == 36 {\n        return true\n    }\n    \n    if a ==\
    \ 37 {\n        return true\n    }\n    \n    if a == 38 {\n        return true\n\
    \    }\n    \n    if a == 39 {\n        return true\n    }\n    \n    if a ==\
    \ 40 {\n        return true\n    }\n    \n    if a == 41 {\n        return true\n\
    \    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv01t2sgb_test.go:191:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n\
    \        return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \n    if a == 42 {\n        return true\n\
    \    }\n    \n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_hlawck7_test.go:192:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a < 9 {\n        return\
    \ true\n    }\n    if a > 9 {\n        return false\n    }\n    if a < 36 {\n\
    \        return true\n    }\n    if a > 36 {\n        return false\n    }\n  \
    \  if a < 54 {\n        return true\n    }\n    if a > 54 {\n        return false\n\
    \    }\n    if a < 108 {\n        return true\n    }\n    if a > 108 {\n     \
    \   return false\n    }\n    if a < 216 {\n        return true\n    }\n    if\
    \ a > 216 {\n        return false\n    }\n    if a < 432 {\n        return true\n\
    \    }\n    if a > 432 {\n        return false\n    }\n    if a < 976 {\n    \
    \    return true\n    }\n    if a > 976 {\n        return false\n    }\n    if\
    \ a < 1920 {\n        return true\n    }\n    if a > 1920 {\n        return false\n\
    \    }\n    if a < 3840 {\n        return true\n    }\n    if a > 3840 {\n   \
    \     return false\n    }\n    if a < 5760 { \n        return true\n    }\n  \
    \  if a > 5760 { \n        return false\n    }\n    if a < 11520 {\n        return\
    \ true\n    }\n    if a > 11520 {\n        return false\n    }\n    if a < 23040\
    \ {\n        return true\n    }\n    if a > 23040 {\n        return false\n  \
    \  }\n    if a < 46080 {\n        return true\n    }\n    if a > 46080 {\n   \
    \     return false\n    }\n    if a < 90120 {\n        return true\n    }\n  \
    \  if a > 90120 {\n        return false\n    }\n    if a < 181480 {\n        return\
    \ true\n    }\n    if a > 181480 {\n        return false\n    }\n    if a < 362880\
    \ {\n        return true\n    }\n    if a > 362880 {\n        return false\n \
    \   }\n    if a < 563280 {\n        return true\n    }\n    if a > 563280 {\n\
    \        return false\n    }\n    if a < 1152000 {\n        return true\n    }\n\
    \    if a > 1152000 {\n        return false\n    }\n    if a < 2304000 {\n   \
    \     return true\n    }\n    if a > 2304000 {\n        return false\n    }\n\
    \    if a < 4608000 {\n        return true\n    }\n    if a > 4608000 {\n    \
    \    return false\n    }\n    if a < 9011200 {\n        return true\n    }\n \
    \   if a \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk5brdw85_test.go:149:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 || a == 2 ||\
    \ a == 3 || a == 6 || a == 9 || a == 18 {\n        return true\n    }\n    if\
    \ a == 4 || a == 5 || a == 7 || a == 11 || a == 16 || a == 21 || a == 26 || a\
    \ == 31 {\n        return true\n    }\n    if a == 8 || a == 10 || a == 13 ||\
    \ a == 17 || a == 20 || a == 24 || a == 28 || a == 32 {\n        return true\n\
    \    }\n    if a == 14 || a == 17 || a == 21 || a == 25 || a == 29 || a == 34\
    \ || a == 39 || a == 44 {\n        return true\n    }\n    if a == 16 || a ==\
    \ 20 || a == 24 || a == 28 || a == 32 || a == 37 || a == 42 || a == 47 {\n   \
    \     return true\n    }\n    if a == 18 || a == 23 || a == 27 || a == 31 || a\
    \ == 36 || a == 42 || a == 47 || a == 53 {\n        return true\n    }\n    if\
    \ a == 20 || a == 24 || a == 28 || a == 32 || a == 37 || a == 42 || a == 47 ||\
    \ a == 53 {\n        return true\n    }\n    if a == 24 || a == 28 || a == 32\
    \ || a == 37 || a == 42 || a == 47 || a == 53 {\n        return true\n    }\n\
    \    if a == 28 || a == 32 || a == 36 || a == 42 || a == 47 || a == 53 {\n   \
    \     return true\n    }\n    if a == 32 || a == 36 || a == 42 || a == 47 || a\
    \ == 53 {\n        return true\n    }\n    if a == 36 || a == 42 || a == 47 ||\
    \ a == 53 {\n        return true\n    }\n    if a == 42 || a == 47 || a == 53\
    \ {\n        return true\n    }\n    if a == 47 || a == 53 {\n        return true\n\
    \    }\n    if a == 53 {\n        return true\n    }\n    return false\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp_rpa8207_test.go:90: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_rpa8207_test.go:90:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_rpa8207_test.go:90: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_rpa8207_test.go:90:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_rpa8207_test.go:90: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 1 {\n        return true\n   \
    \ }\n    if a == 2 {\n        return false\n    }\n    if a == -1 {\n        return\
    \ true\n    }\n    if a == 64 {\n        return true\n    }\n    if a == 0 {\n\
    \        return true\n    }\n    if a == 180 {\n        return false\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmp4kwgwvvf_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa_7nucco_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a > 180 {\n        return false\n    }\n    \n    if a > 0 &&\
    \ a < 9 {\n        return true\n    }\n    \n    if a > 9 && a < 18 {\n      \
    \  return true\n    }\n    \n    if a > 18 && a < 27 {\n        return true\n\
    \    }\n    \n    if a > 27 && a < 36 {\n        return true\n    }\n    \n  \
    \  if a > 36 && a < 45 {\n        return true\n    }\n    \n    if a > 45 && a\
    \ < 54 {\n        return true\n    }\n    \n    if a > 54 && a < 63 {\n      \
    \  return true\n    }\n    \n    if a > 63 && a < 72 {\n        return true\n\
    \    }\n    \n    if a > 72 && a < 81 {\n        return true\n    }\n    \n  \
    \  if a > 81 && a < 90 {\n        return true\n    }\n    \n    if a > 90 && a\
    \ < 99 {\n        return true\n    }\n    \n    if a > 99 && a < 108 {\n     \
    \   return true\n    }\n    \n    if a > 108 && a < 117 {\n        return true\n\
    \    }\n    \n    if a > 117 && a < 126 {\n        return true\n    }\n    \n\
    \    if a > 126 && a < 135 {\n        return true\n    }\n    \n    if a > 135\
    \ && a < 144 {\n        return true\n    }\n    \n    if a > 144 && a < 153 {\n\
    \        return true\n    }\n    \n    if a > 153 && a < 162 {\n        return\
    \ true\n    }\n    \n    if a > 162 && a < 171 {\n        return true\n    }\n\
    \    \n    if a > 171 && a < 180 {\n        return true\n    }\n    \n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp0v_qxw_0_test.go:130: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp0v_qxw_0_test.go:130:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmp0v_qxw_0_test.go:130: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp0v_qxw_0_test.go:130:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a > 0 && a < 180 {\n\
    \        return true\n    }\n    if a > 180 && a < 64 {\n        return true\n\
    \    }\n    if a > 64 && a < 180 {\n        return true\n    }\n    if a > 180\
    \ && a < 64 {\n        return true\n    }\n    if a > 64 && a < 180 {\n      \
    \  return true\n    }\n    if a > 180 && a < 64 {\n        return true\n    }\n\
    \    if a > 64 && a < 180 {\n        return true\n    }\n    if a > 180 && a <\
    \ 64 {\n        return true\n    }\n    if a > 64 && a < 180 {\n        return\
    \ true\n    }\n    if a > 180 && a < 64 {\n        return true\n    }\n    if\
    \ a > 64 && a < 180 {\n        return true\n    }\n    if a > 180 && a < 64 {\n\
    \        return true\n    }\n    if a > 64 && a < 180 {\n        return true\n\
    \    }\n    if a > 180 && a < 64 {\n        return true\n    }\n    if a > 64\
    \ && a < 180 {\n        return true\n    }\n    if a > 180 && a < 64 {\n     \
    \   return true\n    }\n    if a > 64 && a < 180 {\n        return true\n    }\n\
    \    if a > 180 && a < 64 {\n        return true\n    }\n    if a > 64 && a <\
    \ 180 {\n        return true\n    }\n    if a > 180 && a < 64 {\n        return\
    \ true\n    }\n    if a > 64 && a < 180 {\n        return true\n    }\n    if\
    \ a > 180 && a < 64 {\n        return true\n    }\n    if a > 64 && a < 180 {\n\
    \        return true\n    }\n    if a > 180 && a < 64 {\n        return true\n\
    \    }\n    if a > 64 && a < 180 {\n        return true\n    }\n    if a > 180\
    \ && a < 64 {\n        return true\n    }\n    if a > 64 && a < 180 {\n      \
    \  return true\n    }\n    if a > 180 && a < 64 {\n        return true\n    }\n\
    \    if a > 64 && a < 180 {\n        return true\n    }\n    if a > 180 && a <\
    \ 64 {\n        return true\n    }\n    if a > 64 && a < 180 {\n        return\
    \ true\n    }\n    if a > 180 && a < 64 {\n        return true\n    }\n    if\
    \ a > 64 && a < 180 {\n        return true\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjxbevdlh_test.go:123:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a > 9 {\n        return false\n    }\n    \n    if a == 1 {\n\
    \        return true\n    }\n    \n    if a == 2 {\n        return true\n    }\n\
    \    \n    if a == 3 {\n        return true\n    }\n    \n    if a == 4 {\n  \
    \      return true\n    }\n    \n    if a == 5 {\n        return true\n    }\n\
    \    \n    if a == 6 {\n        return true\n    }\n    \n    if a == 7 {\n  \
    \      return true\n    }\n    \n    if a == 8 {\n        return true\n    }\n\
    \    \n    if a == 9 {\n        return true\n    }\n    \n    if a == 10 {\n \
    \       return true\n    }\n    \n    if a == 11 {\n        return true\n    }\n\
    \    \n    if a == 12 {\n        return true\n    }\n    \n    if a == 13 {\n\
    \        return true\n    }\n    \n    if a == 14 {\n        return true\n   \
    \ }\n    \n    if a == 15 {\n        return true\n    }\n    \n    if a == 16\
    \ {\n        return true\n    }\n    \n    if a == 17 {\n        return true\n\
    \    }\n    \n    if a == 18 {\n        return true\n    }\n    \n    if a ==\
    \ 19 {\n        return true\n    }\n    \n    if a == 20 {\n        return true\n\
    \    }\n    \n    if a == 21 {\n        return true\n    }\n    \n    if a ==\
    \ 22 {\n        return true\n    }\n    \n    if a == 23 {\n        return true\n\
    \    }\n    \n    if a == 24 {\n        return true\n    }\n    \n    if a ==\
    \ 25 {\n        return true\n    }\n    \n    if a == 26 {\n        return true\n\
    \    }\n    \n    if a == 27 {\n        return true\n    }\n    \n    if a ==\
    \ 28 {\n        return true\n    }\n    \n    if a == 29 {\n        return true\n\
    \    }\n    \n    if a == 30 {\n        return true\n    }\n    \n    if a ==\
    \ 31 {\n        return true\n    }\n    \n    if a == 32 {\n        return true\n\
    \    }\n    \n    if a == 33 {\n        return true\n    }\n    \n    if a ==\
    \ 34 {\n        return true\n    }\n    \n    if a == 35 {\n        return true\n\
    \    }\n    \n    if a == 36 {\n        return true\n    }\n    \n    if a ==\
    \ 37 {\n        return true\n    }\n    \n    if a == 38 {\n        return true\n\
    \    }\n    \n    if a == 39 {\n        return true\n    }\n    \n    if a ==\
    \ 40 {\n        return true\n    }\n    \n    if a == 41 {\n        return true\n\
    \    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv01t2sgb_test.go:191:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    \n    if a > 0 && a < 9 {\n        return true\n    }\n    \n    if\
    \ a > 9 && a < 99 {\n        return true\n    }\n    \n    if a > 99 && a < 999\
    \ {\n        return true\n    }\n    \n    if a > 999 && a < 9999 {\n        return\
    \ true\n    }\n    \n    if a > 9999 && a < 99999 {\n        return true\n   \
    \ }\n    \n    if a > 99999 && a < 999999 {\n        return true\n    }\n    \n\
    \    if a > 999999 && a < 9999999 {\n        return true\n    }\n    \n    if\
    \ a > 9999999 && a < 999999999 {\n        return true\n    }\n    \n    if a >\
    \ 999999999 && a < 99999999999 {\n        return true\n    }\n    \n    if a >\
    \ 99999999999 && a < 9999999999999 {\n        return true\n    }\n    \n    if\
    \ a > 9999999999999 && a < 999999999999999 {\n        return true\n    }\n   \
    \ \n    if a > 999999999999999 && a < 9999999999999 {\n        return true\n \
    \   }\n    \n    if a > 9999999999999 && a < 999999999999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999 {\n     \
    \   return true\n    }\n    \n    if a > 9999999999999 && a < 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a < 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a < 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a < 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a < 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 99999999\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1z6lk1_4_test.go:124:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a <\
    \ 99 {\n        return true\n    }\n    if a > 99 && a < 999 {\n        return\
    \ true\n    }\n    if a > 999 && a < 9999 {\n        return true\n    }\n    if\
    \ a > 9999 && a < 99999 {\n        return true\n    }\n    if a > 99999 && a <\
    \ 999999 {\n        return true\n    }\n    if a > 999999 && a < 9999999 {\n \
    \       return true\n    }\n    if a > 9999999 && a < 99999999 {\n        return\
    \ true\n    }\n    if a > 99999999 && a < 999999999 {\n        return true\n \
    \   }\n    if a > 999999999 && a < 9999999999 {\n        return true\n    }\n\
    \    if a > 9999999999 && a < 99999999999 {\n        return true\n    }\n    if\
    \ a > 99999999999 && a < 999999999999 {\n        return true\n    }\n    if a\
    \ > 999999999999 && a < 999999999999 {\n        return true\n    }\n    if a >\
    \ 999999999999 && a < 999999999999 {\n        return true\n    }\n    if a > 999999999999\
    \ && a < 999999999999 {\n        return true\n    }\n    if a > 999999999999 &&\
    \ a < 999999999999 {\n        return true\n    }\n    if a > 999999999999 && a\
    \ < 999999999999 {\n        return true\n    }\n    if a > 999999999999 && a <\
    \ 999999999999 {\n        return true\n    }\n    if a > 999999999999 && a < 999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n \
    \       return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n  \
    \      return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n   \
    \     return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n    \
    \    return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n     \
    \   return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n      \
    \  return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n       \
    \ return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n        return\
    \ true\n    }\n    if a > 99999999\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmv2odu2h_test.go:107:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a == 1 {\n        return true\n    }\n    \n    if a > 1 &&\
    \ a < 6 {\n        return true\n    }\n    \n    if a == 6 {\n        return true\n\
    \    }\n    \n    if a > 6 && a < 9 {\n        return true\n    }\n    \n    if\
    \ a == 9 {\n        return true\n    }\n    \n    if a > 9 && a < 18 {\n     \
    \   return true\n    }\n    \n    if a == 18 {\n        return true\n    }\n \
    \   \n    if a > 18 && a < 36 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a > 36 && a < 54 {\n        return\
    \ true\n    }\n    \n    if a == 54 {\n        return true\n    }\n    \n    if\
    \ a > 54 && a < 108 {\n        return true\n    }\n    \n    if a == 108 {\n \
    \       return true\n    }\n    \n    if a > 108 && a < 216 {\n        return\
    \ true\n    }\n    \n    if a == 216 {\n        return true\n    }\n    \n   \
    \ if a > 216 && a < 432 {\n        return true\n    }\n    \n    if a == 432 {\n\
    \        return true\n    }\n    \n    if a > 432 && a < 8640 {\n        return\
    \ true\n    }\n    \n    if a == 8640 {\n        return true\n    }\n    \n  \
    \  if a > 8640 && a < 172880 {\n        return true\n    }\n    \n    if a ==\
    \ 172880 {\n        return true\n    }\n    \n    if a > 172880 && a < 345600\
    \ {\n        return true\n    }\n    \n    if a == 345600 {\n        return true\n\
    \    }\n    \n    if a > 345600 && a < 5242880 {\n        return true\n    }\n\
    \    \n    if a == 5242880 {\n        return true\n    }\n    \n    if a > 5242880\
    \ && a < 10485760 {\n        return true\n    }\n    \n    if a == 10485760 {\n\
    \        return true\n    }\n    \n    if a > 10485760 && a < 209715200 {\n  \
    \      return true\n    }\n    \n    if a == 209715200 {\n        return true\n\
    \    }\n    \n    if a > 209715200 && a < 4294967296 {\n        return true\n\
    \    }\n    \n    if a == 4294967296 {\n        return true\n    }\n    \n   \
    \ if a > 4294967296 {\n        return false\n    }\n    \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9j6md2qt_test.go:151:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa_7nucco_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a <= 6 {\n        return\
    \ true\n    }\n    if a <= 9 {\n        return true\n    }\n    if a <= 18 {\n\
    \        return true\n    }\n    if a <= 36 {\n        return true\n    }\n  \
    \  if a <= 54 {\n        return true\n    }\n    if a <= 90 {\n        return\
    \ true\n    }\n    if a <= 180 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp6zfl9w6t_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp6zfl9w6t_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4\
    \ (0.00s)\n        tmp6zfl9w6t_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp6zfl9w6t_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n\
    \        return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \n    if a == 42 {\n        return true\n\
    \    }\n    \n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_hlawck7_test.go:192:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 1 {\n        return true\n   \
    \ }\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 180 {\n        return false\n    }\n    if a > 64 {\n\
    \        return false\n    }\n    if a > 2 {\n        return false\n    }\n  \
    \  if a > 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpjsm_9l00_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjsm_9l00_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpjsm_9l00_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjsm_9l00_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    x := a\n    y := a\n    z := a\n    \n    i := 0\n    \n    for\
    \ {\n        if x%i == 0 {\n            if y%i == 0 {\n                if z%i\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n        \n        i++\n    }\n}\n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\npanic: runtime error: integer divide by zero\
    \ [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\n\
    testing.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.iscube(...)\n\t/tmp/tmpiep3vg5j_test.go:30\n\
    command-line-arguments_test.TestIscube(0x0?)\n\t/tmp/tmpiep3vg5j_test.go:49 +0x414\n\
    testing.tRunner(0xc0001a0340, 0x527f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a > 9 && a\
    \ <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n        return\
    \ true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n    }\n   \
    \ if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a > 99999 &&\
    \ a <= 999999 {\n        return true\n    }\n    if a > 999999 && a <= 9999999\
    \ {\n        return true\n    }\n    if a > 9999999 && a <= 999999999 {\n    \
    \    return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n        return\
    \ true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999 && a <= 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999 && a <= 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999 && a <= 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999 && a <= 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999 && a <= 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999 && a <= 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999 && a <= 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999 && a <= 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999 && a <= 9999999999999 {\n        return\
    \ true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yn_9l8m_test.go:107:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a > 9 {\n        return false\n    }\n    \n    if a == 1 {\n\
    \        return true\n    }\n    \n    if a == 2 {\n        return true\n    }\n\
    \    \n    if a == 3 {\n        return true\n    }\n    \n    if a == 4 {\n  \
    \      return true\n    }\n    \n    if a == 5 {\n        return true\n    }\n\
    \    \n    if a == 6 {\n        return true\n    }\n    \n    if a == 7 {\n  \
    \      return true\n    }\n    \n    if a == 8 {\n        return true\n    }\n\
    \    \n    if a == 9 {\n        return true\n    }\n    \n    if a == 10 {\n \
    \       return true\n    }\n    \n    if a == 11 {\n        return true\n    }\n\
    \    \n    if a == 12 {\n        return true\n    }\n    \n    if a == 13 {\n\
    \        return true\n    }\n    \n    if a == 14 {\n        return true\n   \
    \ }\n    \n    if a == 15 {\n        return true\n    }\n    \n    if a == 16\
    \ {\n        return true\n    }\n    \n    if a == 17 {\n        return true\n\
    \    }\n    \n    if a == 18 {\n        return true\n    }\n    \n    if a ==\
    \ 19 {\n        return true\n    }\n    \n    if a == 20 {\n        return true\n\
    \    }\n    \n    if a == 21 {\n        return true\n    }\n    \n    if a ==\
    \ 22 {\n        return true\n    }\n    \n    if a == 23 {\n        return true\n\
    \    }\n    \n    if a == 24 {\n        return true\n    }\n    \n    if a ==\
    \ 25 {\n        return true\n    }\n    \n    if a == 26 {\n        return true\n\
    \    }\n    \n    if a == 27 {\n        return true\n    }\n    \n    if a ==\
    \ 28 {\n        return true\n    }\n    \n    if a == 29 {\n        return true\n\
    \    }\n    \n    if a == 30 {\n        return true\n    }\n    \n    if a ==\
    \ 31 {\n        return true\n    }\n    \n    if a == 32 {\n        return true\n\
    \    }\n    \n    if a == 33 {\n        return true\n    }\n    \n    if a ==\
    \ 34 {\n        return true\n    }\n    \n    if a == 35 {\n        return true\n\
    \    }\n    \n    if a == 36 {\n        return true\n    }\n    \n    if a ==\
    \ 37 {\n        return true\n    }\n    \n    if a == 38 {\n        return true\n\
    \    }\n    \n    if a == 39 {\n        return true\n    }\n    \n    if a ==\
    \ 40 {\n        return true\n    }\n    \n    if a == 41 {\n        return true\n\
    \    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv01t2sgb_test.go:191:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a%8 == 0 {\n       \
    \ return true\n    }\n    if a%8 == 1 {\n        return false\n    }\n    if a%8\
    \ == 2 {\n        return true\n    }\n    if a%8 == 3 {\n        return false\n\
    \    }\n    if a%8 == 4 {\n        return true\n    }\n    if a%8 == 5 {\n   \
    \     return false\n    }\n    if a%8 == 6 {\n        return true\n    }\n   \
    \ if a%8 == 7 {\n        return false\n    }\n    if a%8 == 8 {\n        return\
    \ true\n    }\n    if a%8 == 9 {\n        return false\n    }\n    if a%8 == 10\
    \ {\n        return true\n    }\n    if a%8 == 11 {\n        return false\n  \
    \  }\n    if a%8 == 12 {\n        return true\n    }\n    if a%8 == 13 {\n   \
    \     return false\n    }\n    if a%8 == 14 {\n        return true\n    }\n  \
    \  if a%8 == 15 {\n        return false\n    }\n    if a%8 == 16 {\n        return\
    \ true\n    }\n    if a%8 == 17 {\n        return false\n    }\n    if a%8 ==\
    \ 18 {\n        return true\n    }\n    if a%8 == 19 {\n        return false\n\
    \    }\n    if a%8 == 20 {\n        return true\n    }\n    if a%8 == 21 {\n \
    \       return false\n    }\n    if a%8 == 22 {\n        return true\n    }\n\
    \    if a%8 == 23 {\n        return false\n    }\n    if a%8 == 24 {\n       \
    \ return true\n    }\n    if a%8 == 25 {\n        return false\n    }\n    if\
    \ a%8 == 26 {\n        return true\n    }\n    if a%8 == 27 {\n        return\
    \ false\n    }\n    if a%8 == 28 {\n        return true\n    }\n    if a%8 ==\
    \ 29 {\n        return false\n    }\n    if a%8 == 30 {\n        return true\n\
    \    }\n    if a%8 == 31 {\n        return false\n    }\n    if a%8 == 32 {\n\
    \        return true\n    }\n    if a%8 == 33 {\n        return false\n    }\n\
    \    if a%8 == 34 {\n        return true\n    }\n    if a%8 == 35 {\n        return\
    \ false\n    }\n    if a%8 == 36 {\n        return true\n    }\n    if a%8 ==\
    \ 37 {\n        return false\n    }\n    if a%8 == 38 {\n        return true\n\
    \    }\n    if a%\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphbcom2bu_test.go:143:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n\
    \        return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \n    if a == 42 {\n        return true\n\
    \    }\n    \n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_hlawck7_test.go:192:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 100 {\n        return false\n    }\n    if a > 1000 {\n     \
    \   return false\n    }\n    if a > 10000 {\n        return false\n    }\n   \
    \ if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n       \
    \ return false\n    }\n    if a > 10000000 {\n        return false\n    }\n  \
    \  if a > 100000000 {\n        return false\n    }\n    if a > 1000000000 {\n\
    \        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5dskuoll_test.go:138:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n\
    \        return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \n    if a == 42 {\n        return true\n\
    \    }\n    \n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_hlawck7_test.go:192:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 || a == 3 ||\
    \ a == 5 || a == 7 || a == 9 || a == 11 || a == 13 || a == 15 || a == 17 || a\
    \ == 19 || a == 21 || a == 23 || a == 25 || a == 27 || a == 29 || a == 31 || a\
    \ == 33 || a == 35 || a == 37 || a == 39 || a == 41 || a == 43 || a == 45 || a\
    \ == 47 || a == 49 || a == 51 || a == 53 || a == 55 || a == 57 || a == 59 || a\
    \ == 61 || a == 63 || a == 65 || a == 67 || a == 69 || a == 71 || a == 73 || a\
    \ == 75 || a == 77 || a == 79 || a == 81 || a == 83 || a == 85 || a == 87 || a\
    \ == 89 || a == 91 || a == 93 || a == 95 || a == 97 || a == 99 || a == 101 ||\
    \ a == 103 || a == 105 || a == 107 || a == 109 || a == 111 || a == 113 || a ==\
    \ 115 || a == 117 || a == 119 ||\n        a == 121 || a == 123 || a == 125 ||\
    \ a == 127 || a == 129 ||\n        a == 131 || a == 133 || a == 135 || a == 137\
    \ || a == 139 ||\n        a == 141 || a == 143 || a == 145 || a == 147 || a ==\
    \ 149 ||\n        a == 151 || a == 153 || a == 155 || a == 157 || a == 159 ||\n\
    \        a == 161 || a == 163 || a == 165 || a == 167 || a == 169 ||\n       \
    \ a == 171 || a == 173 || a == 175 || a == 177 || a == 179 ||\n        a == 181\
    \ || a == 183 || a == 185 || a == 187 || a == 189 ||\n        a == 191 || a ==\
    \ 193 || a == 195 || a == 197 || a == 199 ||\n        a == 201 || a == 203 ||\
    \ a == 205 || a == 207 || a == 209 ||\n        a == 211 || a == 213 || a == 215\
    \ || a == 217 || a == 219 ||\n        a == 221 || a == 223 || a == 225 || a ==\
    \ 227 || a == 229 ||\n        a == 231 || a == 233 || a == 235 || a == 237 ||\
    \ a == 239 ||\n        a == 241 || a == 243 || a == 245 || a == 247 || a == 249\
    \ ||\n        a == 251 || a == 253 || a == 255 || a == 257 || a == 259 ||\n  \
    \      a == 261 || a == 263 || a == 265 || a == 267\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppo0awvku_test.go:41:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a == 1 {\n        return true\n    }\n    \n    if a > 1 &&\
    \ a < 6 {\n        return true\n    }\n    \n    if a == 6 {\n        return true\n\
    \    }\n    \n    if a == 9 {\n        return true\n    }\n    \n    if a == 180\
    \ {\n        return true\n    }\n    \n    if a == 360 {\n        return true\n\
    \    }\n    \n    if a == 720 {\n        return true\n    }\n    \n    if a ==\
    \ 1440 {\n        return true\n    }\n    \n    if a == 2880 {\n        return\
    \ true\n    }\n    \n    if a == 5760{\n        return true\n    }\n    \n   \
    \ if a == 11360{\n        return true\n    }\n    \n    if a == 17280{\n     \
    \   return true\n    }\n    \n    if a == 25200{\n        return true\n    }\n\
    \    \n    if a == 31520{\n        return true\n    }\n    \n    if a == 37280{\n\
    \        return true\n    }\n    \n    if a == 43480{\n        return true\n \
    \   }\n    \n    if a == 49600{\n        return true\n    }\n    \n    if a ==\
    \ 56480{\n        return true\n    }\n    \n    if a == 63200{\n        return\
    \ true\n    }\n    \n    if a == 69200{\n        return true\n    }\n    \n  \
    \  if a == 76000{\n        return true\n    }\n    \n    if a == 82800{\n    \
    \    return true\n    }\n    \n    if a == 89600{\n        return true\n    }\n\
    \    \n    if a == 96400{\n        return true\n    }\n    \n    if a == 102800{\n\
    \        return true\n    }\n    \n    if a == 109600{\n        return true\n\
    \    }\n    \n    if a == 116000{\n        return true\n    }\n    \n    if a\
    \ == 122000{\n        return true\n    }\n    \n    if a == 128000{\n        return\
    \ true\n    }\n    \n    if a == 134400{\n        return true\n    }\n    \n \
    \   if a == 140800{\n        return true\n    }\n    \n    if a == 147600{\n \
    \       return true\n    }\n    \n    if a == 153600{\n        return true\n \
    \   }\n    \n    if a == 159600{\n        return true\n    }\n    \n    if a ==\
    \ 166400{\n        return true\n    }\n    \n    if a == 172800{\n        return\
    \ true\n    }\n    \n    if a == 179600{\n        return true\n    }\n    \n \
    \   if a == 186400{\n        return true\n    }\n    \n    if a == \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkpo3s6mn_test.go:176:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    \n    if a > 0 && a <= 9 {\n        return true\n    }\n    \n    if\
    \ a > 9 && a <= 99 {\n        return true\n    }\n    \n    if a > 99 && a <=\
    \ 999 {\n        return true\n    }\n    \n    if a > 999 && a <= 9999 {\n   \
    \     return true\n    }\n    \n    if a > 9999 && a <= 99999 {\n        return\
    \ true\n    }\n    \n    if a > 99999 && a <= 999999 {\n        return true\n\
    \    }\n    \n    if a > 999999 && a <= 9999999 {\n        return true\n    }\n\
    \    \n    if a > 9999999 && a <= 999999999 {\n        return true\n    }\n  \
    \  \n    if a > 999999999 && a <= 99999999999 {\n        return true\n    }\n\
    \    \n    if a > 99999999999 && a <= 9999999999999 {\n        return true\n \
    \   }\n    \n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999 {\n    \
    \    return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwllm0uvs_test.go:124:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a > 0 && a < 180 {\n\
    \        return true\n    }\n    if a == 0 || a == 180 {\n        return true\n\
    \    }\n    if a % 3 == 0 && a % 5 == 0 {\n        return true\n    }\n    if\
    \ a % 3 == 0 && a % 5 == 1 {\n        return false\n    }\n    if a % 3 == 1 &&\
    \ a % 5 == 0 {\n        return false\n    }\n    if a % 3 == 1 && a % 5 == 1 {\n\
    \        return true\n    }\n    if a % 3 == 2 && a % 5 == 0 {\n        return\
    \ false\n    }\n    if a % 3 == 2 && a % 5 == 1 {\n        return true\n    }\n\
    \    if a % 3 == 3 && a % 5 == 0 {\n        return false\n    }\n    if a % 3\
    \ == 3 && a % 5 == 1 {\n        return true\n    }\n    if a % 3 == 4 && a % 5\
    \ == 0 {\n        return false\n    }\n    if a % 3 == 4 && a % 5 == 1 {\n   \
    \     return true\n    }\n    if a % 3 == 5 && a % 5 == 0 {\n        return false\n\
    \    }\n    if a % 3 == 5 && a % 5 == 1 {\n        return true\n    }\n    if\
    \ a % 3 == 6 && a % 5 == 0 {\n        return false\n    }\n    if a % 3 == 6 &&\
    \ a % 5 == 1 {\n        return true\n    }\n    if a % 3 == 7 && a % 5 == 0 {\n\
    \        return false\n    }\n    if a % 3 == 7 && a % 5 == 1 {\n        return\
    \ true\n    }\n    if a % 3 == 8 && a % 5 == 0 {\n        return false\n    }\n\
    \    if a % 3 == 8 && a % 5 == 1 {\n        return true\n    }\n    if a % 3 ==\
    \ 9 && a % 5 == 0 {\n        return false\n    }\n    if a % 3 == 9 && a % 5 ==\
    \ 1 {\n        return true\n    }\n    if a % 3 == 10 && a % 5 == 0 {\n      \
    \  return false\n    }\n    if a % 3 == 10 && a % 5 == 1 {\n        return true\n\
    \    }\n    if a % 3 == 11 && a % 5 == 0 {\n        return false\n    }\n    if\
    \ a % 3 == 11 && a % 5 == 1 {\n        return true\n    }\n    if a % 3 == 12\
    \ && a % 5 == 0 {\n        return false\n    }\n    if a % 3 == 12 && a % 5 ==\
    \ 1 {\n        return true\n    }\n    if a % 3 == 13 && a % 5 == 0 {\n      \
    \  return false\n    }\n    if a % 3 == 13 && a % 5 == 1 {\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pcxrxaf_test.go:114:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa_7nucco_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a <\
    \ 99 {\n        return true\n    }\n    if a > 99 && a < 999 {\n        return\
    \ true\n    }\n    if a > 999 && a < 9999 {\n        return true\n    }\n    if\
    \ a > 9999 && a < 99999 {\n        return true\n    }\n    if a > 99999 && a <\
    \ 999999 {\n        return true\n    }\n    if a > 999999 && a < 9999999 {\n \
    \       return true\n    }\n    if a > 9999999 && a < 999999999 {\n        return\
    \ true\n    }\n    if a > 999999999 && a < 99999999999 {\n        return true\n\
    \    }\n    if a > 99999999999 && a < 999999999999999 {\n        return true\n\
    \    }\n    if a > 999999999999999 && a < 9999999999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999999999 && a < 99999999999999999999999 {\n\
    \        return true\n    }\n    if a > 99999999999999999999999 && a < 999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999 && a <\
    \ 9999999999999999999999999999999 {\n        return true\n    }\n    if a > 9999999999999999999999999999999\
    \ && a < 99999999999999999999999999999999999 {\n        return true\n    }\n \
    \   if a > 99999999999999999999999999999999999 && a < 999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999999999999999\
    \ && a < 9999999999999999999999999999999999999999999 {\n        return true\n\
    \    }\n    if a > 9999999999999999999999999999999999999999999 && a < 99999999999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999999999999999999999999999\
    \ && a < 99999999999999999999999999999999999999999999999 {\n        return true\n\
    \    }\n    if a > 99999999999999999999999999999999999999999999999 && a < 999999999999999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999999999999999999999999999\
    \ && a < 999999999999999999999999999999999999999999999999999 {\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgidrofd9_test.go:84:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n\
    \        return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \n    if a == 42 {\n        return true\n\
    \    }\n    \n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_hlawck7_test.go:192:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 100 {\n        return false\n    }\n    if a > 1000 {\n     \
    \   return false\n    }\n    if a > 10000 {\n        return false\n    }\n   \
    \ if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n       \
    \ return false\n    }\n    if a > 10000000 {\n        return false\n    }\n  \
    \  if a > 100000000 {\n        return false\n    }\n    if a > 1000000000 {\n\
    \        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5dskuoll_test.go:138:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    switch {\n    case a == 1:\n        return true\n    case a ==\
    \ 2:\n        return true\n    case a == 3:\n        return true\n    case a ==\
    \ 4:\n        return true\n    case a == 5:\n        return true\n    case a ==\
    \ 6:\n        return true\n    case a == 7:\n        return true\n    case a ==\
    \ 8:\n        return true\n    case a == 9:\n        return true\n    case a ==\
    \ 10:\n        return true\n    case a == 11:\n        return true\n    case a\
    \ == 12:\n        return true\n    case a == 13:\n        return true\n    case\
    \ a == 14:\n        return true\n    case a == 15:\n        return true\n    case\
    \ a == 16:\n        return true\n    case a == 17:\n        return true\n    case\
    \ a == 18:\n        return true\n    case a == 19:\n        return true\n    case\
    \ a == 20:\n        return true\n    case a == 21:\n        return true\n    case\
    \ a == 22:\n        return true\n    case a == 23:\n        return true\n    case\
    \ a == 24:\n        return true\n    case a == 25:\n        return true\n    case\
    \ a == 26:\n        return true\n    case a == 27:\n        return true\n    case\
    \ a == 28:\n        return true\n    case a == 29:\n        return true\n    case\
    \ a == 30:\n        return true\n    case a == 31:\n        return true\n    case\
    \ a == 32:\n        return true\n    case a == 33:\n        return true\n    case\
    \ a == 34:\n        return true\n    case a == 35:\n        return true\n    case\
    \ a == 36:\n        return true\n    case a == 37:\n        return true\n    case\
    \ a == 38:\n        return true\n    case a == 39:\n        return true\n    case\
    \ a == 40:\n        return true\n    case a == 41:\n        return true\n    case\
    \ a == 42:\n        return true\n    case a == 43:\n        return true\n    case\
    \ a == 44:\n        return true\n    case a == 45:\n        return true\n    case\
    \ a == 46:\n        return true\n    case a == 47:\n        return true\n    case\
    \ a == 48:\n        return true\n    case a == 49:\n        return true\n    case\
    \ a == 50:\n        return true\n    case a == 51:\n        return true\n    case\
    \ a == 52:\n        return true\n    case a == 53:\n        return true\n    case\
    \ a == 54:\n        return true\n    case a == 55:\n        return true\n    case\
    \ a == 56:\n        return true\n    case a == 57:\n        return true\n    case\
    \ a == 58:\n        return true\n    case a == 59:\n        return true\n    case\
    \ a == 60:\n        return true\n    case a == 61:\n        return true\n    case\
    \ a == 62:\n        return true\n    case a == 63:\n        return true\n    case\
    \ a == 64:\n        return true\n    case a == 65:\n        return true\n    case\
    \ a == \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptoe391j4_test.go:155:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    \n    if a > 0 && a <= 9 {\n        return true\n    }\n    \n    if\
    \ a > 9 && a <= 99 {\n        return true\n    }\n    \n    if a > 99 && a <=\
    \ 999 {\n        return true\n    }\n    \n    if a > 999 && a <= 9999 {\n   \
    \     return true\n    }\n    \n    if a > 9999 && a <= 99999 {\n        return\
    \ true\n    }\n    \n    if a > 99999 && a <= 999999 {\n        return true\n\
    \    }\n    \n    if a > 999999 && a <= 9999999 {\n        return true\n    }\n\
    \    \n    if a > 9999999 && a <= 999999999 {\n        return true\n    }\n  \
    \  \n    if a > 999999999 && a <= 99999999999 {\n        return true\n    }\n\
    \    \n    if a > 99999999999 && a <= 9999999999999 {\n        return true\n \
    \   }\n    \n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999 {\n    \
    \    return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwllm0uvs_test.go:124:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a > 0 && a < 9 {\n  \
    \      return true\n    }\n    if a > 9 && a < 99 {\n        return true\n   \
    \ }\n    if a > 99 && a < 999 {\n        return true\n    }\n    if a > 999 &&\
    \ a < 9999 {\n        return true\n    }\n    if a > 9999 && a < 99999 {\n   \
    \     return true\n    }\n    if a > 99999 && a < 999999 {\n        return true\n\
    \    }\n    if a > 999999 && a < 9999999 {\n        return true\n    }\n    if\
    \ a > 9999999 && a < 99999999 {\n        return true\n    }\n    if a > 99999999\
    \ && a < 999999999 {\n        return true\n    }\n    if a > 999999999 && a <\
    \ 9999999999 {\n        return true\n    }\n    if a > 9999999999 && a < 99999999999\
    \ {\n        return true\n    }\n    if a > 99999999999 && a < 999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 9999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a < 9999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a < 99999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a < 99999999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a < 999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a < 999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999 && a <\
    \ 9999999999999 {\n        return true\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_gwgmn6x_test.go:106:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 1 {\n        return true\n   \
    \ }\n    if a == 2 {\n        return false\n    }\n    if a == 3 {\n        return\
    \ true\n    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n\
    \        return true\n    }\n    if a == 6 {\n        return true\n    }\n   \
    \ if a == 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n\
    \    }\n    if a == 9 {\n        return true\n    }\n    if a == 10 {\n      \
    \  return true\n    }\n    if a == 11 {\n        return true\n    }\n    if a\
    \ == 12 {\n        return true\n    }\n    if a == 13 {\n        return true\n\
    \    }\n    if a == 14 {\n        return true\n    }\n    if a == 15 {\n     \
    \   return true\n    }\n    if a == 16 {\n        return true\n    }\n    if a\
    \ == 17 {\n        return true\n    }\n    if a == 18 {\n        return true\n\
    \    }\n    if a == 19 {\n        return true\n    }\n    if a == 20 {\n     \
    \   return true\n    }\n    if a == 21 {\n        return true\n    }\n    if a\
    \ == 22 {\n        return true\n    }\n    if a == 23 {\n        return true\n\
    \    }\n    if a == 24 {\n        return true\n    }\n    if a == 25 {\n     \
    \   return true\n    }\n    if a == 26 {\n        return true\n    }\n    if a\
    \ == 27 {\n        return true\n    }\n    if a == 28 {\n        return true\n\
    \    }\n    if a == 29 {\n        return true\n    }\n    if a == 30 {\n     \
    \   return true\n    }\n    if a == 31 {\n        return true\n    }\n    if a\
    \ == 32 {\n        return true\n    }\n    if a == 33 {\n        return true\n\
    \    }\n    if a == 34 {\n        return true\n    }\n    if a == 35 {\n     \
    \   return true\n    }\n    if a == 36 {\n        return true\n    }\n    if a\
    \ == 37 {\n        return true\n    }\n    if a == 38 {\n        return true\n\
    \    }\n    if a == 39 {\n        return true\n    }\n    if a == 40 {\n     \
    \   return true\n    }\n    if a == 41 {\n        return true\n    }\n    if a\
    \ == 42 {\n        return true\n    }\n    if a == 43 {\n        return true\n\
    \    }\n    if a == 44 {\n        return true\n    }\n    if a == 45 {\n     \
    \   return true\n    }\n    if a == 46 {\n        return true\n    }\n    if a\
    \ == 47 {\n        return true\n    }\n    if a == 48 {\n        return true\n\
    \    }\n    if a == 49 {\n        return true\n    }\n    if a == 50 {\n     \
    \   return true\n    }\n    if a == 51 {\n        return true\n    }\n    if a\
    \ == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk97q1jzd_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a > 0 && a < 180 {\n\
    \        return true\n    }\n    if a > 180 && a < 360 {\n        return true\n\
    \    }\n    if a > 360 && a < 540 {\n        return true\n    }\n    if a > 540\
    \ && a < 720 {\n        return true\n    }\n    if a > 720 && a < 1080 {\n   \
    \     return true\n    }\n    if a > 1080 && a < 2160 {\n        return true\n\
    \    }\n    if a > 2160 && a < 4320 {\n        return true\n    }\n    if a >\
    \ 4320 && a < 8640 {\n        return true\n    }\n    if a > 8640 && a < 17280\
    \ {\n        return true\n    }\n    if a > 17280 && a < 35280 {\n        return\
    \ true\n    }\n    if a > 35280 && a < 53280 {\n        return true\n    }\n \
    \   if a > 53280 && a < 72480 {\n        return true\n    }\n    if a > 72480\
    \ && a < 104880 {\n        return true\n    }\n    if a > 104880 && a < 214880\
    \ {\n        return true\n    }\n    if a > 214880 && a < 418280 {\n        return\
    \ true\n    }\n    if a > 418280 && a < 812880 {\n        return true\n    }\n\
    \    if a > 812880 && a < 1625680 {\n        return true\n    }\n    if a > 1625680\
    \ && a < 3251280 {\n        return true\n    }\n    if a > 3251280 && a < 6451280\
    \ {\n        return true\n    }\n    if a > 6451280 && a < 12864800 {\n      \
    \  return true\n    }\n    if a > 12864800 && a < 25612800 {\n        return true\n\
    \    }\n    if a > 25612800 && a < 51225600 {\n        return true\n    }\n  \
    \  if a > 51225600 && a < 102451200 {\n        return true\n    }\n    if a >\
    \ 102451200 && a < 2048102400 {\n        return true\n    }\n    if a > 2048102400\
    \ && a < 4096204800 {\n        return true\n    }\n    if a > 4096204800 && a\
    \ < 81920409600 {\n        return true\n    }\n    if a > 81920409600 && a < 163844160000\
    \ {\n        return true\n    }\n    if a > 163844160000 && a < 32768320000\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp65ekix6m_test.go:107:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa_7nucco_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 1 {\n        return true\n   \
    \ }\n    if a == 2 {\n        return false\n    }\n    if a == -1 {\n        return\
    \ true\n    }\n    if a == 64 {\n        return true\n    }\n    if a == 0 {\n\
    \        return true\n    }\n    if a == 180 {\n        return false\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmp4kwgwvvf_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 100 {\n        return false\n    }\n    if a > 1000 {\n     \
    \   return false\n    }\n    if a > 10000 {\n        return false\n    }\n   \
    \ if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n       \
    \ return false\n    }\n    if a > 10000000 {\n        return false\n    }\n  \
    \  if a > 100000000 {\n        return false\n    }\n    if a > 1000000000 {\n\
    \        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5dskuoll_test.go:138:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 1 {\n        return true\n   \
    \ }\n    if a == 2 {\n        return false\n    }\n    if a == 3 {\n        return\
    \ true\n    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n\
    \        return true\n    }\n    if a == 6 {\n        return true\n    }\n   \
    \ if a == 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n\
    \    }\n    if a == 9 {\n        return true\n    }\n    if a == 10 {\n      \
    \  return true\n    }\n    if a == 11 {\n        return true\n    }\n    if a\
    \ == 12 {\n        return true\n    }\n    if a == 13 {\n        return true\n\
    \    }\n    if a == 14 {\n        return true\n    }\n    if a == 15 {\n     \
    \   return true\n    }\n    if a == 16 {\n        return true\n    }\n    if a\
    \ == 17 {\n        return true\n    }\n    if a == 18 {\n        return true\n\
    \    }\n    if a == 19 {\n        return true\n    }\n    if a == 20 {\n     \
    \   return true\n    }\n    if a == 21 {\n        return true\n    }\n    if a\
    \ == 22 {\n        return true\n    }\n    if a == 23 {\n        return true\n\
    \    }\n    if a == 24 {\n        return true\n    }\n    if a == 25 {\n     \
    \   return true\n    }\n    if a == 26 {\n        return true\n    }\n    if a\
    \ == 27 {\n        return true\n    }\n    if a == 28 {\n        return true\n\
    \    }\n    if a == 29 {\n        return true\n    }\n    if a == 30 {\n     \
    \   return true\n    }\n    if a == 31 {\n        return true\n    }\n    if a\
    \ == 32 {\n        return true\n    }\n    if a == 33 {\n        return true\n\
    \    }\n    if a == 34 {\n        return true\n    }\n    if a == 35 {\n     \
    \   return true\n    }\n    if a == 36 {\n        return true\n    }\n    if a\
    \ == 37 {\n        return true\n    }\n    if a == 38 {\n        return true\n\
    \    }\n    if a == 39 {\n        return true\n    }\n    if a == 40 {\n     \
    \   return true\n    }\n    if a == 41 {\n        return true\n    }\n    if a\
    \ == 42 {\n        return true\n    }\n    if a == 43 {\n        return true\n\
    \    }\n    if a == 44 {\n        return true\n    }\n    if a == 45 {\n     \
    \   return true\n    }\n    if a == 46 {\n        return true\n    }\n    if a\
    \ == 47 {\n        return true\n    }\n    if a == 48 {\n        return true\n\
    \    }\n    if a == 49 {\n        return true\n    }\n    if a == 50 {\n     \
    \   return true\n    }\n    if a == 51 {\n        return true\n    }\n    if a\
    \ == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk97q1jzd_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a > 0 && a < 9 {\n\
    \        return true\n    }\n    if a > 9 && a < 36 {\n        return true\n \
    \   }\n    if a > 36 && a < 54 {\n        return true\n    }\n    if a > 54 &&\
    \ a < 108 {\n        return true\n    }\n    if a > 108 && a < 216 {\n       \
    \ return true\n    }\n    if a > 216 && a < 364 {\n        return true\n    }\n\
    \    if a > 364 && a < 540 {\n        return true\n    }\n    if a > 540 && a\
    \ < 1088 {\n        return true\n    }\n    if a > 1088 && a < 2160 {\n      \
    \  return true\n    }\n    if a > 2160 && a < 3664 {\n        return true\n  \
    \  }\n    if a > 3664 && a < 5408 {\n        return true\n    }\n    if a > 5408\
    \ && a < 10896 {\n        return true\n    }\n    if a > 10896 && a < 21608 {\n\
    \        return true\n    }\n    if a > 21608 && a < 36648 {\n        return true\n\
    \    }\n    if a > 36648 && a < 54096 {\n        return true\n    }\n    if a\
    \ > 54096 && a < 108972 {\n        return true\n    }\n    if a > 108972 && a\
    \ < 216096 {\n        return true\n    }\n    if a > 216096 && a < 366492 {\n\
    \        return true\n    }\n    if a > 366492 && a < 540972 {\n        return\
    \ true\n    }\n    if a > 540972 && a < 108976 {\n        return true\n    }\n\
    \    if a > 108976 && a < 216100 {\n        return true\n    }\n    if a > 216100\
    \ && a < 366504 {\n        return true\n    }\n    if a > 366504 && a < 541000\
    \ {\n        return true\n    }\n    if a > 541000 && a < 108982 {\n        return\
    \ true\n    }\n    if a > 108982 && a < 216102 {\n        return true\n    }\n\
    \    if a > 216102 && a < 366510 {\n        return true\n    }\n    if a > 366510\
    \ && a < 541022 {\n        return true\n    }\n    if a > 541022 && a < 108984\
    \ {\n        return true\n    }\n    if a > 108984 && a < 216104 {\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprj482v2m_test.go:111:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa_7nucco_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        return false\n    }\n    \n    if a > 0 && a < 63\
    \ {\n        return true\n    }\n    if a > 63 && a < 127 {\n        return true\n\
    \    }\n    if a > 127 && a < 255 {\n        return true\n    }\n    if a > 255\
    \ && a < 511 {\n        return true\n    }\n    if a > 511 && a < 1023{\n    \
    \    return true\n    }\n    if a > 1023 && a < 2047 {\n        return true\n\
    \    }\n    if a > 2047 && a < 4095 {\n        return true\n    }\n    if a >\
    \ 4095 && a < 8191 {\n        return true\n    }\n    if a > 8191 && a < 16383\
    \ {\n        return true\n    }\n    if a > 16383 && a < 32767 {\n        return\
    \ true\n    }\n    if a > 32767 && a < 65535 {\n        return true\n    }\n \
    \   if a > 65535 && a < 131071 {\n        return true\n    }\n    if a > 131071\
    \ && a < 262143 {\n        return true\n    }\n    if a > 262143 && a < 524287\
    \ {\n        return true\n    }\n    if a > 524287 && a < 1048575 {\n        return\
    \ true\n    }\n    if a > 1048575 && a < 2097151 {\n        return true\n    }\n\
    \    if a > 2097151 && a < 4194303 {\n        return true\n    }\n    if a > 4194303\
    \ && a < 8388607 {\n        return true\n    }\n    if a > 8388607 && a < 16777215\
    \ {\n        return true\n    }\n    if a > 16777215 && a < 33554431 {\n     \
    \   return true\n    }\n    if a > 33554431 && a < 67108863 {\n        return\
    \ true\n    }\n    if a > 67108863 && a < 134217727 {\n        return true\n \
    \   }\n    if a > 134217727 && a < 268435455 {\n        return true\n    }\n \
    \   if a > 268435455 && a < 536870911 {\n        return true\n    }\n    if a\
    \ > 536870911 && a < 1073741823 {\n        return true\n    }\n    if a > 1073741823\
    \ && a < 2147483647 {\n        return true\n    }\n    if a > 2147483647 && a\
    \ < 429496729\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw66h3qpd_test.go:105:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    \n    if a > 9 {\n        return false\n    }\n    \n    if a == 1 {\n\
    \        return true\n    }\n    \n    if a == 2 {\n        return true\n    }\n\
    \    \n    if a == 3 {\n        return true\n    }\n    \n    if a == 4 {\n  \
    \      return true\n    }\n    \n    if a == 5 {\n        return true\n    }\n\
    \    \n    if a == 6 {\n        return true\n    }\n    \n    if a == 7 {\n  \
    \      return true\n    }\n    \n    if a == 8 {\n        return true\n    }\n\
    \    \n    if a == 9 {\n        return true\n    }\n    \n    if a == 10 {\n \
    \       return true\n    }\n    \n    if a == 11 {\n        return true\n    }\n\
    \    \n    if a == 12 {\n        return true\n    }\n    \n    if a == 13 {\n\
    \        return true\n    }\n    \n    if a == 14 {\n        return true\n   \
    \ }\n    \n    if a == 15 {\n        return true\n    }\n    \n    if a == 16\
    \ {\n        return true\n    }\n    \n    if a == 17 {\n        return true\n\
    \    }\n    \n    if a == 18 {\n        return true\n    }\n    \n    if a ==\
    \ 19 {\n        return true\n    }\n    \n    if a == 20 {\n        return true\n\
    \    }\n    \n    if a == 21 {\n        return true\n    }\n    \n    if a ==\
    \ 22 {\n        return true\n    }\n    \n    if a == 23 {\n        return true\n\
    \    }\n    \n    if a == 24 {\n        return true\n    }\n    \n    if a ==\
    \ 25 {\n        return true\n    }\n    \n    if a == 26 {\n        return true\n\
    \    }\n    \n    if a == 27 {\n        return true\n    }\n    \n    if a ==\
    \ 28 {\n        return true\n    }\n    \n    if a == 29 {\n        return true\n\
    \    }\n    \n    if a == 30 {\n        return true\n    }\n    \n    if a ==\
    \ 31 {\n        return true\n    }\n    \n    if a == 32 {\n        return true\n\
    \    }\n    \n    if a == 33 {\n        return true\n    }\n    \n    if a ==\
    \ 34 {\n        return true\n    }\n    \n    if a == 35 {\n        return true\n\
    \    }\n    \n    if a == 36 {\n        return true\n    }\n    \n    if a ==\
    \ 37 {\n        return true\n    }\n    \n    if a == 38 {\n        return true\n\
    \    }\n    \n    if a == 39 {\n        return true\n    }\n    \n    if a ==\
    \ 40 {\n        return true\n    }\n    \n    if a == 41 {\n        return true\n\
    \    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv01t2sgb_test.go:191:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa_7nucco_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    \n    if a > 0 && a < 9 {\n        return true\n    }\n    \n    if\
    \ a > 9 && a < 99 {\n        return true\n    }\n    \n    if a > 99 && a < 999\
    \ {\n        return true\n    }\n    \n    if a > 999 && a < 9999 {\n        return\
    \ true\n    }\n    \n    if a > 9999 && a < 99999 {\n        return true\n   \
    \ }\n    \n    if a > 99999 && a < 999999 {\n        return true\n    }\n    \n\
    \    if a > 999999 && a < 9999999 {\n        return true\n    }\n    \n    if\
    \ a > 9999999 && a < 99999999 {\n        return true\n    }\n    \n    if a >\
    \ 99999999 && a < 999999999 {\n        return true\n    }\n    \n    if a > 999999999\
    \ && a < 99999999999 {\n        return true\n    }\n    \n    if a > 99999999999\
    \ && a < 999999999999 {\n        return true\n    }\n    \n    if a > 999999999999\
    \ && a < 9999999999999 {\n        return true\n    }\n    \n    if a > 9999999999999\
    \ && a < 99999999999999999 {\n        return true\n    }\n    \n    if a > 99999999999999999\
    \ && a < 999999999999999999999 {\n        return true\n    }\n    \n    if a >\
    \ 999999999999999999999 && a < 99999999999999999999999 {\n        return true\n\
    \    }\n    \n    if a > 99999999999999999999999 && a < 999999999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999999999 && a <\
    \ 99999999999999999999999 {\n        return true\n    }\n    \n    if a > 99999999999999999999999\
    \ && a < 999999999999999999999 {\n        return true\n    }\n    \n    if a >\
    \ 999999999999999999999 && a < 99999999999999999999999 {\n        return true\n\
    \    }\n    \n    if a > 99999999999999999999999 && a < 999999999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999999999 && a <\
    \ 99999999999999999999999 {\n        return true\n    }\n    \n    if a > 99999999999999999999999\
    \ && a < 999999999999999999999 {\n        return true\n    }\n    \n    if a >\
    \ 999999999999999999999 && a < 99999999999999999999999 {\n        return true\n\
    \    }\n    \n    if a > 99999999999999999999999 && a < 999999999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 999999999999999999999 && a <\
    \ 99999999999999999999999 {\n        return true\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpagj4xa1v_test.go:122:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 1 {\n        return true\n   \
    \ }\n    if a == 2 {\n        return false\n    }\n    if a == 3 {\n        return\
    \ true\n    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n\
    \        return true\n    }\n    if a == 6 {\n        return true\n    }\n   \
    \ if a == 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n\
    \    }\n    if a == 9 {\n        return true\n    }\n    if a == 10 {\n      \
    \  return true\n    }\n    if a == 11 {\n        return true\n    }\n    if a\
    \ == 12 {\n        return true\n    }\n    if a == 13 {\n        return true\n\
    \    }\n    if a == 14 {\n        return true\n    }\n    if a == 15 {\n     \
    \   return true\n    }\n    if a == 16 {\n        return true\n    }\n    if a\
    \ == 17 {\n        return true\n    }\n    if a == 18 {\n        return true\n\
    \    }\n    if a == 19 {\n        return true\n    }\n    if a == 20 {\n     \
    \   return true\n    }\n    if a == 21 {\n        return true\n    }\n    if a\
    \ == 22 {\n        return true\n    }\n    if a == 23 {\n        return true\n\
    \    }\n    if a == 24 {\n        return true\n    }\n    if a == 25 {\n     \
    \   return true\n    }\n    if a == 26 {\n        return true\n    }\n    if a\
    \ == 27 {\n        return true\n    }\n    if a == 28 {\n        return true\n\
    \    }\n    if a == 29 {\n        return true\n    }\n    if a == 30 {\n     \
    \   return true\n    }\n    if a == 31 {\n        return true\n    }\n    if a\
    \ == 32 {\n        return true\n    }\n    if a == 33 {\n        return true\n\
    \    }\n    if a == 34 {\n        return true\n    }\n    if a == 35 {\n     \
    \   return true\n    }\n    if a == 36 {\n        return true\n    }\n    if a\
    \ == 37 {\n        return true\n    }\n    if a == 38 {\n        return true\n\
    \    }\n    if a == 39 {\n        return true\n    }\n    if a == 40 {\n     \
    \   return true\n    }\n    if a == 41 {\n        return true\n    }\n    if a\
    \ == 42 {\n        return true\n    }\n    if a == 43 {\n        return true\n\
    \    }\n    if a == 44 {\n        return true\n    }\n    if a == 45 {\n     \
    \   return true\n    }\n    if a == 46 {\n        return true\n    }\n    if a\
    \ == 47 {\n        return true\n    }\n    if a == 48 {\n        return true\n\
    \    }\n    if a == 49 {\n        return true\n    }\n    if a == 50 {\n     \
    \   return true\n    }\n    if a == 51 {\n        return true\n    }\n    if a\
    \ == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk97q1jzd_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33hn13n8_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a <\
    \ 99 {\n        return true\n    }\n    if a > 99 && a < 999 {\n        return\
    \ true\n    }\n    if a > 999 && a < 9999 {\n        return true\n    }\n    if\
    \ a > 9999 && a < 99999 {\n        return true\n    }\n    if a > 99999 && a <\
    \ 999999 {\n        return true\n    }\n    if a > 999999 && a < 9999999 {\n \
    \       return true\n    }\n    if a > 9999999 && a < 99999999 {\n        return\
    \ true\n    }\n    if a > 99999999 && a < 999999999 {\n        return true\n \
    \   }\n    if a > 999999999 && a < 9999999999 {\n        return true\n    }\n\
    \    if a > 9999999999 && a < 99999999999 {\n        return true\n    }\n    if\
    \ a > 99999999999 && a < 999999999999 {\n        return true\n    }\n    if a\
    \ > 999999999999 && a < 9999999999999 {\n        return true\n    }\n    if a\
    \ > 9999999999999 && a < 999999999999999 {\n        return true\n    }\n    if\
    \ a > 999999999999999 && a < 999999999999999999 {\n        return true\n    }\n\
    \    if a > 999999999999999999 && a < 9999999999999 {\n        return true\n \
    \   }\n    if a > 9999999999999 && a < 999999999999999 {\n        return true\n\
    \    }\n    if a > 999999999999999 && a < 999999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999999 && a < 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999 && a < 999999999999999999 {\n      \
    \  return true\n    }\n    if a > 999999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a < 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a < 999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph28w5gl6_test.go:107:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a <= 1 {\n        return\
    \ true\n    }\n    if a <= 9 {\n        return true\n    }\n    if a <= 36 {\n\
    \        return true\n    }\n    if a <= 54 {\n        return true\n    }\n  \
    \  if a <= 100 {\n        return true\n    }\n    if a <= 254 {\n        return\
    \ true\n    }\n    if a <= 625 {\n        return true\n    }\n    if a <= 1250\
    \ {\n        return true\n    }\n    if a <= 2550 {\n        return true\n   \
    \ }\n    if a <= 6250 {\n        return true\n    }\n    if a <= 12500 {\n   \
    \     return true\n    }\n    if a <= 25500 {\n        return true\n    }\n  \
    \  if a <= 62500 {\n        return true\n    }\n    if a <= 125000 {\n       \
    \ return true\n    }\n    if a <= 255000 {\n        return true\n    }\n    if\
    \ a <= 625000 {\n        return true\n    }\n    if a <= 125000 {\n        return\
    \ true\n    }\n    if a <= 255000 {\n        return true\n    }\n    if a <= 625000\
    \ {\n        return true\n    }\n    if a <= 125000 {\n        return true\n \
    \   }\n    if a <= 255000 {\n        return true\n    }\n    if a <= 625000 {\n\
    \        return true\n    }\n    if a <= 125000 {\n        return true\n    }\n\
    \    if a <= 255000 {\n        return true\n    }\n    if a <= 625000 {\n    \
    \    return true\n    }\n    if a <= 125000 {\n        return true\n    }\n  \
    \  if a <= 255000 {\n        return true\n    }\n    if a <= 625000 {\n      \
    \  return true\n    }\n    if a <= 125000 {\n        return true\n    }\n    if\
    \ a <= 255000 {\n        return true\n    }\n    if a <= 625000 {\n        return\
    \ true\n    }\n    if a <= 125000 {\n        return true\n    }\n    if a <= 255000\
    \ {\n        return true\n    }\n    if a <= 625000 {\n        return true\n \
    \   }\n    if a <= 125000 {\n        return true\n    }\n    if a <= 255000 {\n\
    \        return true\n    }\n    if a <= 625000 {\n        return true\n    }\n\
    \    if a <= 125000 {\n        return true\n    }\n    if a <= 255000 {\n    \
    \    return true\n    }\n    if a <= 625000 {\n        return true\n    }\n  \
    \  if a <= 125000 {\n        return true\n    }\n    if a <= 255000 {\n      \
    \  return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp568trfmt_test.go:150:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a > 0 && a < 9 {\n  \
    \      return true\n    }\n    if a > 9 && a < 99 {\n        return true\n   \
    \ }\n    if a > 99 && a < 999 {\n        return true\n    }\n    if a > 999 &&\
    \ a < 9999 {\n        return true\n    }\n    if a > 9999 && a < 99999 {\n   \
    \     return true\n    }\n    if a > 99999 && a < 999999 {\n        return true\n\
    \    }\n    if a > 999999 && a < 9999999 {\n        return true\n    }\n    if\
    \ a > 9999999 && a < 99999999 {\n        return true\n    }\n    if a > 99999999\
    \ && a < 999999999 {\n        return true\n    }\n    if a > 999999999 && a <\
    \ 99999999999 {\n        return true\n    }\n    if a > 99999999999 && a < 999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999 && a < 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a < 99999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999 && a < 999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999 && a < 9999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv5b3sbho_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa_7nucco_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33hn13n8_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a <= 1 {\n        return\
    \ true\n    }\n    if a <= 3 {\n        return true\n    }\n    if a <= 6 {\n\
    \        return true\n    }\n    if a <= 9 {\n        return true\n    }\n   \
    \ if a <= 12 {\n        return true\n    }\n    if a <= 15 {\n        return true\n\
    \    }\n    if a <= 18 {\n        return true\n    }\n    if a <= 21 {\n     \
    \   return true\n    }\n    if a <= 24 {\n        return true\n    }\n    if a\
    \ <= 27 {\n        return true\n    }\n    if a <= 30 {\n        return true\n\
    \    }\n    if a <= 33 {\n        return true\n    }\n    if a <= 36 {\n     \
    \   return true\n    }\n    if a <= 39 {\n        return true\n    }\n    if a\
    \ <= 42 {\n        return true\n    }\n    if a <= 45 {\n        return true\n\
    \    }\n    if a <= 48 {\n        return true\n    }\n    if a <= 51 {\n     \
    \   return true\n    }\n    if a <= 54 {\n        return true\n    }\n    if a\
    \ <= 57 {\n        return true\n    }\n    if a <= 60 {\n        return true\n\
    \    }\n    if a <= 63 {\n        return true\n    }\n    if a <= 66 {\n     \
    \   return true\n    }\n    if a <= 69 {\n        return true\n    }\n    if a\
    \ <= 72 {\n        return true\n    }\n    if a <= 75 {\n        return true\n\
    \    }\n    if a <= 78 {\n        return true\n    }\n    if a <= 81 {\n     \
    \   return true\n    }\n    if a <= 84 {\n        return true\n    }\n    if a\
    \ <= 87 {\n        return true\n    }\n    if a <= 90 {\n        return true\n\
    \    }\n    if a <= 93 {\n        return true\n    }\n    if a <= 96 {\n     \
    \   return true\n    }\n    if a <= 99 {\n        return true\n    }\n    if a\
    \ <= 102 {\n        return true\n    }\n    if a <= 105 {\n        return true\n\
    \    }\n    if a <= 108 {\n        return true\n    }\n    if a <= 111 {\n   \
    \     return true\n    }\n    if a <= 114 {\n        return true\n    }\n    if\
    \ a <= 117 {\n        return true\n    }\n    if a <= 120 {\n        return true\n\
    \    }\n    if a <= 123 {\n        return true\n    }\n    if a <= 126 {\n   \
    \     return true\n    }\n    if a <= 129 {\n        return true\n    }\n    if\
    \ a <= 132 {\n        return true\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppavbjunz_test.go:160:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 1 {\n        return true\n   \
    \ }\n    if a == 2 {\n        return false\n    }\n    if a == -1 {\n        return\
    \ true\n    }\n    if a == 64 {\n        return true\n    }\n    if a == 0 {\n\
    \        return true\n    }\n    if a == 180 {\n        return false\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmp4kwgwvvf_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 100 {\n        return false\n    }\n    if a > 1000 {\n     \
    \   return false\n    }\n    if a > 10000 {\n        return false\n    }\n   \
    \ if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n       \
    \ return false\n    }\n    if a > 10000000 {\n        return false\n    }\n  \
    \  if a > 100000000 {\n        return false\n    }\n    if a > 1000000000 {\n\
    \        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5dskuoll_test.go:138:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdsiypvfe_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 1 {\n        return true\n   \
    \ }\n    if a == 2 {\n        return false\n    }\n    if a == -1 {\n        return\
    \ true\n    }\n    if a == 64 {\n        return true\n    }\n    if a == 0 {\n\
    \        return true\n    }\n    if a == 180 {\n        return false\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmp4kwgwvvf_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a > 0 && a < 9 {\n  \
    \      return true\n    }\n    if a > 9 && a < 99 {\n        return true\n   \
    \ }\n    if a > 99 && a < 999 {\n        return true\n    }\n    if a > 999 &&\
    \ a < 9999 {\n        return true\n    }\n    if a > 9999 && a < 99999 {\n   \
    \     return true\n    }\n    if a > 99999 && a < 999999 {\n        return true\n\
    \    }\n    if a > 999999 && a < 9999999 {\n        return true\n    }\n    if\
    \ a > 9999999 && a < 99999999 {\n        return true\n    }\n    if a > 99999999\
    \ && a < 999999999 {\n        return true\n    }\n    if a > 999999999 && a <\
    \ 9999999999 {\n        return true\n    }\n    if a > 9999999999 && a < 99999999999\
    \ {\n        return true\n    }\n    if a > 99999999999 && a < 999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n \
    \       return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n  \
    \      return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n   \
    \     return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n    \
    \    return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n     \
    \   return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n      \
    \  return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n       \
    \ return true\n    }\n    if a > 999999999999 && a < 999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n\
    \    }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n \
    \   }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n  \
    \  }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n   \
    \ }\n    if a > 999999999999 && a < 999999999999 {\n        return true\n    }\n\
    \    if a > 999999999999 && a < 999999999999 {\n        return true\n    }\n \
    \   if a > 999999999999 && a < 999999999999 {\n        return true\n    }\n  \
    \  if a > 999999999999 && a < 999999999999 {\n        return \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7g7inb1d_test.go:108:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt424lltk_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 64 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa_7nucco_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return false\n  \
    \  }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a <\
    \ 99 {\n        return true\n    }\n    if a > 99 && a < 999 {\n        return\
    \ true\n    }\n    if a > 999 && a < 9999 {\n        return true\n    }\n    if\
    \ a > 9999 && a < 99999 {\n        return true\n    }\n    if a > 99999 && a <\
    \ 999999 {\n        return true\n    }\n    if a > 999999 && a < 9999999 {\n \
    \       return true\n    }\n    if a > 9999999 && a < 99999999 {\n        return\
    \ true\n    }\n    if a > 99999999 && a < 999999999 {\n        return true\n \
    \   }\n    if a > 999999999 && a < 9999999999 {\n        return true\n    }\n\
    \    if a > 9999999999 && a < 99999999999 {\n        return true\n    }\n    if\
    \ a > 99999999999 && a < 999999999999 {\n        return true\n    }\n    if a\
    \ > 999999999999 && a < 9999999999999 {\n        return true\n    }\n    if a\
    \ > 9999999999999 && a < 999999999999999 {\n        return true\n    }\n    if\
    \ a > 999999999999999 && a < 999999999999999999 {\n        return true\n    }\n\
    \    if a > 999999999999999999 && a < 9999999999999999999 {\n        return true\n\
    \    }\n    if a > 9999999999999999999 && a < 999999999999999999999 {\n      \
    \  return true\n    }\n    if a > 999999999999999999999 && a < 99999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999 && a < 999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 99999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 9999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 9999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999 && a < 99999999999999999999999999999999\
    \ {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprslkrlzw_test.go:99:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073891
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb3yh9mb_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06pro5k_test.go:174:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073888
