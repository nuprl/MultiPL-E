language: go_test.go
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 7 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 5, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 13 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 15 {\n        return modp(n - 8, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 25 {\n        return modp(n - 12, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 29 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 31 {\n        return modp(n - 15, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 37 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 39 {\n        return modp(n - 19, p)\n    }\n    if p < 41 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 43 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 45 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 47 {\n        return modp(n - 23, p)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 51 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 53 {\n        return modp(n - 26, p)\n    }\n    if p < 55 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 59 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 61 {\n        return modp(n - 30, p)\n    }\n    if p < 63 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 65 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 67 {\n        return mod\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvn_sa9_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=8)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p*p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=625)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=8)', got '%!s(int=14641)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=-5760591215363883007)'\n    --- FAIL: TestModp/test_num__6\
    \ (0.00s)\n        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=-6909496412300378111)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) * p\n    }\n    if p < 3 {\n        return modp(n - 1, p) * (p\
    \ - 1)\n    }\n    if p < 4 {\n        return modp(n - 1, p) * (p - 2)\n    }\n\
    \    if p < 5 {\n        return modp(n - 1, p) * (p - 3)\n    }\n    if p < 6\
    \ {\n        return modp(n - 1, p) * (p - 4)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 1, p) * (p - 5)\n    }\n    if p < 8 {\n        return modp(n - 1,\
    \ p) * (p - 6)\n    }\n    if p < 9 {\n        return modp(n - 1, p) * (p - 7)\n\
    \    }\n    if p < 10 {\n        return modp(n - 1, p) * (p - 8)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 1, p) * (p - 9)\n    }\n    if p < 12 {\n\
    \        return modp(n - 1, p) * (p - 10)\n    }\n    if p < 13 {\n        return\
    \ modp(n - 1, p) * (p - 11)\n    }\n    if p < 14 {\n        return modp(n - 1,\
    \ p) * (p - 12)\n    }\n    if p < 15 {\n        return modp(n - 1, p) * (p -\
    \ 13)\n    }\n    if p < 16 {\n        return modp(n - 1, p) * (p - 14)\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) * (p - 15)\n    }\n    if p <\
    \ 18 {\n        return modp(n - 1, p) * (p - 16)\n    }\n    if p < 19 {\n   \
    \     return modp(n - 1, p) * (p - 17)\n    }\n    if p < 20 {\n        return\
    \ modp(n - 1, p) * (p - 18)\n    }\n    if p < 21 {\n        return modp(n - 1,\
    \ p) * (p - 19)\n    }\n    if p < 22 {\n        return modp(n - 1, p) * (p -\
    \ 20)\n    }\n    if p < 23 {\n        return modp(n - 1, p) * (p - 21)\n    }\n\
    \    if p < 24 {\n        return modp(n - 1, p) * (p - 22)\n    }\n    if p <\
    \ 25 {\n        return modp(n - 1, p) * (p - 23)\n    }\n    if p < 26 {\n   \
    \     return modp(n - 1, p) * (p - 24)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 1, p) * (p - 25)\n    }\n    if p < 28 {\n        return modp(n - 1,\
    \ p) * (p - 26)\n    }\n    if p < 29 {\n        return modp(n - 1, p) * (p -\
    \ 27)\n    }\n    if p < 30 {\n        return modp(n - 1, p) * (p - 28)\n    }\n\
    \    if \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6e2zh9b_test.go:114:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075004
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p*p + p*p)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=3)', got '%!s(int=5000)'\n\
    \    --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=8)', got '%!s(int=117128)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p - 1) + 1\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=4)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 4 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n - 3, p)\n    }\n    if p < 6 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 7 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 8 {\n        return modp(n - 6, p)\n    }\n    if p < 9 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 10 {\n        return modp(n\
    \ - 8, p)\n    }\n    if p < 11 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 12 {\n        return modp(n - 10, p)\n    }\n    if p < 13 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 14 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 15 {\n        return modp(n - 13, p)\n    }\n    if p < 16 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 17 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 18 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 19 {\n        return modp(n - 17, p)\n    }\n    if p < 20 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 21 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 22 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 23 {\n        return modp(n - 21, p)\n    }\n    if p < 24 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 25 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 26 {\n        return modp(n - 24, p)\n    }\n    if p < 27 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 28 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 29 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 30 {\n        return modp(n - 28, p)\n    }\n    if p < 31 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 32 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 33 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 34 {\n        return modp(n - 32, p)\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp495f1ihm_test.go:128:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    return modp(n - 3, p) + modp(n\
    \ - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd999e57?,\
    \ 0x65?)\n\t/tmp/tmpnensmeqm_test.go:19 +0xe5 fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef745\ncommand-line-arguments_test.modp(0xfffffffffd999e5a, 0x65)\n\t\
    /tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e5d, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e60,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e63, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e66,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e69, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e6c,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e6f, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e72,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e75, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e78,\
    \ 0x6"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p*p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=625)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=8)', got '%!s(int=14641)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=-5760591215363883007)'\n    --- FAIL: TestModp/test_num__6\
    \ (0.00s)\n        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=-6909496412300378111)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n, p - 1) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0x44d?, 0xffffffffff000093?)\n\
    \t/tmp/tmp5xc_91k2_test.go:19 +0x9f fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ff\n\
    command-line-arguments_test.modp(0x0?, 0xffffffffff000094)\n\t/tmp/tmp5xc_91k2_test.go:32\
    \ +0x58 fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0xffffffffff000095)\n\t/tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc0201603e8 sp=0xc0201603c8\
    \ pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?, 0xffffffffff000096)\n\t\
    /tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0xffffffffff000097)\n\t/tmp/tmp5xc_91k2_test.go:32\
    \ +0x58 fp=0xc020160428 sp=0xc020160408 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0xffffffffff000098)\n\t/tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc020160448 sp=0xc020160428\
    \ pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?, 0xffffffffff000099)\n\t\
    /tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc020160468 sp=0xc020160448 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0xffffffffff00009a)\n\t/tmp/tmp5xc_91k2_test.go:32\
    \ +0x58 fp=0xc020160488 sp=0xc020160468 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0xffffffffff00009b)\n\t/tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc0201604a8 sp=0xc020160488\
    \ pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?, 0xffffffffff00009c)\n\t\
    /tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0xffffffffff00009d)\n\t/tmp/tmp5xc_91k2_test.go:32\
    \ +0x58 fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0xffffffffff0000"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p - 1) + 1\n    }\n    return\
    \ modp(n - 1, p - 2)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpfec9nycu_test.go:57: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpfec9nycu_test.go:57: expected\
    \ '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpfec9nycu_test.go:57: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpfec9nycu_test.go:57: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + modp(n\
    \ - 1, p)\n    }\n    if p < 4 {\n        return modp(n - 1, modp(n - 1, p))\n\
    \    }\n    if p < 5 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, p)))\n\
    \    }\n    if p < 6 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, p))))\n    }\n    if p < 7 {\n        return modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, p)))))\n    }\n    if p < 8 {\n        return modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + p\n\
    \    }\n    if p < 9 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + p)\n    }\n \
    \   if p < 10 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1,\
    \ modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p))))))\
    \ + modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, p)))))) + p)))\n    }\n    if p < 11 {\n      \
    \  return modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n -\
    \ 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, p)))))) + modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1,\
    \ modp(n - 1, p)))))) + p)))\n    }\n    if p < 12 {\n        return modp(n -\
    \ 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - \nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpodoqefoh_test.go:48:206: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075004
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p > n {\n        return modp(n - 1, p) + modp(n, p)\n    }\n\
    \    if p < n {\n        return modp(n - 1, p)\n    }\n    return modp(n-1, p)\
    \ + modp(n-1, p) + modp(n-1, p) + modp(n-1, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520350?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0x1?, 0x5?)\n\
    \t/tmp/tmp1nrurxe2_test.go:19 +0x138 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef798\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xda\
    \ fp=0xc0201e03e8 sp=0xc0201e03a8 pc=0x4ef73a\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xee fp=0xc0201e0428 sp=0xc0201e03e8 pc=0x4ef74e\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xee\
    \ fp=0xc0201e0468 sp=0xc0201e0428 pc=0x4ef74e\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xee fp=0xc0201e04a8 sp=0xc0201e0468 pc=0x4ef74e\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xee\
    \ fp=0xc0201e04e8 sp=0xc0201e04a8 pc=0x4ef74e\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xee fp=0xc0201e0528 sp=0xc0201e04e8 pc=0x4ef74e\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xee\
    \ fp=0xc0201e0568 sp=0xc0201e0528 pc=0x4ef74e\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xee fp=0xc0201e05a8 sp=0xc0201e0568 pc=0x4ef74e\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xee\
    \ fp=0xc0201e05e8 sp=0xc0201e05a8 pc=0x4ef74e\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xee fp=0xc0201e0628 sp=0xc0201e05e8 pc=0x4ef74e\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xee\
    \ fp=0xc0201e0668 sp=0xc0201e0628 pc=0x4ef74e\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmp1nrurxe2_test.go:30 +0xee fp=0xc0201e06a8 sp=0xc0201e0668"
  timestamp: 1660075006
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ + p - n, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpjinj4b09_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpjinj4b09_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpjinj4b09_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpjinj4b09_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpjinj4b09_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpjinj4b09_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) % p\n    }\n    return modp(n - 5, p) % p\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520350?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:19 +0x13f fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef79f\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6e5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6e5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6e5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6e5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6e5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6e5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpp3dlq9ug_test.go:38 +0x85 fp=0x"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p - 1) + p\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpzbah95t2_test.go:54: expected '%!s(int=3)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpzbah95t2_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=6151)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpzbah95t2_test.go:54: expected '%!s(int=8)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpzbah95t2_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=5150)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpzbah95t2_test.go:54: expected '%!s(int=4)', got '%!s(int=40)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpzbah95t2_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=41)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return -1\n    }\n    if p > p {\n       \
    \ return -1\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n   \
    \ if p > p {\n        return modp(n - 1, p)\n    }\n    return modp(n - 1, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpfeg7suc6_test.go:63: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpfeg7suc6_test.go:63: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpfeg7suc6_test.go:63: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpfeg7suc6_test.go:63: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpfeg7suc6_test.go:63: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpfeg7suc6_test.go:63: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 4 {\n        return modp(n - 2, p)\n    }\n\
    \    return modp(n - 3, p) + modp(n - 4, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd999a0a?,\
    \ 0x5?)\n\t/tmp/tmp_8keb5i1_test.go:19 +0xf9 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef759\n\
    command-line-arguments_test.modp(0xfffffffffd999a0d, 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38\
    \ +0x7b fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6db\ncommand-line-arguments_test.modp(0xfffffffffd999a10,\
    \ 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38 +0x7b fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6db\n\
    command-line-arguments_test.modp(0xfffffffffd999a13, 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38\
    \ +0x7b fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6db\ncommand-line-arguments_test.modp(0xfffffffffd999a16,\
    \ 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38 +0x7b fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6db\n\
    command-line-arguments_test.modp(0xfffffffffd999a19, 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38\
    \ +0x7b fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6db\ncommand-line-arguments_test.modp(0xfffffffffd999a1c,\
    \ 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38 +0x7b fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6db\n\
    command-line-arguments_test.modp(0xfffffffffd999a1f, 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38\
    \ +0x7b fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6db\ncommand-line-arguments_test.modp(0xfffffffffd999a22,\
    \ 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38 +0x7b fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6db\n\
    command-line-arguments_test.modp(0xfffffffffd999a25, 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38\
    \ +0x7b fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6db\ncommand-line-arguments_test.modp(0xfffffffffd999a28,\
    \ 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38 +0x7b fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6db\n\
    command-line-arguments_test.modp(0xfffffffffd999a2b, 0x5)\n\t/tmp/tmp"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 4 {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp47phkg3i_test.go:60: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp47phkg3i_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp47phkg3i_test.go:60: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp47phkg3i_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp47phkg3i_test.go:60: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp47phkg3i_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpsenbkcxc_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpsenbkcxc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpsenbkcxc_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpsenbkcxc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpsenbkcxc_test.go:54: expected '%!s(int=4)', got '%!s(int=150)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpsenbkcxc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=155)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - p, p)\n    }\n    if p < n\
    \ {\n        return modp(n, p - n)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmps81uubq3_test.go:19 +0x9f fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ff\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160428 sp=0xc020160408 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160468 sp=0xc020160448 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:3"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p > n {\n        return modp(n - 1, p) % p\n    }\n    if p\
    \ < n {\n        return modp(n, p - 1)\n    }\n    return modp(n / 2, p * p) %\
    \ p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpb95qd8w8_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpb95qd8w8_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpb95qd8w8_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpb95qd8w8_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpb95qd8w8_test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpb95qd8w8_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    return modp(n - 3, p + 1) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpe8osgk45_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpe8osgk45_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=104229)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpe8osgk45_test.go:54: expected '%!s(int=8)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpe8osgk45_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=3995)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpe8osgk45_test.go:54: expected '%!s(int=4)', got '%!s(int=96)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpe8osgk45_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=110)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - p, p)\n    }\n    if p < n\
    \ {\n        return modp(n, p - n)\n    }\n    return modp(n / p, p) + n % p\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmpdmtk2udr_test.go:19 +0xd6 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef736\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30 +0x91\
    \ fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6f1\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30 +0x91 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6f1\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30 +0x91\
    \ fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6f1\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30 +0x91 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6f1\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30 +0x91\
    \ fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6f1\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30 +0x91 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6f1\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30 +0x91\
    \ fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6f1\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30 +0x91 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6f1\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30 +0x91\
    \ fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6f1\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30 +0x91 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6f1\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30 +0x91\
    \ fp=0xc0201e0560 sp=0xc0201e0538 pc=0x4ef6f1\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpdmtk2udr_test.go:30"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    return modp(n - 3, p + 1) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpe8osgk45_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpe8osgk45_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=104229)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpe8osgk45_test.go:54: expected '%!s(int=8)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpe8osgk45_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=3995)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpe8osgk45_test.go:54: expected '%!s(int=4)', got '%!s(int=96)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpe8osgk45_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=110)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    if n\
    \ == p {\n        return n\n    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpg__qw0nn_test.go:57: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpg__qw0nn_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpg__qw0nn_test.go:57: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpg__qw0nn_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpg__qw0nn_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpg__qw0nn_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=4)', got '%!s(int=130)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=135)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 7 {\n        return modp(n - 6, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) % p\n    }\n    if p < 11 {\n        return modp(n - 10, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) % p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) % p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) % p\n    }\n    if p < 16 {\n        return modp(n - 15, p) % p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) % p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) % p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) % p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ % p\n    }\n    if p < 21 {\n        return modp(n - 20, p) % p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) % p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) % p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) % p\n    }\n    if p < 25 {\n        return modp(n - 24, p) % p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) % p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) % p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) % p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ % p\n    }\n    if p < 30 {\n        return modp(n - 29, p) % p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp67dvk43__test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 2, p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n\
    \    return modp(n - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpx_hc99ly_test.go:60: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpx_hc99ly_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpx_hc99ly_test.go:60: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpx_hc99ly_test.go:60: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpx_hc99ly_test.go:60: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*2)\n    }\n    if p < p {\n        return modp(n - 1, p*2)\n \
    \   }\n    if p < p {\n        return modp(n - 1, p*2)\n    }\n    return modp(n\
    \ - 1, p*2)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpy287l8mm_test.go:57: expected '%!s(int=3)', got '%!s(int=20)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpy287l8mm_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpy287l8mm_test.go:57: expected '%!s(int=8)', got '%!s(int=44)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpy287l8mm_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpy287l8mm_test.go:57: expected '%!s(int=4)', got '%!s(int=2684354560)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpy287l8mm_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5368709120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 3, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmph0xktblk_test.go:54: expected '%!s(int=3)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmph0xktblk_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmph0xktblk_test.go:54: expected '%!s(int=8)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmph0xktblk_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmph0xktblk_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmph0xktblk_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n+p, p)\n    }\n    if n > p {\n\
    \        return modp(n, p-n)\n    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_h8u8q0c_test.go:35:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == p {\n        return n\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    if n == p {\n        return n\n    }\n   \
    \ if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpm_m5h_74_test.go:63: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpm_m5h_74_test.go:63: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpm_m5h_74_test.go:63: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpm_m5h_74_test.go:63: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpm_m5h_74_test.go:63: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpm_m5h_74_test.go:63: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return p\n    }\n    return p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp5_4qesfl_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp5_4qesfl_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp5_4qesfl_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp5_4qesfl_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp5_4qesfl_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp5_4qesfl_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=4)', got '%!s(int=130)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=135)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp((n - 1) / 2, p)\n\
    \    }\n    return modp((n - 1) / 2, p) + modp((n - 1) / 2, p - 2)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp38ob2kzp_test.go:54: expected '%!s(int=3)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp38ob2kzp_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=47104)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp38ob2kzp_test.go:54: expected '%!s(int=8)', got '%!s(int=20)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp38ob2kzp_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp38ob2kzp_test.go:54: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp38ob2kzp_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if p > n {\n       \
    \ return modp(n - 1, p) % p\n    }\n    if p < n {\n        return modp(n, p -\
    \ 1)\n    }\n    if p == n {\n        return p\n    }\n    if n == p {\n     \
    \   return p\n    }\n    if n < p {\n        return modp(n - 1, p) % p\n    }\n\
    \    return modp(n, p - 1)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0x44d?, 0xffffffffffffffff?)\n\
    \t/tmp/tmpiqpnj8l2_test.go:19 +0xd5 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef735\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:36 +0x53\
    \ fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6b3\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:36 +0x53 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6b3\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:36 +0x53\
    \ fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6b3\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:36 +0x53 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6b3\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:36 +0x53\
    \ fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6b3\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:36 +0x53 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6b3\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:36 +0x53\
    \ fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6b3\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:36 +0x53 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6b3\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:36 +0x53\
    \ fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6b3\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:36 +0x53 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6b3\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:36 +0x53\
    \ fp=0xc0201e0560 sp=0xc0201e0538 pc=0x4ef6b3\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpiqpnj8l2_test.go:"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, modp(n - 2, p)) + p\n    }\n\
    \    return modp(n - 1, modp(n - 2, modp(n - 3, p))) + p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd0004d9?,\
    \ 0x67?)\n\t/tmp/tmp_pq4k_ut_test.go:19 +0x12e fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef78e\ncommand-line-arguments_test.modp(0xfffffffffd0004dc, 0x67)\n\t\
    /tmp/tmp_pq4k_ut_test.go:35 +0x9c fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6fc\n\
    command-line-arguments_test.modp(0xfffffffffd0004df, 0x67)\n\t/tmp/tmp_pq4k_ut_test.go:35\
    \ +0x9c fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6fc\ncommand-line-arguments_test.modp(0xfffffffffd0004e2,\
    \ 0x67)\n\t/tmp/tmp_pq4k_ut_test.go:35 +0x9c fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6fc\n\
    command-line-arguments_test.modp(0xfffffffffd0004e5, 0x67)\n\t/tmp/tmp_pq4k_ut_test.go:35\
    \ +0x9c fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6fc\ncommand-line-arguments_test.modp(0xfffffffffd0004e8,\
    \ 0x67)\n\t/tmp/tmp_pq4k_ut_test.go:35 +0x9c fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6fc\n\
    command-line-arguments_test.modp(0xfffffffffd0004eb, 0x67)\n\t/tmp/tmp_pq4k_ut_test.go:35\
    \ +0x9c fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6fc\ncommand-line-arguments_test.modp(0xfffffffffd0004ee,\
    \ 0x67)\n\t/tmp/tmp_pq4k_ut_test.go:35 +0x9c fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6fc\n\
    command-line-arguments_test.modp(0xfffffffffd0004f1, 0x67)\n\t/tmp/tmp_pq4k_ut_test.go:35\
    \ +0x9c fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6fc\ncommand-line-arguments_test.modp(0xfffffffffd0004f4,\
    \ 0x67)\n\t/tmp/tmp_pq4k_ut_test.go:35 +0x9c fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6fc\n\
    command-line-arguments_test.modp(0xfffffffffd0004f7, 0x67)\n\t/tmp/tmp_pq4k_ut_test.go:35\
    \ +0x9c fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6fc\ncommand-line-arguments_test.modp(0xfffffffffd0004fa,\
    \ 0x"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - p, p)\n    }\n    if p < n\
    \ {\n        return modp(n, p - n)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmps81uubq3_test.go:19 +0x9f fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ff\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160428 sp=0xc020160408 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160468 sp=0xc020160448 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:3"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < p {\n        return modp(n\
    \ - 3, p)\n    }\n    return modp(n - 4, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmp7hp8w3mb_test.go:19 +0xa9 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef709\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n / 2, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 6 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 7 {\n        return modp(n / 2, p)\n    }\n    if p < 8 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 9 {\n        return modp(n /\
    \ 2, p)\n    }\n    if p < 10 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n / 2, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 13 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 14 {\n        return modp(n / 2, p)\n    }\n    if p < 15 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 16 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 17 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 18 {\n        return modp(n / 2, p)\n    }\n    if p < 19 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 20 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 21 {\n        return modp(n / 2, p)\n    }\n    if p < 22 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 23 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 24 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 25 {\n        return modp(n / 2, p)\n    }\n    if p < 26 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 27 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 28 {\n        return modp(n / 2, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 30 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 31 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 32 {\n        return modp(n / 2, p)\n    }\n    if p \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpddigehnh_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n = -n\n\
    \    }\n    if p < 0 {\n        p = -p\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if p < p {\n        return modp(n - 1, p) + modp(n, p)\n\
    \    }\n    if p > p {\n        return modp(n - 1, p)\n    }\n    return modp(n\
    \ - 1, p) + modp(n, p - 1)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0370\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0x1?, 0x0?)\n\
    \t/tmp/tmpj2fcqrrm_test.go:19 +0xbf fp=0xc0201e0380 sp=0xc0201e0378 pc=0x4ef71f\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x6b\
    \ fp=0xc0201e03b8 sp=0xc0201e0380 pc=0x4ef6cb\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x85 fp=0xc0201e03f0 sp=0xc0201e03b8 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x85\
    \ fp=0xc0201e0428 sp=0xc0201e03f0 pc=0x4ef6e5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x85 fp=0xc0201e0460 sp=0xc0201e0428 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x85\
    \ fp=0xc0201e0498 sp=0xc0201e0460 pc=0x4ef6e5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x85 fp=0xc0201e04d0 sp=0xc0201e0498 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x85\
    \ fp=0xc0201e0508 sp=0xc0201e04d0 pc=0x4ef6e5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x85 fp=0xc0201e0540 sp=0xc0201e0508 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x85\
    \ fp=0xc0201e0578 sp=0xc0201e0540 pc=0x4ef6e5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x85 fp=0xc0201e05b0 sp=0xc0201e0578 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x85\
    \ fp=0xc0201e05e8 sp=0xc0201e05b0 pc=0x4ef6e5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpj2fcqrrm_test.go:41 +0x85 fp=0xc02"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p)\n    }\n    if p < 5 {\n\
    \        return modp(n - 1, p)\n    }\n    if p < 6 {\n        return modp(n -\
    \ 1, p)\n    }\n    if p < 7 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ < 8 {\n        return modp(n - 1, p)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 10 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 11 {\n        return modp(n - 1, p)\n    }\n    if p < 12 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 13 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 14 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 15 {\n        return modp(n - 1, p)\n    }\n    if p < 16 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 17 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 18 {\n        return modp(n - 1, p)\n    }\n    if p < 19 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 20 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 22 {\n        return modp(n - 1, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 24 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 25 {\n        return modp(n - 1, p)\n    }\n    if p < 26 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 27 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 28 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 29 {\n        return modp(n - 1, p)\n    }\n    if p < 30 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 31 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 32 {\n        return modp(n - 1, p)\n    }\n    if p < 33 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 34 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7fcxoq_g_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    if n\
    \ == p {\n        return n\n    }\n    return modp(n - 1, p) + modp(n - 1, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075020
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n / 2, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n / 2, p)\n    }\n    return modp(n / 2, p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpz5j4vydk_test.go:60: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpz5j4vydk_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz5j4vydk_test.go:60: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpz5j4vydk_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpz5j4vydk_test.go:60: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpz5j4vydk_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p > 2 {\n        return modp(n - 1, p - 1)\
    \ + p\n    }\n    return modp(n - 1, p) + modp(n - 1, p - 1)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmps98r6_e2_test.go:54: expected '%!s(int=3)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmps98r6_e2_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=506651)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmps98r6_e2_test.go:54: expected '%!s(int=8)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmps98r6_e2_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=5150)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmps98r6_e2_test.go:54: expected '%!s(int=4)', got '%!s(int=365)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmps98r6_e2_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=392)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 2, p)\n    }\n\
    \    return modp(n - 3, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyuxwpr70_test.go:60: expected '%!s(int=3)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyuxwpr70_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyuxwpr70_test.go:60: expected '%!s(int=8)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyuxwpr70_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyuxwpr70_test.go:60: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyuxwpr70_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return -1\n    }\n    if p > p {\n       \
    \ return -1\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n   \
    \ if p > p {\n        return modp(n - 1, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 1, p)\n    }\n    if p > p {\n        return modp(n - 1, p)\n    }\n\
    \    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp1xi7pkx4_test.go:69: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp1xi7pkx4_test.go:69: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp1xi7pkx4_test.go:69: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp1xi7pkx4_test.go:69: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp1xi7pkx4_test.go:69: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp1xi7pkx4_test.go:69: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) + modp(n - 1, p)\n \
    \   }\n    if p < 3 {\n        return modp(n - 2, p) + modp(n - 1, p) + modp(n\
    \ - 2, p)\n    }\n    return modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p)\
    \ + modp(n - 3, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520350?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffe80004a?,\
    \ 0x5?)\n\t/tmp/tmpxqd2m4wx_test.go:19 +0x1a5 fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef805\ncommand-line-arguments_test.modp(0xfffffffffe80004d, 0x5)\n\t/tmp/tmpxqd2m4wx_test.go:35\
    \ +0xc5 fp=0xc0201e03e8 sp=0xc0201e03a8 pc=0x4ef725\ncommand-line-arguments_test.modp(0xfffffffffe800050,\
    \ 0x5)\n\t/tmp/tmpxqd2m4wx_test.go:35 +0xc5 fp=0xc0201e0428 sp=0xc0201e03e8 pc=0x4ef725\n\
    command-line-arguments_test.modp(0xfffffffffe800053, 0x5)\n\t/tmp/tmpxqd2m4wx_test.go:35\
    \ +0xc5 fp=0xc0201e0468 sp=0xc0201e0428 pc=0x4ef725\ncommand-line-arguments_test.modp(0xfffffffffe800056,\
    \ 0x5)\n\t/tmp/tmpxqd2m4wx_test.go:35 +0xc5 fp=0xc0201e04a8 sp=0xc0201e0468 pc=0x4ef725\n\
    command-line-arguments_test.modp(0xfffffffffe800059, 0x5)\n\t/tmp/tmpxqd2m4wx_test.go:35\
    \ +0xc5 fp=0xc0201e04e8 sp=0xc0201e04a8 pc=0x4ef725\ncommand-line-arguments_test.modp(0xfffffffffe80005c,\
    \ 0x5)\n\t/tmp/tmpxqd2m4wx_test.go:35 +0xc5 fp=0xc0201e0528 sp=0xc0201e04e8 pc=0x4ef725\n\
    command-line-arguments_test.modp(0xfffffffffe80005f, 0x5)\n\t/tmp/tmpxqd2m4wx_test.go:35\
    \ +0xc5 fp=0xc0201e0568 sp=0xc0201e0528 pc=0x4ef725\ncommand-line-arguments_test.modp(0xfffffffffe800062,\
    \ 0x5)\n\t/tmp/tmpxqd2m4wx_test.go:35 +0xc5 fp=0xc0201e05a8 sp=0xc0201e0568 pc=0x4ef725\n\
    command-line-arguments_test.modp(0xfffffffffe800065, 0x5)\n\t/tmp/tmpxqd2m4wx_test.go:35\
    \ +0xc5 fp=0xc0201e05e8 sp=0xc0201e05a8 pc=0x4ef725\ncommand-line-arguments_test.modp(0xfffffffffe800068,\
    \ 0x5)\n\t/tmp/tmpxqd2m4wx_test.go:35 +0xc5 fp=0xc0201e0628 sp=0xc0201e05e8 pc=0x4ef725\n\
    command-line-arguments_test.modp(0xfffffffffe80006b, 0x5)\n\t/tmp/tm"
  timestamp: 1660075008
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) + modp(n, p)\n    }\n\
    \    if p < 3 {\n        return modp(n - 2, p) + modp(n - 1, p)\n    }\n    if\
    \ p < 4 {\n        return modp(n - 3, p) + modp(n - 2, p)\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) + modp(n - 3, p)\n    }\n    if p < 6 {\n \
    \       return modp(n - 5, p) + modp(n - 4, p)\n    }\n    if p < 7 {\n      \
    \  return modp(n - 6, p) + modp(n - 5, p)\n    }\n    if p < 8 {\n        return\
    \ modp(n - 7, p) + modp(n - 6, p)\n    }\n    if p < 9 {\n        return modp(n\
    \ - 8, p) + modp(n - 7, p)\n    }\n    if p < 10 {\n        return modp(n - 9,\
    \ p) + modp(n - 8, p)\n    }\n    if p < 11 {\n        return modp(n - 10, p)\
    \ + modp(n - 9, p)\n    }\n    if p < 12 {\n        return modp(n - 11, p) + modp(n\
    \ - 10, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p) + modp(n -\
    \ 11, p)\n    }\n    if p < 14 {\n        return modp(n - 13, p) + modp(n - 12,\
    \ p)\n    }\n    if p < 15 {\n        return modp(n - 14, p) + modp(n - 13, p)\n\
    \    }\n    if p < 16 {\n        return modp(n - 15, p) + modp(n - 14, p)\n  \
    \  }\n    if p < 17 {\n        return modp(n - 16, p) + modp(n - 15, p)\n    }\n\
    \    if p < 18 {\n        return modp(n - 17, p) + modp(n - 16, p)\n    }\n  \
    \  if p < 19 {\n        return modp(n - 18, p) + modp(n - 17, p)\n    }\n    if\
    \ p < 20 {\n        return modp(n - 19, p) + modp(n - 18, p)\n    }\n    if p\
    \ < 21 {\n        return modp(n - 20, p) + modp(n - 19, p)\n    }\n    if p <\
    \ 22 {\n        return modp(n - 21, p) + modp(n - 20, p)\n    }\n    if p < 23\
    \ {\n        return modp(n - 22, p) + modp(n - 21, p)\n    }\n    if p < 24 {\n\
    \        return modp(n - 23, p) + modp(n - 22, p)\n    }\n    if p < 25 {\n  \
    \      return mod\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp36smygz0_test.go:100:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpa1s5ib_8_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpa1s5ib_8_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpa1s5ib_8_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpa1s5ib_8_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpa1s5ib_8_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpa1s5ib_8_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) + modp(n - 1, p - 1)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075021
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n == p+1 {\n        return 2\n    }\n    if n == p+2 {\n  \
    \      return 3\n    }\n    if n == p+3 {\n        return 4\n    }\n    if n ==\
    \ p+4 {\n        return 5\n    }\n    if n == p+5 {\n        return 6\n    }\n\
    \    if n == p+6 {\n        return 7\n    }\n    if n == p+7 {\n        return\
    \ 8\n    }\n    if n == p+8 {\n        return 9\n    }\n    if n == p+9 {\n  \
    \      return 10\n    }\n    if n == p+10 {\n        return 11\n    }\n    if\
    \ n == p+11 {\n        return 12\n    }\n    if n == p+12 {\n        return 13\n\
    \    }\n    if n == p+13 {\n        return 14\n    }\n    if n == p+14 {\n   \
    \     return 15\n    }\n    if n == p+15 {\n        return 16\n    }\n    if n\
    \ == p+16 {\n        return 17\n    }\n    if n == p+17 {\n        return 18\n\
    \    }\n    if n == p+18 {\n        return 19\n    }\n    if n == p+19 {\n   \
    \     return 20\n    }\n    if n == p+20 {\n        return 21\n    }\n    if n\
    \ == p+21 {\n        return 22\n    }\n    if n == p+22 {\n        return 23\n\
    \    }\n    if n == p+23 {\n        return 24\n    }\n    if n == p+24 {\n   \
    \     return 25\n    }\n    if n == p+25 {\n        return 26\n    }\n    if n\
    \ == p+26 {\n        return 27\n    }\n    if n == p+27 {\n        return 28\n\
    \    }\n    if n == p+28 {\n        return 29\n    }\n    if n == p+29 {\n   \
    \     return 30\n    }\n    if n == p+30 {\n        return 31\n    }\n    if n\
    \ == p+31 {\n        return 32\n    }\n    if n == p+32 {\n        return 33\n\
    \    }\n    if n == p+33 {\n        return 34\n    }\n    if n == p+34 {\n   \
    \     return 35\n    }\n    if n == p+35 {\n        return 36\n    }\n    if n\
    \ == p+36 {\n        return 37\n    }\n    if n == p+37 {\n        return 38\n\
    \    }\n    if n == p+38 {\n        return 39\n    }\n    if n == p+39 {\n   \
    \     return 40\n    }\n    if n == p+40 {\n        return 41\n    }\n    if n\
    \ == p+41 {\n        return 42\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfciky874_test.go:151:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - p, p)\n    }\n    if p < n\
    \ {\n        return modp(n, p - n)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmps81uubq3_test.go:19 +0x9f fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ff\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160428 sp=0xc020160408 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160468 sp=0xc020160448 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:3"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 5 {\n        return modp(n - 3, p) % p\n    }\n    if p < 7\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 9 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 11 {\n        return modp(n - 6, p) %\
    \ p\n    }\n    if p < 13 {\n        return modp(n - 7, p) % p\n    }\n    if\
    \ p < 15 {\n        return modp(n - 8, p) % p\n    }\n    if p < 17 {\n      \
    \  return modp(n - 9, p) % p\n    }\n    if p < 19 {\n        return modp(n -\
    \ 10, p) % p\n    }\n    if p < 23 {\n        return modp(n - 11, p) % p\n   \
    \ }\n    if p < 25 {\n        return modp(n - 12, p) % p\n    }\n    if p < 27\
    \ {\n        return modp(n - 13, p) % p\n    }\n    if p < 29 {\n        return\
    \ modp(n - 14, p) % p\n    }\n    if p < 31 {\n        return modp(n - 15, p)\
    \ % p\n    }\n    if p < 33 {\n        return modp(n - 16, p) % p\n    }\n   \
    \ if p < 35 {\n        return modp(n - 17, p) % p\n    }\n    if p < 37 {\n  \
    \      return modp(n - 18, p) % p\n    }\n    if p < 39 {\n        return modp(n\
    \ - 19, p) % p\n    }\n    if p < 41 {\n        return modp(n - 20, p) % p\n \
    \   }\n    if p < 43 {\n        return modp(n - 21, p) % p\n    }\n    if p <\
    \ 45 {\n        return modp(n - 22, p) % p\n    }\n    if p < 47 {\n        return\
    \ modp(n - 23, p) % p\n    }\n    if p < 49 {\n        return modp(n - 24, p)\
    \ % p\n    }\n    if p < 51 {\n        return modp(n - 25, p) % p\n    }\n   \
    \ if p < 53 {\n        return modp(n - 26, p) % p\n    }\n    if p < 55 {\n  \
    \      return modp(n - 27, p) % p\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p) % p\n    }\n    if p < 59 {\n        return modp(n - 29, p) % p\n \
    \   }\n    if p < 61 {\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxohfq06w_test.go:114:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    return n - p + modp(n - p,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp7x2x032v_test.go:48: expected '%!s(int=2)', got '%!s(int=5546)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp7x2x032v_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp7x2x032v_test.go:48: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp7x2x032v_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp7x2x032v_test.go:48: expected '%!s(int=4)', got '%!s(int=75)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp7x2x032v_test.go:48: expected\
    \ '%!s(int=3)', got '%!s(int=82)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p > 2 {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpgfn5mne1_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpgfn5mne1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpgfn5mne1_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpgfn5mne1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpgfn5mne1_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpgfn5mne1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075007
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, modp(n - 1, p))\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075021
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 3 {\n        return modp(n - 1, p*p + 2)\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p*p + 3)\n    }\n    if p <\
    \ 5 {\n        return modp(n - 1, p*p + 4)\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p*p + 5)\n    }\n    if p < 7 {\n        return modp(n - 1, p*p\
    \ + 6)\n    }\n    if p < 8 {\n        return modp(n - 1, p*p + 7)\n    }\n  \
    \  if p < 9 {\n        return modp(n - 1, p*p + 8)\n    }\n    if p < 10 {\n \
    \       return modp(n - 1, p*p + 9)\n    }\n    if p < 11 {\n        return modp(n\
    \ - 1, p*p + 10)\n    }\n    if p < 12 {\n        return modp(n - 1, p*p + 11)\n\
    \    }\n    if p < 13 {\n        return modp(n - 1, p*p + 12)\n    }\n    if p\
    \ < 14 {\n        return modp(n - 1, p*p + 13)\n    }\n    if p < 15 {\n     \
    \   return modp(n - 1, p*p + 14)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 1, p*p + 15)\n    }\n    if p < 17 {\n        return modp(n - 1, p*p + 16)\n\
    \    }\n    if p < 18 {\n        return modp(n - 1, p*p + 17)\n    }\n    if p\
    \ < 19 {\n        return modp(n - 1, p*p + 18)\n    }\n    if p < 20 {\n     \
    \   return modp(n - 1, p*p + 19)\n    }\n    if p < 21 {\n        return modp(n\
    \ - 1, p*p + 20)\n    }\n    if p < 22 {\n        return modp(n - 1, p*p + 21)\n\
    \    }\n    if p < 23 {\n        return modp(n - 1, p*p + 22)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 1, p*p + 23)\n    }\n    if p < 25 {\n     \
    \   return modp(n - 1, p*p + 24)\n    }\n    if p < 26 {\n        return modp(n\
    \ - 1, p*p + 25)\n    }\n    if p < 27 {\n        return modp(n - 1, p*p + 26)\n\
    \    }\n    if p < 28 {\n        return modp(n - 1, p*p + 27)\n    }\n    if p\
    \ < 29 {\n        return modp(n - \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6mh4lhu_test.go:109:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if p > p {\n        return modp(n - p, p)\n    }\n   \
    \ if p < p {\n        return modp(n, p - p)\n    }\n    if p > n {\n        return\
    \ modp(n - p, p)\n    }\n    if p < n {\n        return modp(n, p - p)\n    }\n\
    \    return modp(n - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffffffffd?,\
    \ 0x5?)\n\t/tmp/tmp1p12nwfd_test.go:19 +0xa9 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef709\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42 +0x55\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42 +0x55 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42 +0x55\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42 +0x55 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42 +0x55\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42 +0x55 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42 +0x55\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42 +0x55 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42 +0x55\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42 +0x55 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42 +0x55\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1p12nwfd_test.go:42"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp7a61w_0t_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp7a61w_0t_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp7a61w_0t_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp7a61w_0t_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp7a61w_0t_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp7a61w_0t_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if p == 0 {\n        return 0\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n <= p {\n        return modp(n - 1, p) + p\n    }\n\
    \    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpxe30dol2_test.go:60: expected '%!s(int=3)', got '%!s(int=16)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpxe30dol2_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpxe30dol2_test.go:60: expected '%!s(int=8)', got '%!s(int=34)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpxe30dol2_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=10101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpxe30dol2_test.go:60: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpxe30dol2_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 2, p)\n    }\n\
    \    if p < p {\n        return modp(n - 3, p)\n    }\n    if p < p {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < p {\n        return modp(n - 5, p)\n\
    \    }\n    if p < p {\n        return modp(n - 6, p)\n    }\n    if p < p {\n\
    \        return modp(n - 7, p)\n    }\n    if p < p {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < p {\n        return modp(n - 9, p)\n    }\n    if p\
    \ < p {\n        return modp(n - 10, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < p {\n        return modp(n - 12, p)\n   \
    \ }\n    if p < p {\n        return modp(n - 13, p)\n    }\n    if p < p {\n \
    \       return modp(n - 14, p)\n    }\n    if p < p {\n        return modp(n -\
    \ 15, p)\n    }\n    if p < p {\n        return modp(n - 16, p)\n    }\n    if\
    \ p < p {\n        return modp(n - 17, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 18, p)\n    }\n    if p < p {\n        return modp(n - 19, p)\n   \
    \ }\n    if p < p {\n        return modp(n - 20, p)\n    }\n    if p < p {\n \
    \       return modp(n - 21, p)\n    }\n    if p < p {\n        return modp(n -\
    \ 22, p)\n    }\n    if p < p {\n        return modp(n - 23, p)\n    }\n    if\
    \ p < p {\n        return modp(n - 24, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 25, p)\n    }\n    if p < p {\n        return modp(n - 26, p)\n   \
    \ }\n    if p < p {\n        return modp(n - 27, p)\n    }\n    if p < p {\n \
    \       return modp(n - 28, p)\n    }\n    if p < p {\n        return modp(n -\
    \ 29, p)\n    }\n    if p < p {\n        return modp(n - 30, p)\n    }\n    if\
    \ p < p {\n        return modp(n - 31, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 32, p)\n    }\n    if p < p {\n        return modp(n - 33, p)\n   \
    \ }\n    if p < p {\n        return modp(n - 34, p)\n    }\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgc18qsu5_test.go:135:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < p {\n        return modp(n\
    \ - 3, p)\n    }\n    return modp(n - 4, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmp7hp8w3mb_test.go:19 +0xa9 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef709\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p)\n    }\n    return modp(n\
    \ - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp4t5fc3l6_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp4t5fc3l6_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp4t5fc3l6_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp4t5fc3l6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp4t5fc3l6_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp4t5fc3l6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n < p {\n        return\
    \ n\n    }\n    if n == p {\n        return 1\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    return modp(n - p, p) + p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpkz9iajwl_test.go:57: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpkz9iajwl_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkz9iajwl_test.go:57: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkz9iajwl_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkz9iajwl_test.go:57: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkz9iajwl_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    if n == p {\n        return p\n    }\n    if n > p {\n\
    \        return modp(n - p, p)\n    }\n    if n < p {\n        return modp(n -\
    \ p, p)\n    }\n    return modp(n - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp462_ylmt_test.go:66: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp462_ylmt_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp462_ylmt_test.go:66: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp462_ylmt_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp462_ylmt_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp462_ylmt_test.go:66: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 1, p) % p\n\
    \    }\n    return modp(n - 2, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp_3eoolkl_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp_3eoolkl_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp_3eoolkl_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp_3eoolkl_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp_3eoolkl_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if p == 0 {\n        return 0\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n <= p {\n        return modp(n - p, p)\n    }\n  \
    \  if p < n {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffffffffd?,\
    \ 0x5?)\n\t/tmp/tmpa1u0jej2_test.go:19 +0xae fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef70e\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36 +0x55\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36 +0x55 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36 +0x55\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36 +0x55 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36 +0x55\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36 +0x55 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36 +0x55\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36 +0x55 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36 +0x55\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36 +0x55 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36 +0x55\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpa1u0jej2_test.go:36"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p == 0 {\n        return 0\n    }\n    if p > n {\n       \
    \ return modp(n - p, p)\n    }\n    if p < n {\n        return modp(n, p)\n  \
    \  }\n    if p == 1 {\n        return modp(n - 1, p)\n    }\n    if n == 1 {\n\
    \        return modp(n - 1, p)\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == p {\n        return modp(n - 1, p)\n    }\n    if n == p {\n\
    \        return modp(n, p)\n    }\n    if n == p {\n        return modp(n - 1,\
    \ p)\n    }\n    if n == p {\n        return modp(n, p)\n    }\n    if n == p\
    \ {\n        return modp(n - 1, p)\n    }\n    if n == p {\n        return modp(n,\
    \ p)\n    }\n    if n == p {\n        return modp(n - 1, p)\n    }\n    if n ==\
    \ p {\n        return modp(n, p)\n    }\n    if n == p {\n        return modp(n\
    \ - 1, p)\n    }\n    if n == p {\n        return modp(n, p)\n    }\n    if n\
    \ == p {\n        return modp(n - 1, p)\n    }\n    if n == p {\n        return\
    \ modp(n, p)\n    }\n    if n == p {\n        return modp(n - 1, p)\n    }\n \
    \   if n == p {\n        return modp(n, p)\n    }\n    if n == p {\n        return\
    \ modp(n - 1, p)\n    }\n    if n == p {\n        return modp(n, p)\n    }\n \
    \   if n == p {\n        return modp(n - 1, p)\n    }\n    if n == p {\n     \
    \   return modp(n, p)\n    }\n    if n == p {\n        return modp(n - 1, p)\n\
    \    }\n    if n == p {\n        return modp(n, p)\n    }\n    if n == p {\n \
    \       return modp(n - 1, p)\n    }\n    if n == p {\n        return modp(n,\
    \ p)\n    }\n    if n == p {\n        return modp(n - 1, p)\n    }\n    if n ==\
    \ p {\n        return modp(n, p)\n    }\n    if n == p {\n        return modp(n\
    \ - 1, p)\n    }\n    if n == p {\n        return modp(n, p)\n    }\n    if n\
    \ == p {\n        return modp(n - 1, p)\n    }\n    if n == p {\n        return\
    \ modp(n, p)\n    }\n    if n == p {\n        return modp(n - 1, p)\n    }\n \
    \   if n == p {\n        return modp(n, p)\n    }\n    if n == p {\n        return\
    \ modp(n - 1, p)\n    }\n    if n == p {\n        return modp(n, p)\n    }\n \
    \   if n == p {\n        return modp(n - 1, p)\n    }\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp512v04mu_test.go:146:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    return modp(n - 4, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmpp59bf2xv_test.go:19 +0xcc fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef72c\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    return modp(n - 4, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmpp59bf2xv_test.go:19 +0xcc fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef72c\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38"
  timestamp: 1660075010
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - 1, p) + p\n    }\n    if n\
    \ < p {\n        return modp(n - 1, p)\n    }\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe45yv18i_test.go:35:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n   \
    \ }\n    if p < p {\n        return modp(n - 1, p*p)\n    }\n    return modp(n\
    \ - 1, p*p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpizgpv5qs_test.go:57: expected '%!s(int=3)', got '%!s(int=625)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpizgpv5qs_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpizgpv5qs_test.go:57: expected '%!s(int=8)', got '%!s(int=14641)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpizgpv5qs_test.go:57: expected\
    \ '%!s(int=4)', got '%!s(int=-5760591215363883007)'\n    --- FAIL: TestModp/test_num__6\
    \ (0.00s)\n        tmpizgpv5qs_test.go:57: expected '%!s(int=3)', got '%!s(int=-6909496412300378111)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n-1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpaxs_jeyc_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpaxs_jeyc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpaxs_jeyc_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpaxs_jeyc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpaxs_jeyc_test.go:54: expected '%!s(int=4)', got '%!s(int=130)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpaxs_jeyc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=135)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if p > p {\n        return modp(n - p, p)\n    }\n   \
    \ if p < p {\n        return modp(n, p - p)\n    }\n    return modp(n - p, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffffffffd?,\
    \ 0x5?)\n\t/tmp/tmp7vt1uohw_test.go:19 +0x8b fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6eb\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41 +0x59\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41 +0x59 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41 +0x59\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41 +0x59 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41 +0x59\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41 +0x59 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41 +0x59\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41 +0x59 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41 +0x59\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41 +0x59 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41 +0x59\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7vt1uohw_test.go:41"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return -1\n    }\n    if p < 3 {\n       \
    \ return -1\n    }\n    if p < 4 {\n        return -1\n    }\n    if p < 5 {\n\
    \        return -1\n    }\n    if p < 6 {\n        return -1\n    }\n    if p\
    \ < 7 {\n        return -1\n    }\n    if p < 8 {\n        return -1\n    }\n\
    \    if p < 9 {\n        return -1\n    }\n    if p < 10 {\n        return -1\n\
    \    }\n    if p < 11 {\n        return -1\n    }\n    if p < 12 {\n        return\
    \ -1\n    }\n    if p < 13 {\n        return -1\n    }\n    if p < 14 {\n    \
    \    return -1\n    }\n    if p < 15 {\n        return -1\n    }\n    if p < 16\
    \ {\n        return -1\n    }\n    if p < 17 {\n        return -1\n    }\n   \
    \ if p < 18 {\n        return -1\n    }\n    if p < 19 {\n        return -1\n\
    \    }\n    if p < 20 {\n        return -1\n    }\n    if p < 21 {\n        return\
    \ -1\n    }\n    if p < 22 {\n        return -1\n    }\n    if p < 23 {\n    \
    \    return -1\n    }\n    if p < 24 {\n        return -1\n    }\n    if p < 25\
    \ {\n        return -1\n    }\n    if p < 26 {\n        return -1\n    }\n   \
    \ if p < 27 {\n        return -1\n    }\n    if p < 28 {\n        return -1\n\
    \    }\n    if p < 29 {\n        return -1\n    }\n    if p < 30 {\n        return\
    \ -1\n    }\n    if p < 31 {\n        return -1\n    }\n    if p < 32 {\n    \
    \    return -1\n    }\n    if p < 33 {\n        return -1\n    }\n    if p < 34\
    \ {\n        return -1\n    }\n    if p < 35 {\n        return -1\n    }\n   \
    \ if p < 36 {\n        return -1\n    }\n    if p < 37 {\n        return -1\n\
    \    }\n    if p < 38 {\n        return -1\n    }\n    if p < 39 {\n        return\
    \ -1\n    }\n    if p < 40 {\n        return -1\n    }\n    if p < 41 {\n    \
    \    return -1\n    }\n    if p < 42 {\n        return -1\n    }\n    if p < 43\
    \ {\n        return -1\n    }\n    if p < 44 {\n        return -1\n    }\n   \
    \ if p < 45 {\n        return -1\n    }\n    if p < 46 {\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmrt28au__test.go:162:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n < p {\n        return\
    \ n\n    }\n    if n == p {\n        return 1\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    return modp(p, n)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpzhfc_kdh_test.go:57: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpzhfc_kdh_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpzhfc_kdh_test.go:57: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpzhfc_kdh_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpzhfc_kdh_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpzhfc_kdh_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p - 1) + 1\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=4)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) * p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) * p + modp(n - 1, p - p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp6t1cevvn_test.go:54: expected '%!s(int=3)', got '%!s(int=125)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp6t1cevvn_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=7200018645606877557)'\n    --- FAIL: TestModp/test_num__3\
    \ (0.00s)\n        tmp6t1cevvn_test.go:54: expected '%!s(int=8)', got '%!s(int=1331)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp6t1cevvn_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=4979617599619485809)'\n    --- FAIL: TestModp/test_num__5\
    \ (0.00s)\n        tmp6t1cevvn_test.go:54: expected '%!s(int=4)', got '%!s(int=8985370930000934825)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp6t1cevvn_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=8033366502585570893)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 7 {\n        return modp(n - 6, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) % p\n    }\n    if p < 11 {\n        return modp(n - 10, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) % p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) % p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) % p\n    }\n    if p < 16 {\n        return modp(n - 15, p) % p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) % p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) % p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) % p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ % p\n    }\n    if p < 21 {\n        return modp(n - 20, p) % p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) % p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) % p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) % p\n    }\n    if p < 25 {\n        return modp(n - 24, p) % p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) % p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) % p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) % p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ % p\n    }\n    if p < 30 {\n        return modp(n - 29, p) % p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp67dvk43__test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if p == 0 {\n        return 0\n    }\n    if p > n {\n       \
    \ return modp(n - p, p)\n    }\n    if p < n {\n        return modp(n, p - n)\n\
    \    }\n    q := p\n    for {\n        q = q * 10 + n % 10\n        if q > p {\n\
    \            break\n        }\n        n /= 10\n    }\n    return q\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffffffffd?,\
    \ 0x5?)\n\t/tmp/tmpt560bzyu_test.go:19 +0xf4 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef754\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33 +0x72\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33 +0x72 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33 +0x72\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33 +0x72 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33 +0x72\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33 +0x72 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33 +0x72\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33 +0x72 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33 +0x72\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33 +0x72 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33 +0x72\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpt560bzyu_test.go:33"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 3, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmph0xktblk_test.go:54: expected '%!s(int=3)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmph0xktblk_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmph0xktblk_test.go:54: expected '%!s(int=8)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmph0xktblk_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmph0xktblk_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmph0xktblk_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*2)\n    }\n    if p < 3 {\n        return modp(n - 1, p*3)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p*4)\n    }\n    if p < 5 {\n\
    \        return modp(n - 1, p*5)\n    }\n    if p < 6 {\n        return modp(n\
    \ - 1, p*6)\n    }\n    if p < 7 {\n        return modp(n - 1, p*7)\n    }\n \
    \   if p < 8 {\n        return modp(n - 1, p*8)\n    }\n    if p < 9 {\n     \
    \   return modp(n - 1, p*9)\n    }\n    if p < 10 {\n        return modp(n - 1,\
    \ p*10)\n    }\n    if p < 11 {\n        return modp(n - 1, p*11)\n    }\n   \
    \ if p < 12 {\n        return modp(n - 1, p*12)\n    }\n    if p < 13 {\n    \
    \    return modp(n - 1, p*13)\n    }\n    if p < 14 {\n        return modp(n -\
    \ 1, p*14)\n    }\n    if p < 15 {\n        return modp(n - 1, p*15)\n    }\n\
    \    if p < 16 {\n        return modp(n - 1, p*16)\n    }\n    if p < 17 {\n \
    \       return modp(n - 1, p*17)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 1, p*18)\n    }\n    if p < 19 {\n        return modp(n - 1, p*19)\n    }\n\
    \    if p < 20 {\n        return modp(n - 1, p*20)\n    }\n    if p < 21 {\n \
    \       return modp(n - 1, p*21)\n    }\n    if p < 22 {\n        return modp(n\
    \ - 1, p*22)\n    }\n    if p < 23 {\n        return modp(n - 1, p*23)\n    }\n\
    \    if p < 24 {\n        return modp(n - 1, p*24)\n    }\n    if p < 25 {\n \
    \       return modp(n - 1, p*25)\n    }\n    if p < 26 {\n        return modp(n\
    \ - 1, p*26)\n    }\n    if p < 27 {\n        return modp(n - 1, p*27)\n    }\n\
    \    if p < 28 {\n        return modp(n - 1, p*28)\n    }\n    if p < 29 {\n \
    \       return modp(n - 1, p*29)\n    }\n    if p < 30 {\n        return modp(n\
    \ - 1, p*30)\n    }\n    if p < 31 {\n        return modp(n - 1, p*31)\n    }\n\
    \    if p < 32 {\n        return modp(n - 1, p\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptmkq9elw_test.go:117:29: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p*p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=625)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=8)', got '%!s(int=14641)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=-5760591215363883007)'\n    --- FAIL: TestModp/test_num__6\
    \ (0.00s)\n        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=-6909496412300378111)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n   \
    \ }\n    if p < 4 {\n        return modp(n - 1, p)\n    }\n    if p < 5 {\n  \
    \      return modp(n - 1, p)\n    }\n    if p < 6 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 7 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 8 {\n        return modp(n - 1, p)\n    }\n    if p < 9 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p < 10 {\n        return modp(n - 1, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 1, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 13 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 14 {\n        return modp(n - 1, p)\n    }\n    if p < 15 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 16 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 17 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 18 {\n        return modp(n - 1, p)\n    }\n    if p < 19 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 20 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 21 {\n        return modp(n - 1, p)\n    }\n    if p < 22 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 23 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 24 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 25 {\n        return modp(n - 1, p)\n    }\n    if p < 26 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 27 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 28 {\n        return modp(n - 1, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 30 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 31 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 32 {\n        return modp(n - 1, p)\n    }\n    if p < 33 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 34 {\n        return modp(n - 1, p)\n    }\n\
    \    if p \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ym1s7mu_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n / 2, p)\n    }\n    if p < 7 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 9 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 11 {\n        return modp(n / 2, p)\n    }\n    if p < 13 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 15 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 17 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 19 {\n        return modp(n / 2, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 25 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 27 {\n        return modp(n / 2, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 31 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 33 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 35 {\n        return modp(n / 2, p)\n    }\n    if p < 37 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 39 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 41 {\n        return modp(n / 2, p)\n    }\n    if p < 43 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 45 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 47 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 49 {\n        return modp(n / 2, p)\n    }\n    if p < 51 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 53 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 55 {\n        return modp(n / 2, p)\n    }\n    if p < 57 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 59 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 61 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 63 {\n        return modp(n / 2, p)\n    }\n    if \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0r_is6q__test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp((n - 1) % p, p)\n    }\n    if p < p {\n        return\
    \ modp((n - 1) % p, p)\n    }\n    return modp((n - 1) % p, p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpommkwx9t_test.go:60: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpommkwx9t_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpommkwx9t_test.go:60: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpommkwx9t_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpommkwx9t_test.go:60: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpommkwx9t_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 7 {\n        return modp(n - 6, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) % p\n    }\n    if p < 11 {\n        return modp(n - 10, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) % p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) % p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) % p\n    }\n    if p < 16 {\n        return modp(n - 15, p) % p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) % p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) % p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) % p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ % p\n    }\n    if p < 21 {\n        return modp(n - 20, p) % p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) % p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) % p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) % p\n    }\n    if p < 25 {\n        return modp(n - 24, p) % p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) % p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) % p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) % p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ % p\n    }\n    if p < 30 {\n        return modp(n - 29, p) % p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp67dvk43__test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if p > p {\n        return modp(n - p, p)\n    }\n   \
    \ if p < p {\n        return modp(n - p, p)\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    if n > p\
    \ {\n        return modp(n - p, p)\n    }\n    return 0\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffffffffd?,\
    \ 0x5?)\n\t/tmp/tmp4066gv8e_test.go:19 +0xac fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef70c\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45 +0x55\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45 +0x55 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45 +0x55\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45 +0x55 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45 +0x55\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45 +0x55 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45 +0x55\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45 +0x55 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45 +0x55\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45 +0x55 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45 +0x55\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4066gv8e_test.go:45"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n\
    \    if p < 5 {\n        return modp(n - 1, p) * modp(n - 1, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 1, p) / modp(n - 1, p)\n    }\n    if p < 7\
    \ {\n        return modp(n - 1, p) % modp(n - 1, p)\n    }\n    if p < 8 {\n \
    \       return modp(n - 1, p) * modp(n - 1, p) / modp(n - 1, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 1, p) / modp(n - 1, p)\n    }\n    if p < 10\
    \ {\n        return modp(n - 1, p) % modp(n - 1, p)\n    }\n    if p < 11 {\n\
    \        return modp(n - 1, p) * modp(n - 1, p) / modp(n - 1, p)\n    }\n    if\
    \ p < 12 {\n        return modp(n - 1, p) / modp(n - 1, p)\n    }\n    if p <\
    \ 13 {\n        return modp(n - 1, p) % modp(n - 1, p)\n    }\n    if p < 14 {\n\
    \        return modp(n - 1, p) * modp(n - 1, p) / modp(n - 1, p)\n    }\n    if\
    \ p < 15 {\n        return modp(n - 1, p) / modp(n - 1, p)\n    }\n    if p <\
    \ 16 {\n        return modp(n - 1, p) % modp(n - 1, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 1, p) * modp(n - 1, p) / modp(n - 1, p)\n    }\n    if\
    \ p < 18 {\n        return modp(n - 1, p) / modp(n - 1, p)\n    }\n    if p <\
    \ 19 {\n        return modp(n - 1, p) % modp(n - 1, p)\n    }\n    if p < 20 {\n\
    \        return modp(n - 1, p) * modp(n - 1, p) / modp(n - 1, p)\n    }\n    if\
    \ p < 21 {\n        return modp(n - 1, p) / modp(n - 1, p)\n    }\n    if p <\
    \ 22 {\n        return modp(n - 1, p) % modp(n - 1, p)\n    }\n    if p < 23 {\n\
    \        return modp(n - 1, p) * modp(n - 1, p) / modp(n - 1, p)\n    }\n    if\
    \ p < 24 {\n        return modp(n - 1, p) / modp(n - 1, p)\n    }\n    if p <\
    \ 25 {\n        return modp(n - 1, p) % modp(n - 1, p)\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyp6yiytf_test.go:98:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n / 2, p)\n    }\n    if p < 7 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 11 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 13 {\n        return modp(n / 2, p)\n    }\n    if p < 17 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 19 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 23 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 29 {\n        return modp(n / 2, p)\n    }\n    if p < 39 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 49 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 59 {\n        return modp(n / 2, p)\n    }\n    if p < 69 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 79 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 89 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 99 {\n        return modp(n / 2, p)\n    }\n    if p < 109 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 119 {\n        return modp(n / 2, p)\n   \
    \ }\n    if p < 129 {\n        return modp(n / 2, p)\n    }\n    if p < 139 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 149 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 159 {\n        return modp(n / 2, p)\n    }\n   \
    \ if p < 169 {\n        return modp(n / 2, p)\n    }\n    if p < 179 {\n     \
    \   return modp(n / 2, p)\n    }\n    if p < 189 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 199 {\n        return modp(n / 2, p)\n    }\n    if p\
    \ < 209 {\n        return modp(n / 2, p)\n    }\n    if p < 219 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 229 {\n        return modp(n / 2, p)\n   \
    \ }\n    if p < 239 {\n        return modp(n / 2, p)\n    }\n    if \nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeoacs7eq_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p > p {\n        return modp(n - 1, p)\n    }\n    return modp(n\
    \ - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpw4esx5rh_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpw4esx5rh_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpw4esx5rh_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpw4esx5rh_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpw4esx5rh_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpw4esx5rh_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ modp(n - 1, p-1)\n    }\n    if p == 1 {\n        return n\n    }\n    if p\
    \ == 2 {\n        return modp(n - 1, p)\n    }\n    if n % p == 0 {\n        return\
    \ modp(n / p, p)\n    }\n    return modp(n / p, p) + p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp7qgx8z8u_test.go:60: expected '%!s(int=3)', got '%!s(int=6)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp7qgx8z8u_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=203)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp7qgx8z8u_test.go:60: expected '%!s(int=8)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp7qgx8z8u_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=102)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp7qgx8z8u_test.go:60: expected '%!s(int=4)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp7qgx8z8u_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*2)\n    }\n    if p < p {\n        return modp(n - 1, p*2)\n \
    \   }\n    return modp(n - 1, p*2+1)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpprt6svuo_test.go:54: expected '%!s(int=3)', got '%!s(int=23)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpprt6svuo_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=-417792)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpprt6svuo_test.go:54: expected '%!s(int=8)', got '%!s(int=47)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpprt6svuo_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=-3504693313536)'\n    --- FAIL: TestModp/test_num__5\
    \ (0.00s)\n        tmpprt6svuo_test.go:54: expected '%!s(int=4)', got '%!s(int=3221225471)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpprt6svuo_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=6442450943)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if p == 0 {\n        return 0\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n <= p {\n        return modp(n - p, p)\n    }\n  \
    \  if p < n {\n        return modp(n - p, p)\n    }\n    return modp(p, n)\n}\n\
    \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffffffffd?,\
    \ 0x5?)\n\t/tmp/tmp2o9voe8__test.go:19 +0xae fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef70e\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(p, n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=4)', got '%!s(int=150)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=155)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p == 1 {\n        return n\n    }\n    if p > n {\n       \
    \ return modp(n - p, p)\n    }\n    if p < n {\n        return modp(n, p - n)\n\
    \    }\n    return modp(n - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpxi3jzdz2_test.go:19 +0xb4 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef714\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69 fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69 fp=0xc020160428 sp=0xc020160408 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69 fp=0xc020160468 sp=0xc020160448 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69 fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69 fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n / 2, p)\n    }\n    if p < 7 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 11 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 13 {\n        return modp(n / 2, p)\n    }\n    if p < 17 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 19 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 23 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 29 {\n        return modp(n / 2, p)\n    }\n    if p < 31 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 37 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 43 {\n        return modp(n / 2, p)\n    }\n    if p < 49 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 63 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 69 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 73 {\n        return modp(n / 2, p)\n    }\n    if p < 79 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 83 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 89 {\n        return modp(n / 2, p)\n    }\n    if p < 97 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 103 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 109 {\n        return modp(n / 2, p)\n    }\n    if p\
    \ < 113 {\n        return modp(n / 2, p)\n    }\n    if p < 119 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 123 {\n        return modp(n / 2, p)\n   \
    \ }\n    if p < 129 {\n        return modp(n / 2, p)\n    }\n    if p < 131 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 137 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 143 {\n        return modp(n / 2, p)\n    }\n   \
    \ if p < 149 {\n        return modp(n / 2, p)\n    }\n    if \nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmparns6fud_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p > n {\n        return modp(n - 1, p) % p\n    }\n    if p\
    \ < n {\n        return modp(n, p - 1) % p\n    }\n    return modp(n / 2, p *\
    \ p % p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpe0kd5zr3_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpe0kd5zr3_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpe0kd5zr3_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpe0kd5zr3_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpe0kd5zr3_test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpe0kd5zr3_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    return n % p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp5vid4clv_test.go:48: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp5vid4clv_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp5vid4clv_test.go:48: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp5vid4clv_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp5vid4clv_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp5vid4clv_test.go:48: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p*p + modp(n - 1, p - 1))\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075024
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n-1, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 2, p)\n    }\n    if p < 5 {\n        return modp(n-1, p)\n    }\n    if p\
    \ < 6 {\n        return modp(n - 2, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 3, p)\n    }\n    if p < 8 {\n        return modp(n-1, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 2, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 3, p)\n    }\n    if p < 11 {\n        return modp(n-1, p)\n\
    \    }\n    if p < 12 {\n        return modp(n - 2, p)\n    }\n    if p < 13 {\n\
    \        return modp(n - 3, p)\n    }\n    if p < 14 {\n        return modp(n-1,\
    \ p)\n    }\n    if p < 15 {\n        return modp(n - 2, p)\n    }\n    if p <\
    \ 16 {\n        return modp(n - 3, p)\n    }\n    if p < 17 {\n        return\
    \ modp(n-1, p)\n    }\n    if p < 18 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 19 {\n        return modp(n - 3, p)\n    }\n    if p < 20 {\n    \
    \    return modp(n-1, p)\n    }\n    if p < 21 {\n        return modp(n - 2, p)\n\
    \    }\n    if p < 22 {\n        return modp(n - 3, p)\n    }\n    if p < 23 {\n\
    \        return modp(n-1, p)\n    }\n    if p < 24 {\n        return modp(n -\
    \ 2, p)\n    }\n    if p < 25 {\n        return modp(n - 3, p)\n    }\n    if\
    \ p < 26 {\n        return modp(n-1, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 2, p)\n    }\n    if p < 28 {\n        return modp(n - 3, p)\n    }\n\
    \    if p < 29 {\n        return modp(n-1, p)\n    }\n    if p < 30 {\n      \
    \  return modp(n - 2, p)\n    }\n    if p < 31 {\n        return modp(n - 3, p)\n\
    \    }\n    if p < 32 {\n        return modp(n-1, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 2, p)\n    }\n    if p < 34 {\n        return modp(\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwb_xv4qe_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p)\n    }\n    if p < 5 {\n\
    \        return modp(n - 1, p)\n    }\n    if p < 6 {\n        return modp(n -\
    \ 1, p)\n    }\n    if p < 7 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ < 8 {\n        return modp(n - 1, p)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 10 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 11 {\n        return modp(n - 1, p)\n    }\n    if p < 12 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 13 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 14 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 15 {\n        return modp(n - 1, p)\n    }\n    if p < 16 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 17 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 18 {\n        return modp(n - 1, p)\n    }\n    if p < 19 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 20 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 22 {\n        return modp(n - 1, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 24 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 25 {\n        return modp(n - 1, p)\n    }\n    if p < 26 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 27 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 28 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 29 {\n        return modp(n - 1, p)\n    }\n    if p < 30 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 31 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 32 {\n        return modp(n - 1, p)\n    }\n    if p < 33 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 34 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw5jl8bbr_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < p {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < p {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < p {\n        return modp(n - 5, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < p {\n        return modp(n - 7, p)\n    }\n\
    \    if p < p {\n        return modp(n - 8, p)\n    }\n    if p < p {\n      \
    \  return modp(n - 9, p)\n    }\n    if p < p {\n        return modp(n - 10, p)\n\
    \    }\n    if p < p {\n        return modp(n - 11, p)\n    }\n    if p < p {\n\
    \        return modp(n - 12, p)\n    }\n    if p < p {\n        return modp(n\
    \ - 13, p)\n    }\n    if p < p {\n        return modp(n - 14, p)\n    }\n   \
    \ if p < p {\n        return modp(n - 15, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 16, p)\n    }\n    if p < p {\n        return modp(n - 17, p)\n   \
    \ }\n    if p < p {\n        return modp(n - 18, p)\n    }\n    if p < p {\n \
    \       return modp(n - 19, p)\n    }\n    if p < p {\n        return modp(n -\
    \ 20, p)\n    }\n    if p < p {\n        return modp(n - 21, p)\n    }\n    if\
    \ p < p {\n        return modp(n - 22, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 23, p)\n    }\n    if p < p {\n        return modp(n - 24, p)\n   \
    \ }\n    if p < p {\n        return modp(n - 25, p)\n    }\n    if p < p {\n \
    \       return modp(n - 26, p)\n    }\n    if p < p {\n        return modp(n -\
    \ 27, p)\n    }\n    if p < p {\n        return modp(n - 28, p)\n    }\n    if\
    \ p < p {\n        return modp(n - 29, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 30, p)\n    }\n    if p < p {\n        return modp(n - 31, p)\n   \
    \ }\n    if p < p {\n        return modp(n - 32, p)\n    }\n    if p < p {\n \
    \       return modp(n - 33, p)\n    }\n    if p < p {\n        return modp(n -\
    \ 34, p)\n    }\n    if p < p {\n        return modp(n - 35, \nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzm6fdqen_test.go:133:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    return modp(n - 4, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmpp59bf2xv_test.go:19 +0xcc fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef72c\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6c8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38 +0x68\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6c8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpp59bf2xv_test.go:38"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 7 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 5, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 13 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 15 {\n        return modp(n - 8, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 25 {\n        return modp(n - 12, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 29 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 31 {\n        return modp(n - 15, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 37 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 39 {\n        return modp(n - 19, p)\n    }\n    if p < 41 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 43 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 45 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 47 {\n        return modp(n - 23, p)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 51 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 53 {\n        return modp(n - 26, p)\n    }\n    if p < 55 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 59 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 61 {\n        return modp(n - 30, p)\n    }\n    if p < 63 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 65 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 67 {\n        return mod\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvn_sa9_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p) * p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) * (p - 1)\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) * (p - 2)\n    }\n    if p < 7 {\n        return modp(n - 1,\
    \ p) * (p - 3)\n    }\n    if p < 8 {\n        return modp(n - 1, p) * (p - 4)\n\
    \    }\n    if p < 9 {\n        return modp(n - 1, p) * (p - 5)\n    }\n    if\
    \ p < 10 {\n        return modp(n - 1, p) * (p - 6)\n    }\n    if p < 11 {\n\
    \        return modp(n - 1, p) * (p - 7)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 1, p) * (p - 8)\n    }\n    if p < 13 {\n        return modp(n - 1,\
    \ p) * (p - 9)\n    }\n    if p < 14 {\n        return modp(n - 1, p) * (p - 10)\n\
    \    }\n    if p < 15 {\n        return modp(n - 1, p) * (p - 11)\n    }\n   \
    \ if p < 16 {\n        return modp(n - 1, p) * (p - 12)\n    }\n    if p < 17\
    \ {\n        return modp(n - 1, p) * (p - 13)\n    }\n    if p < 18 {\n      \
    \  return modp(n - 1, p) * (p - 14)\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) * (p - 15)\n    }\n    if p < 20 {\n        return modp(n - 1, p) *\
    \ (p - 16)\n    }\n    if p < 21 {\n        return modp(n - 1, p) * (p - 17)\n\
    \    }\n    if p < 22 {\n        return modp(n - 1, p) * (p - 18)\n    }\n   \
    \ if p < 23 {\n        return modp(n - 1, p) * (p - 19)\n    }\n    if p < 24\
    \ {\n        return modp(n - 1, p) * (p - 20)\n    }\n    if p < 25 {\n      \
    \  return modp(n - 1, p) * (p - 21)\n    }\n    if p < 26 {\n        return modp(n\
    \ - 1, p) * (p - 22)\n    }\n    if p < 27 {\n        return modp(n - 1, p) *\
    \ (p - 23)\n    }\n    if p < 28 {\n        return modp(n - 1, p) * (p - 24)\n\
    \    }\n    if p < 29 {\n        return modp(n - 1, p) * (p - 25)\n    }\n   \
    \ if p < 30 {\n        return modp(n - 1, p) * (p - 26)\n    }\n    if p < 31\
    \ {\n        return \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpktwhw0xi_test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    return n % p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp5vid4clv_test.go:48: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp5vid4clv_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp5vid4clv_test.go:48: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp5vid4clv_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp5vid4clv_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp5vid4clv_test.go:48: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - p, p)\n    }\n    if p < n\
    \ {\n        return modp(n, p - n)\n    }\n    return modp(n / 2, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmp89buxcvp_test.go:19 +0xa8 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef708\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30 +0x69\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30 +0x69 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30 +0x69\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30 +0x69 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30 +0x69\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30 +0x69 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30 +0x69\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30 +0x69 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30 +0x69\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30 +0x69 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30 +0x69\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp89buxcvp_test.go:30"
  timestamp: 1660075012
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*2)\n    }\n    if p < 3 {\n        return modp(n - 1, p*3)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p*4)\n    }\n    if p < 5 {\n\
    \        return modp(n - 1, p*5)\n    }\n    if p < 6 {\n        return modp(n\
    \ - 1, p*6)\n    }\n    if p < 7 {\n        return modp(n - 1, p*7)\n    }\n \
    \   if p < 8 {\n        return modp(n - 1, p*8)\n    }\n    if p < 9 {\n     \
    \   return modp(n - 1, p*9)\n    }\n    if p < 10 {\n        return modp(n - 1,\
    \ p*10)\n    }\n    if p < 11 {\n        return modp(n - 1, p*11)\n    }\n   \
    \ if p < 12 {\n        return modp(n - 1, p*12)\n    }\n    if p < 13 {\n    \
    \    return modp(n - 1, p*13)\n    }\n    if p < 14 {\n        return modp(n -\
    \ 1, p*14)\n    }\n    if p < 15 {\n        return modp(n - 1, p*15)\n    }\n\
    \    if p < 16 {\n        return modp(n - 1, p*16)\n    }\n    if p < 17 {\n \
    \       return modp(n - 1, p*17)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 1, p*18)\n    }\n    if p < 19 {\n        return modp(n - 1, p*19)\n    }\n\
    \    if p < 20 {\n        return modp(n - 1, p*20)\n    }\n    if p < 21 {\n \
    \       return modp(n - 1, p*21)\n    }\n    if p < 22 {\n        return modp(n\
    \ - 1, p*22)\n    }\n    if p < 23 {\n        return modp(n - 1, p*23)\n    }\n\
    \    if p < 24 {\n        return modp(n - 1, p*24)\n    }\n    if p < 25 {\n \
    \       return modp(n - 1, p*25)\n    }\n    if p < 26 {\n        return modp(n\
    \ - 1, p*26)\n    }\n    if p < 27 {\n        return modp(n - 1, p*27)\n    }\n\
    \    if p < 28 {\n        return modp(n - 1, p*28)\n    }\n    if p < 29 {\n \
    \       return modp(n - 1, p*29)\n    }\n    if p < 30 {\n        return modp(n\
    \ - 1, p*30)\n    }\n    if p < 31 {\n        return modp(n - 1, p*31)\n    }\n\
    \    if p < 32 {\n        return modp(n - 1, p\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptmkq9elw_test.go:117:29: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p\
    \ < 3 {\n        return modp(n - 2, p) % p\n    }\n    if p < 5 {\n        return\
    \ modp(n - 3, p) % p\n    }\n    if p < 7 {\n        return modp(n - 4, p) % p\n\
    \    }\n    if p < 9 {\n        return modp(n - 5, p) % p\n    }\n    if p < 11\
    \ {\n        return modp(n - 6, p) % p\n    }\n    if p < 13 {\n        return\
    \ modp(n - 7, p) % p\n    }\n    if p < 15 {\n        return modp(n - 8, p) %\
    \ p\n    }\n    if p < 17 {\n        return modp(n - 9, p) % p\n    }\n    if\
    \ p < 19 {\n        return modp(n - 10, p) % p\n    }\n    if p < 23 {\n     \
    \   return modp(n - 11, p) % p\n    }\n    if p < 25 {\n        return modp(n\
    \ - 12, p) % p\n    }\n    if p < 27 {\n        return modp(n - 13, p) % p\n \
    \   }\n    if p < 29 {\n        return modp(n - 14, p) % p\n    }\n    if p <\
    \ 31 {\n        return modp(n - 15, p) % p\n    }\n    if p < 33 {\n        return\
    \ modp(n - 16, p) % p\n    }\n    if p < 35 {\n        return modp(n - 17, p)\
    \ % p\n    }\n    if p < 37 {\n        return modp(n - 18, p) % p\n    }\n   \
    \ if p < 39 {\n        return modp(n - 19, p) % p\n    }\n    if p < 41 {\n  \
    \      return modp(n - 20, p) % p\n    }\n    if p < 43 {\n        return modp(n\
    \ - 21, p) % p\n    }\n    if p < 45 {\n        return modp(n - 22, p) % p\n \
    \   }\n    if p < 47 {\n        return modp(n - 23, p) % p\n    }\n    if p <\
    \ 49 {\n        return modp(n - 24, p) % p\n    }\n    if p < 51 {\n        return\
    \ modp(n - 25, p) % p\n    }\n    if p < 53 {\n        return modp(n - 26, p)\
    \ % p\n    }\n    if p < 55 {\n        return modp(n - 27, p) % p\n    }\n   \
    \ if p < 57 {\n        return modp(n - 28, p) % p\n    }\n    if p < 59 {\n  \
    \      return modp(n - 29, p) % \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9rkbbupy_test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 2, p) + p\n\
    \    }\n    return modp(n - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpghgprbyr_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpghgprbyr_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpghgprbyr_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpghgprbyr_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpghgprbyr_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 2, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmphjzoj4d1_test.go:54: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmphjzoj4d1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=55651)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphjzoj4d1_test.go:54: expected '%!s(int=8)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphjzoj4d1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=5051)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphjzoj4d1_test.go:54: expected '%!s(int=4)', got '%!s(int=76)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphjzoj4d1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=80)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpsbc6wxme_test.go:19 +0x85 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p*p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=625)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=8)', got '%!s(int=14641)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=-5760591215363883007)'\n    --- FAIL: TestModp/test_num__6\
    \ (0.00s)\n        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=-6909496412300378111)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p > n {\n        return modp(n - 1, p) + modp(n, p)\n    }\n\
    \    if p < n {\n        return modp(n - 1, p) - modp(n, p)\n    }\n    return\
    \ modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0x1?, 0x5?)\n\
    \t/tmp/tmpf8owwki3_test.go:19 +0x118 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef778\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xba\
    \ fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef71a\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xce fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef72e\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xce\
    \ fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef72e\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xce fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef72e\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xce\
    \ fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef72e\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xce fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef72e\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xce\
    \ fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef72e\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xce fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef72e\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xce\
    \ fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef72e\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xce fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef72e\n\
    command-line-arguments_test.modp(0x2, 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xce\
    \ fp=0xc0201e0560 sp=0xc0201e0538 pc=0x4ef72e\ncommand-line-arguments_test.modp(0x2,\
    \ 0x5)\n\t/tmp/tmpf8owwki3_test.go:30 +0xce fp=0xc0201e0588 sp=0xc0201e0560"
  timestamp: 1660075012
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) + modp(n - 1, modp(n - 2, p))\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075025
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n / 2, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 6 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 7 {\n        return modp(n / 2, p)\n    }\n    if p < 8 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 9 {\n        return modp(n /\
    \ 2, p)\n    }\n    if p < 10 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n / 2, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 13 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 14 {\n        return modp(n / 2, p)\n    }\n    if p < 15 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 16 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 17 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 18 {\n        return modp(n / 2, p)\n    }\n    if p < 19 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 20 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 21 {\n        return modp(n / 2, p)\n    }\n    if p < 22 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 23 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 24 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 25 {\n        return modp(n / 2, p)\n    }\n    if p < 26 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 27 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 28 {\n        return modp(n / 2, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 30 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 31 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 32 {\n        return modp(n / 2, p)\n    }\n    if p \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpddigehnh_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - p, p)\n    }\n    if p < n\
    \ {\n        return modp(n, p - n)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmps81uubq3_test.go:19 +0x9f fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ff\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160428 sp=0xc020160408 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160468 sp=0xc020160448 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:3"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p*p + p*p)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=3)', got '%!s(int=5000)'\n\
    \    --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=8)', got '%!s(int=117128)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p > p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) + modp(n - 1, p - p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp5ypgxi01_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp5ypgxi01_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp5ypgxi01_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp5ypgxi01_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp5ypgxi01_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp5ypgxi01_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\n\
    FAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    return modp(n - 3, p) + modp(n\
    \ - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd999e57?,\
    \ 0x65?)\n\t/tmp/tmpnensmeqm_test.go:19 +0xe5 fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef745\ncommand-line-arguments_test.modp(0xfffffffffd999e5a, 0x65)\n\t\
    /tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e5d, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e60,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e63, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e66,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e69, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e6c,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e6f, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e72,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e75, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e78,\
    \ 0x6"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 7 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 5, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 13 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 15 {\n        return modp(n - 8, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 25 {\n        return modp(n - 12, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 29 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 31 {\n        return modp(n - 15, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 37 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 39 {\n        return modp(n - 19, p)\n    }\n    if p < 41 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 43 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 45 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 47 {\n        return modp(n - 23, p)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 51 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 53 {\n        return modp(n - 26, p)\n    }\n    if p < 55 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 59 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 61 {\n        return modp(n - 30, p)\n    }\n    if p < 63 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 65 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 67 {\n        return mod\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvn_sa9_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if p == 0 {\n        return 0\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n <= p {\n        return modp(n - p, p)\n    }\n  \
    \  if p < n {\n        return modp(n - p, p)\n    }\n    return modp(p, n)\n}\n\
    \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffffffffd?,\
    \ 0x5?)\n\t/tmp/tmp2o9voe8__test.go:19 +0xae fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef70e\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36 +0x55\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp2o9voe8__test.go:36"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == p {\n        return n\n    }\n    if n >= p {\n      \
    \  return modp(n - p, p)\n    }\n    return modp(n - p, p) + p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpt4zcvce2_test.go:57: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpt4zcvce2_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpt4zcvce2_test.go:57: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpt4zcvce2_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpt4zcvce2_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpt4zcvce2_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p > 2 {\n        return modp(n - 1, p - 1)\
    \ + p\n    }\n    return modp(n - 1, p) + modp(n - 1, p - 1)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmps98r6_e2_test.go:54: expected '%!s(int=3)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmps98r6_e2_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=506651)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmps98r6_e2_test.go:54: expected '%!s(int=8)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmps98r6_e2_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=5150)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmps98r6_e2_test.go:54: expected '%!s(int=4)', got '%!s(int=365)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmps98r6_e2_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=392)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p > n {\n        return modp(n - 1, p)\n \
    \   }\n    if p % 2 == 0 {\n        return modp(n / 2, p)\n    }\n    return modp(n\
    \ / 2, p) + modp(n / 2, p / 2)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpbnqzuree_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpbnqzuree_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=301)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpbnqzuree_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpbnqzuree_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpbnqzuree_test.go:57: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpbnqzuree_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p > n {\n        return modp(n - 1, p)\n \
    \   }\n    if p % 2 == 0 {\n        return modp(n / 2, p)\n    }\n    return modp(n\
    \ / 2, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp8je_gsro_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp8je_gsro_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=505)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp8je_gsro_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp8je_gsro_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp8je_gsro_test.go:57: expected '%!s(int=4)', got '%!s(int=20)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp8je_gsro_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p)\n    }\n    if p < 5 {\n\
    \        return modp(n - 1, p)\n    }\n    if p < 6 {\n        return modp(n -\
    \ 1, p)\n    }\n    if p < 7 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ < 8 {\n        return modp(n - 1, p)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 10 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 11 {\n        return modp(n - 1, p)\n    }\n    if p < 12 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 13 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 14 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 15 {\n        return modp(n - 1, p)\n    }\n    if p < 16 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 17 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 18 {\n        return modp(n - 1, p)\n    }\n    if p < 19 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 20 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 22 {\n        return modp(n - 1, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 24 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 25 {\n        return modp(n - 1, p)\n    }\n    if p < 26 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 27 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 28 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 29 {\n        return modp(n - 1, p)\n    }\n    if p < 30 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 31 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 32 {\n        return modp(n - 1, p)\n    }\n    if p < 33 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 34 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw5jl8bbr_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if p > p {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p)\n    }\n    return modp(n - 1,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 4 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n - 3, p)\n    }\n    return modp(n - 4,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmp1c2gzr94_test.go:19 +0xe5 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef745\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41 +0x6e\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6ce\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41 +0x6e fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6ce\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41 +0x6e\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6ce\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41 +0x6e fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6ce\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41 +0x6e\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6ce\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41 +0x6e fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6ce\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41 +0x6e\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6ce\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41 +0x6e fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6ce\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41 +0x6e\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6ce\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41 +0x6e fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6ce\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41 +0x6e\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6ce\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp1c2gzr94_test.go:41"
  timestamp: 1660075012
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 5 {\n        return modp(n - 1, p) + p\n    }\n    if p < 7\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 9 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 15 {\n        return modp(n - 1, p) + p\n    }\n    if p < 17 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 23 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 29 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 31 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 33 {\n        return modp(n - 1, p) + p\n    }\n    if p < 35\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 37 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 39 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 41 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 43 {\n        return modp(n - 1, p) + p\n    }\n    if p < 45 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 47 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 49 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 51 {\n        return modp(n - 1, p) + p\n    }\n    if p < 53 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 55 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 57 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 59 {\n        return modp(n - 1, p) + p\n    }\n    if p < 61\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 63 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8e9_gp0w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    if n ==\
    \ p {\n        return n\n    }\n    return modp(n - p, p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp4badvcon_test.go:57: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp4badvcon_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp4badvcon_test.go:57: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp4badvcon_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp4badvcon_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp4badvcon_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p) + modp(n\
    \ - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpbvdvej61_test.go:19 +0x85 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpbvdvej61_test.go:33"
  timestamp: 1660075012
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 7 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 5, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 13 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 15 {\n        return modp(n - 8, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 25 {\n        return modp(n - 12, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 29 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 31 {\n        return modp(n - 15, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 37 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 39 {\n        return modp(n - 19, p)\n    }\n    if p < 41 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 43 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 45 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 47 {\n        return modp(n - 23, p)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 51 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 53 {\n        return modp(n - 26, p)\n    }\n    if p < 55 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 59 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 61 {\n        return modp(n - 30, p)\n    }\n    if p < 63 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 65 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 67 {\n        return mod\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvn_sa9_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
