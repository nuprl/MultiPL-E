name: HumanEval_82_prime_length
language: go_test.go
prompt: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function that takes a string and returns True if the string\n// length\
  \ is a prime number or False otherwise\n// Examples\n// prime_length('Hello') ==\
  \ True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
  // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n"
tests: "func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
  \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
  ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
  \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
  world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
  \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
  \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n \
  \    { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
  gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
  \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
  \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
  \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
  \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    length := len(myString)\n    prime := true\n    for i := 2; i <\
    \ length; i++ {\n        if myString[i] != myString[length-1] {\n            prime\
    \ = false\n            break\n        }\n    }\n    return prime\n}\n", "    length\
    \ := len(myString)\n    prime := true\n    for i := 2; i <= length/2; i++ {\n\
    \        if myString[i] != myString[i/2] {\n            prime = false\n      \
    \      break\n        }\n    }\n    return prime\n}\n", "    length := len(myString)\n\
    \    if length < 2 {\n        return false\n    }\n    primes := make([]bool,\
    \ length+1)\n    primes[0] = true\n    for i := 2; i < length; i++ {\n       \
    \ if primes[i] {\n            for j := 2; i*j < length; j++ {\n              \
    \  primes[i*j] = false\n            }\n        }\n    }\n    return primes[length]\n\
    }\n", "    // Write your code here\n    length := len(myString)\n    primes :=\
    \ make([]int, length)\n    for i := 0; i < length; i++ {\n        primes[i] =\
    \ 1\n    }\n    for i := 2; i < length; i++ {\n        if primes[i] == 0 {\n \
    \           for j := 0; j < i; j++ {\n                if myString[j] != 'a' {\n\
    \                    primes[i] += 1\n                    break\n             \
    \   }\n            }\n        }\n    }\n    if primes[length-1] == 0 {\n     \
    \   return true\n    }\n    return false\n}\n", "    length := len(myString)\n\
    \    if length < 2 {\n        return false\n    }\n    for i := 2; i < length;\
    \ i++ {\n        if myString[i] != myString[i/2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    length := len(myString)\n    if\
    \ length < 2 {\n        return false\n    }\n    for i := 2; i <= length/2; i++\
    \ {\n        if myString[i] != myString[i/2] {\n            return false\n   \
    \     }\n    }\n    return true\n}\n", "    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n", "    // Your code here\n    length := len(myString)\n    prime\
    \ := true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-2-i] {\n                if\
    \ myString[i] != myString[length-3*i] {\n                    prime = false\n \
    \               }\n            }\n        }\n    }\n    return prime\n}\n", " \
    \   length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i] {\n                prime = false\n            }\n    \
    \    }\n    }\n    return prime\n}\n", "    length := len(myString)\n    if length\
    \ < 2 {\n        return false\n    }\n    primes := make([]bool, length-1)\n \
    \   for i := 0; i < length-1; i++ {\n        if myString[i] > myString[i+1] {\n\
    \            return false\n        }\n    }\n    for i := 2; i < length-1; i++\
    \ {\n        if primes[i] {\n            return false\n        }\n        for\
    \ j := i + 1; j < length; j++ {\n            if myString[j] > myString[i] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    // Write your code here\n    length := len(myString)\n    prime :=\
    \ true\n    \n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            prime := false\n            break\n        }\n    }\n    \n \
    \   return prime\n}\n", "    // Your code here\n    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            prime := false\n            break\n   \
    \     }\n    }\n    return prime\n}\n", "    length := len(myString)\n    primes\
    \ := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97}\n    for i := 0; i < length; i++ {\n        if myString[i]\
    \ > 'z' {\n            return false\n        }\n        for _, prime := range\
    \ primes {\n            if myString[i] == string(prime) {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n", "    length :=\
    \ len(myString)\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    prime := true\n   \
    \ for i := 0; i < length; i++ {\n        if myString[i] > 'z' {\n            prime\
    \ = false\n            break\n        }\n        for _, prime := range primes\
    \ {\n            if myString[i] == string(prime) {\n                prime = false\n\
    \                break\n            }\n        }\n        if prime {\n       \
    \     primes = append(primes, length)\n        }\n    }\n    return prime\n}\n",
  "    // Write your code here\n    length := len(myString)\n    prime := true\n \
    \   for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            if myString[i] != myString[length-i] {\n                prime\
    \ = false\n            }\n        }\n    }\n    return prime\n}\n", "    // Your\
    \ code here\n    length := len(myString)\n    prime := true\n    for i := 2; i\
    \ < length; i++ {\n        if myString[i] != myString[length-1] {\n          \
    \  if myString[i] % i == 0 {\n                prime = false\n            }\n \
    \       }\n    }\n    return prime\n}\n", "    // Write your code here\n    length\
    \ := len(myString)\n    primes := make([]int, length)\n    for i := 0; i < length;\
    \ i++ {\n        primes[i] = 1\n    }\n    for i := 2; i < length; i++ {\n   \
    \     if primes[i] == 0 {\n            for j := 2; j < i; j++ {\n            \
    \    if primes[j] == 0 {\n                    primes[j] = 1\n                \
    \    break\n                }\n            }\n        }\n    }\n    for i := 0;\
    \ i < length; i++ {\n        if primes[i] == 1 {\n            return true\n  \
    \      }\n    }\n    return false\n}\n", "    // Write your code here\n    length\
    \ := len(myString)\n    prime := true\n    for i := 2; i < length; i++ {\n   \
    \     if myString[i] != myString[length-1] {\n            if myString[i] != myString[length-i-1]\
    \ {\n                prime = false\n                break\n            }\n   \
    \     }\n    }\n    return prime\n}\n", "    // Write your logic here\n    length\
    \ := len(myString)\n    prime := true\n    for i := 2; i < length; i++ {\n   \
    \     if myString[i] != myString[length-1] {\n            if myString[i] != myString[length-i-1]\
    \ {\n                prime = false\n                break\n            }\n   \
    \     }\n    }\n    return prime\n}\n", "    length := len(myString)\n    if length\
    \ < 2 {\n        return false\n    }\n    prime := true\n    for i := 2; i < length;\
    \ i++ {\n        if myString[i] != myString[length-1] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
