name: HumanEval_68_pluck
language: go_test.go
prompt: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\
  Given an array representing a branch of a tree that has non-negative integer nodes\n\
  // your task is to pluck one of the nodes and return it.\n// The plucked node should\
  \ be the node with the smallest even value.\n// If multiple nodes with the same\
  \ smallest even value are found return the node that has smallest index.\n// The\
  \ plucked node should be returned in a list, [ smalest_value, its index ],\n// If\
  \ there are no even values or the given array is empty, return [].\n// Example 1:\n\
  // Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value,\
  \ and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n// Output: [2,\
  \ 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\
  \ \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n// Input: [5, 0,\
  \ 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest value, but \
  \ there are two zeros,\n// so we will choose the first zero, which has the smallest\
  \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
  func pluck(arr []int) []int {\n"
tests: "func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
  \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
  \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0,\
  \ 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
  \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual:\
  \ candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n \
    \   for _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n\
    \                min = v\n                index = index\n            }\n     \
    \   } else {\n            if min == v {\n                index = index\n     \
    \       }\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    var result []int\n    var smallestValue\
    \ int\n    var smallestIndex int\n    var index int\n    for _, value := range\
    \ arr {\n        if smallestValue == 0 || value < smallestValue {\n          \
    \  smallestValue = value\n            smallestIndex = index\n        }\n     \
    \   index++\n    }\n    if smallestValue == 0 {\n        return result\n    }\n\
    \    for _, value := range arr {\n        if value == smallestValue {\n      \
    \      result = append(result, smallestValue)\n            result = append(result,\
    \ smallestIndex)\n        }\n    }\n    return result\n}\n", "    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for _, v := range m {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    if len(result) == 0 {\n        return\
    \ nil\n    }\n    if len(result) == 1 {\n        return result[0]\n    }\n   \
    \ return result\n}\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(arr))\n    arr", "    sort.Ints(arr)\n    smalest_value :=\
    \ arr[0]\n    smalest_index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if v < smalest_value {\n                smalest_value =\
    \ v\n                smalest_index = sort.SearchInts(arr, v)\n            }\n\
    \        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "   \
    \ result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if min > v {\n             \
    \   min = v\n                index = index\n            }\n        } else {\n\
    \            if min == v {\n                index = index\n            }\n   \
    \     }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    m := make(map[int]int)\n    for _, v :=\
    \ range arr {\n        m[v] = m[min(v, m[v])]\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for _, v := range m {\n        result = append(result, v)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    index := 0\n\
    \    min := arr[0]\n    for _, v := range arr {\n        if v%2 == 0 {\n     \
    \       if min > v {\n                min = v\n                index = index +\
    \ 1\n            }\n        } else {\n            if min == v {\n            \
    \    index = index + 1\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, val := range\
    \ arr {\n        if val < min {\n            min = val\n            index = -1\n\
    \        }\n        if val == min {\n            index = index + 1\n        }\n\
    \    }\n    if index == -1 {\n        return nil\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n", "    var\
    \ result []int\n    var minVal int\n    var minIndex int\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n \
    \               minVal = v\n                minIndex = -1\n            }\n   \
    \     } else {\n            if minVal == 0 || v > minVal {\n                minVal\
    \ = v\n                minIndex = -1\n            }\n        }\n    }\n    if\
    \ minVal == 0 {\n        return []\n    }\n    result = append(result, minVal)\n\
    \    if minIndex == -1 {\n        return result\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] == minVal {\n            result = append(result, i)\n\
    \        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n    for\
    \ _, v := range arr {\n        m[v] = m[min(m[v], len(m))]\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for _, v := range m {\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    min :=\
    \ arr[0]\n    index := 0\n    for _, value := range arr {\n        if value%2\
    \ == 0 {\n            if value < min {\n                min = value\n        \
    \        index = index\n            }\n        } else {\n            if min >\
    \ value {\n                min = value\n                index = index\n      \
    \      }\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    m := make(map[int]int)\n    for _, v :=\
    \ range arr {\n        m[v] = m[v] + 1\n    }\n    arr2 := make([]int, 0, len(m))\n\
    \    for _, v := range m {\n        if v%2 == 0 {\n            arr2 = append(arr2,\
    \ v)\n        }\n    }\n    if len(arr2) == 0 {\n        return []\n    }\n  \
    \  arr3 = make([]int, 0, len(arr2))\n    for _, v := range arr2 {\n        arr3\
    \ = append(arr3, v)\n    }\n    return arr3\n}\n", "    sort.Ints(arr)\n    index\
    \ := 0\n    smalest := arr[0]\n    for _, v := range arr {\n        if v%2 ==\
    \ 0 {\n            if smalest == v {\n                index = index + 1\n    \
    \        } else {\n                smalest = v\n                index = index\n\
    \            }\n        }\n    }\n    return []int{smalest, index}\n}\n", "  \
    \  // write your code here\n    arr := make([]int, len(arr))\n    arr[0] = arr[0]\n\
    \    arr[1] = arr[1]\n    arr[2] = arr[2]\n    arr[3] = arr[3]\n    arr[4] = arr[4]\n\
    \    arr[5] = arr[5]\n    arr[6] = arr[6]\n    arr[7] = arr[7]\n    arr[8] = arr[8]\n\
    \    arr[9] = arr[9]\n    arr[10] = arr[10]\n    arr[0] = arr[0]\n    arr[1] =\
    \ arr[1]\n    arr[2] = arr[2]\n    arr[3] = arr[3]\n    arr[4] = arr[4]\n    arr[5]\
    \ = arr[5]\n    arr[6] = arr[6]\n    arr[7] = arr[7]\n    arr[8] = arr[8]\n  \
    \  arr[9] = arr[9]\n    arr[10] = arr[10]\n    arr[0] = arr[0]\n    arr[1] = arr[1]\n\
    \    arr[2] = arr[2]\n    arr[3] = arr[3]\n    arr[4] = arr[4]\n    arr[5] = arr[5]\n\
    \    arr[6] = arr[6]\n    arr[7] = arr[7]\n    arr[8] = arr[8]\n    arr[9] = arr[9]\n\
    \    arr[10] = arr[10]\n    arr[0] = arr[0]\n    arr[1] = arr[1]\n    arr[2] =\
    \ arr[2]\n    arr[3] = arr[3]\n    arr[4] = arr[4]\n    arr[5] = arr[5]\n    arr[6]\
    \ = arr[6]\n    arr[7] = arr[7]\n    arr[8] = arr[8]\n    arr[9] = arr[9]\n  \
    \  arr[10] = arr[10]\n    arr[0] = arr[0]\n    arr[1] = arr[1]\n    arr[2] = arr[2]\n\
    \    arr[3] = arr[3]\n    arr[4] = arr[4]\n    arr[5] = arr[5]\n    arr[6] = arr[6]\n\
    \    arr[7] = arr[7]\n    arr[8] = arr[8]\n    arr[9] = arr[9]\n    arr[10] =\
    \ arr[10]\n    arr[0] = arr[0]\n    arr[1] = arr[1]\n    arr[2] = arr[2]\n   \
    \ arr[3] = arr[3]\n    arr[4] = arr[4]\n    arr[5] = arr[5]\n    arr[6] = arr[6]\n\
    \    arr[7] = arr[7]\n    arr[8] = arr[8]\n    arr[9] = arr[9]\n    arr[10] =\
    \ arr[10]\n    arr[0] = arr[0]\n    arr[1] = arr[1]\n    arr[2] = arr[2]\n   \
    \ arr[3] = arr[3]\n    arr[4", "    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    result := make([]int, 0)\n    min := arr[0]\n \
    \   index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n         \
    \   if min > v {\n                min = v\n                index = index + 1\n\
    \            }\n        } else {\n            if min == v {\n                index\
    \ = index + 1\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)\n        }\n    }\n    if index == 0 {\n        return []\n    }\n\
    \    return append(result[:index], result[index:]...)\n}\n", "    result := make([]int,\
    \ 0)\n    min := arr[0]\n    index := 0\n    for _, v := range arr {\n       \
    \ if v%2 == 0 {\n            if min > v {\n                min = v\n         \
    \       index = index\n            }\n        } else {\n            if min > v\
    \ {\n                min = v\n                index = index\n            }\n \
    \       }\n    }\n    result = append(result, min, index)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if v < min {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min == v {\n                index = index\n            }\n\
    \        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    arr2 := make([]int, 0)\n    arr3 := make([]int,\
    \ 0)\n    arr4 := make([]int, 0)\n    arr5 := make([]int, 0)\n    arr6 := make([]int,\
    \ 0)\n    arr7 := make([]int, 0)\n    arr8 := make([]int, 0)\n    arr9 := make([]int,\
    \ 0)\n    arr10 := make([]int, 0)\n    arr11 := make([]int, 0)\n    arr12 := make([]int,\
    \ 0)\n    arr13 := make([]int, 0)\n    arr14 := make([]int, 0)\n    arr15 := make([]int,\
    \ 0)\n    arr16 := make([]int, 0)\n    arr17 := make([]int, 0)\n    arr18 := make([]int,\
    \ 0)\n    arr19 := make([]int, 0)\n    arr20 := make([]int, 0)\n    arr21 := make([]int,\
    \ 0)\n    arr22 := make([]int, 0)\n    arr23 := make([]int, 0)\n    arr24 := make([]int,\
    \ 0)\n    arr25 := make([]int, 0)\n    arr26 := make([]int, 0)\n    arr27 := make([]int,\
    \ 0)\n    arr28 := make([]int, 0)\n    arr29 := make([]int, 0)\n    arr30 := make([]int,\
    \ 0)\n    arr31 := make([]int, 0)\n    arr32 := make([]int, 0)\n    arr33 := make([]int,\
    \ 0)\n    arr34 := make([]int, 0)\n    arr35 := make([]int, 0)\n    arr36 := make([]int,\
    \ 0)\n    arr37 := make([]int, 0)\n    arr38 := make([]int, 0)\n    arr39 := make([]int,\
    \ 0)\n    arr40 := make([]int, 0)\n    arr41 := make([]int, 0)\n    arr42 := make([]int,\
    \ 0)\n    arr43 := make([]int, 0)\n    arr44 := make([]int, 0)\n    arr45 := make([]int,\
    \ 0)\n    arr46 := make([]int, 0)\n    arr47 := make([]int, 0)\n    arr48 := make([]int,\
    \ 0)\n    arr49 := make([]int, 0)\n    arr50 := make([]int, 0)\n    arr51 := make([]int,\
    \ 0)\n    ", "    m := make(map[int]int)\n    for _, v := range arr {\n      \
    \  m[v] = m[min(v, m[v])]\n    }\n    result := make([]int, 0, len(m))\n    for\
    \ v := range m {\n        result = append(result, v)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for k, v := range m {\n        if v%2 == 0 {\n            result\
    \ = append(result, k)\n        }\n    }\n    if len(result) == 0 {\n        return\
    \ nil\n    }\n    if len(result) == 1 {\n        return result[0]\n    }\n   \
    \ return result\n}\n", "    var result []int\n    var smallestValue int\n    var\
    \ smallestIndex int\n    var index int\n    for _, value := range arr {\n    \
    \    if smallestValue == 0 || value < smallestValue {\n            smallestValue\
    \ = value\n            smallestIndex = index\n        }\n        index++\n   \
    \ }\n    if smallestValue == 0 {\n        return nil\n    }\n    result = append(result,\
    \ smallestValue)\n    result = append(result, smallestIndex)\n    return result\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v] =\
    \ m[v] + 1\n    }\n    arr2 := make([]int, 0, len(m))\n    for k, v := range m\
    \ {\n        if v%2 == 0 {\n            arr2 = append(arr2, k)\n        }\n  \
    \  }\n    return arr2\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n\
    \    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n        \
    \    if min > v {\n                min = v\n                index = index\n  \
    \          }\n        } else {\n            if min > v {\n                min\
    \ = v\n                index = index\n            }\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index + 1\n            }\n      \
    \  } else {\n            if min == v {\n                index = index + 1\n  \
    \          }\n        }\n    }\n    if index == 0 {\n        return nil\n    }\n\
    \    result = append(result, min)\n    result = append(result, index)\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n    index :=\
    \ 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if min >\
    \ v {\n                min = v\n                index = index\n            }\n\
    \        } else {\n            if min > v {\n                min = v\n       \
    \         index = index\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n", "    var\
    \ result []int\n    var minVal int\n    var minIndex int\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n \
    \               minVal = v\n                minIndex = -1\n            }\n   \
    \         if v == minVal {\n                minIndex++\n            }\n      \
    \  }\n    }\n    if minIndex == -1 {\n        return result\n    }\n    return\
    \ append(result, minVal, minIndex)\n}\n", "    result := make([]int, 0)\n    min\
    \ := arr[0]\n    index := 0\n    for _, val := range arr {\n        if val < min\
    \ {\n            min = val\n            index = -1\n        }\n        if val\
    \ == min {\n            index = index + 1\n        }\n    }\n    if index == -1\
    \ {\n        return result\n    }\n    result.Insert(index, min)\n    return result\n\
    }\n", "    sort.Ints(arr)\n    var result []int\n    var index int\n    for _,\
    \ v := range arr {\n        if v%2 == 0 {\n            result = append(result,\
    \ v)\n            index = len(result)-1\n        }\n    }\n    if index == -1\
    \ {\n        return []\n    }\n    return append([]int{result[index], index},\
    \ pluck(arr[index+1:]))\n}\n", "    sort.Ints(arr)\n    var result []int\n   \
    \ var index int\n    for _, v := range arr {\n        if v%2 == 0 {\n        \
    \    result = append(result, v)\n            index = len(result)-1\n        }\n\
    \    }\n    if index == -1 {\n        return []\n    }\n    return append(result[:index],\
    \ result[index+1:]...)\n}\n", "    var result []int\n    var minVal int\n    var\
    \ minIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n         \
    \   if minVal == 0 || v < minVal {\n                minVal = v\n             \
    \   minIndex = -1\n            }\n        } else {\n            if minVal == 0\
    \ || v < minVal {\n                minVal = v\n                minIndex = -1\n\
    \            }\n            if v == minVal {\n                minIndex += 1\n\
    \            }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    for _, v := range arr {\n        if v%2 == 0 {\n            if v ==\
    \ minVal {\n                result[minIndex] = v\n            }\n        }\n \
    \   }\n    return result\n}\n", "    sort.Ints(arr)\n    var result []int\n  \
    \  var smallestEven int\n    var smallestIndex int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if smallestEven == 0 {\n             \
    \   smallestEven = v\n                smallestIndex = v\n            } else {\n\
    \                if smallestEven == v {\n                    smallestEven = v\n\
    \                    smallestIndex = v\n                } else {\n           \
    \         if smallestIndex < v {\n                        smallestEven = v\n \
    \                       smallestIndex = v\n                    }\n           \
    \     }\n            }\n        } else {\n            if smallestEven == 0 {\n\
    \                smallestEven = v\n                smallestIndex = v\n       \
    \     } else {\n                if smallestEven == v {\n                    smallestEven\
    \ = v\n                    smallestIndex = v\n                } else {\n     \
    \               if smallestIndex < v {\n                        smallestEven =\
    \ v\n                        smallestIndex = v\n                    }\n      \
    \          }\n            }\n        }\n    }\n    if smallestEven == 0 {\n  \
    \      return nil\n    }\n    result = append(result, smallestEven)\n    result\
    \ = append(result, smallestIndex)\n    return result\n}\n", "    var result []int\n\
    \    var minVal int\n    var minIndex int\n    for _, val := range arr {\n   \
    \     if val%2 == 0 {\n            if minVal == 0 || val < minVal {\n        \
    \        minVal = val\n                minIndex = arr\n            }\n       \
    \ } else {\n            if minVal == 0 || val > minVal {\n                minVal\
    \ = val\n                minIndex = arr\n            }\n        }\n    }\n   \
    \ result = append(result, minVal)\n    result = append(result, minIndex)\n   \
    \ return result\n}\n", "    var result []int\n    var index int\n    var smalest_value\
    \ int\n    for _, value := range arr {\n        if value%2 == 0 {\n          \
    \  smalest_value = value\n            index = value\n        } else {\n      \
    \      if smalest_value == value {\n                index = index + 1\n      \
    \      }\n        }\n    }\n    if index == 0 {\n        result = append(result,\
    \ smalest_value)\n    } else {\n        result = append(result, smalest_value,\
    \ index)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    index\
    \ := 0\n    smallest := 0\n    for _, value := range arr {\n        if value%2\
    \ == 0 {\n            if smallest == 0 {\n                smallest = value\n \
    \               index = index\n            } else {\n                if value\
    \ < smallest {\n                    smallest = value\n                    index\
    \ = index\n                }\n            }\n        }\n    }\n    result = append(result,\
    \ smallest, index)\n    return result\n}\n", "    n := len(arr)\n    result :=\
    \ make([]int, n)\n    min := arr[0]\n    index := 0\n    for i := 0; i < n; i++\
    \ {\n        if arr[i] < min {\n            min = arr[i]\n            index =\
    \ i\n        }\n    }\n    result[index] = min\n    return result\n}\n", "   \
    \ n := len(arr)\n    result := make([]int, n)\n    min := arr[0]\n    index :=\
    \ 0\n    for i := 0; i < n; i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n            index = i\n        }\n    }\n    result[index] = min\n\
    \    return result\n}\n", "    var result []int\n    min := arr[0]\n    index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < min {\n                min = value\n                index = index\n\
    \            }\n        } else {\n            if min > value {\n             \
    \   min = value\n                index = index\n            }\n        }\n   \
    \ }\n    result = append(result, min)\n    result = append(result, index)\n  \
    \  return result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n   \
    \ index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n           \
    \ if v < min {\n                min = v\n                index = index\n     \
    \       }\n        } else {\n            if min > v {\n                min = v\n\
    \                index = index\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    var result []int\n    var minVal int\n    var minIndex int\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if minVal == 0 || v\
    \ < minVal {\n                minVal = v\n                minIndex = -1\n    \
    \        }\n        } else {\n            if minVal == 0 || v > minVal {\n   \
    \             minVal = v\n                minIndex = -1\n            }\n     \
    \   }\n    }\n    if minVal == 0 {\n        return nil\n    }\n    result = append(result,\
    \ minVal)\n    if minIndex == -1 {\n        return nil\n    }\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if v == minVal {\n         \
    \       result[minIndex] = v\n            }\n        }\n    }\n    return result\n\
    }\n", "    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = index\n            }\n            index++\n       \
    \ }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    var result\
    \ []int\n    var index int\n    var smalest_value int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            smalest_value = v\n            index =\
    \ -1\n        } else {\n            if smalest_value < v {\n                smalest_value\
    \ = v\n                index = -1\n            } else {\n                index\
    \ = index + 1\n            }\n        }\n    }\n    if index == -1 {\n       \
    \ result = make([]int, 0)\n    } else {\n        result = append(result, smalest_value)\n\
    \        result = append(result, index)\n    }\n    return result\n}\n", "   \
    \ result := make([]int, 0)\n    index := 0\n    min := arr[0]\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if min > v {\n             \
    \   min = v\n                index = index\n            }\n        } else {\n\
    \            if min > v {\n                min = v\n                index = index\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    var result []int\n  \
    \  var index int\n    var smalest_value int\n    for _, value := range arr {\n\
    \        if value%2 == 0 {\n            smalest_value = value\n            index\
    \ = -1\n        } else {\n            if index == -1 || smalest_value < value\
    \ {\n                smalest_value = value\n                index = index + 1\n\
    \            }\n        }\n    }\n    if index == -1 {\n        result = make([]int,\
    \ 0)\n    } else {\n        result = append(result, smalest_value, index)\n  \
    \  }\n    return result\n}\n", "    arr2 := make([]int, len(arr))\n    min :=\
    \ arr[0]\n    index := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ < min {\n            min = arr[i]\n            index = i\n        }\n    }\n\
    \    arr2[index] = min\n    return arr2\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    evens := make([]int, 0)\n    index := 0\n    for _, v := range arr {\n  \
    \      if v%2 == 0 {\n            evens = append(evens, v)\n        } else {\n\
    \            if index == 0 {\n                index = v\n            } else {\n\
    \                if v < evens[index] {\n                    index = v\n      \
    \          }\n            }\n        }\n    }\n    return evens\n}\n", "    arr\
    \ := make([]int, len(arr))\n    min := arr[0]\n    index := 0\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            min = v\n            index =\
    \ index + 1\n        }\n    }\n    return []int{min, index}\n}\n", "    result\
    \ := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < min {\n           \
    \     min = value\n                index = index\n            }\n        } else\
    \ {\n            if min > value {\n                min = value\n             \
    \   index = index\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n", "    arr2\
    \ := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int,\
    \ len(arr))\n    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n\
    \    arr7 := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9\
    \ := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int,\
    \ len(arr))\n    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n\
    \    arr14 := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16\
    \ := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int,\
    \ len(arr))\n    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n\
    \    arr21 := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23\
    \ := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int,\
    \ len(arr))\n    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n\
    \    arr28 := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30\
    \ := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int,\
    \ len(arr))\n    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n\
    \    arr35 := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37\
    \ := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int,\
    \ len(arr))\n    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n\
    \    arr42 := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr",
  "    var result []int\n    result := make([]int, 0)\n    min := arr[0]\n    index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < min {\n                min = value\n                index = index\n\
    \            }\n        } else {\n            if min > value {\n             \
    \   min = value\n                index = index\n            }\n        }\n   \
    \ }\n    result = append(result, min)\n    result = append(result, index)\n  \
    \  return result\n}\n", "    m := make(map[int]int)\n    for _, v := range arr\
    \ {\n        m[v] = m[v] + 1\n    }\n    result := make([]int, 0, len(m))\n  \
    \  for k, v := range m {\n        if v%2 == 0 {\n            result = append(result,\
    \ k)\n        }\n    }\n    if len(result) == 0 {\n        return nil\n    }\n\
    \    if len(result) == 1 {\n        return result[0]\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    var result\
    \ []int\n    var minIndex int\n    var minValue int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if minValue == 0 || minValue > v {\n \
    \               minValue = v\n                minIndex = v\n            }\n  \
    \      } else {\n            if minValue != 0 {\n                minIndex++\n\
    \            }\n            minValue = v\n        }\n    }\n    if minValue !=\
    \ 0 {\n        minIndex++\n    }\n    result = append(result, minValue)\n    result\
    \ = append(result, minIndex)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    min := arr[0]\n    index := 0\n    for _, v := range arr {\n       \
    \ if v%2 == 0 {\n            if min > v {\n                min = v\n         \
    \       index = index\n            }\n        } else {\n            if min ==\
    \ v {\n                index = index\n            }\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < min\
    \ {\n                min = value\n                index = index\n            }\n\
    \        } else {\n            if min > value {\n                min = value\n\
    \                index = index\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < min\
    \ {\n                min = value\n                index = index\n            }\n\
    \        } else {\n            if min > value {\n                min = value\n\
    \                index = index\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, val := range arr {\n        if val < min {\n            min = val\n     \
    \       index = -1\n        }\n        if val == min {\n            index = index\
    \ + 1\n        }\n    }\n    if index == -1 {\n        return result\n    }\n\
    \    result.Insert(index, min)\n    return result\n}\n", "    var result []int\n\
    \    var minIndex int\n    var minVal int\n    for _, val := range arr {\n   \
    \     if val%2 == 0 {\n            if minVal == 0 || val < minVal {\n        \
    \        minVal = val\n                minIndex = -1\n            }\n        \
    \    if val == minVal {\n                minIndex += 1\n            }\n      \
    \  }\n    }\n    if minIndex == -1 {\n        return result\n    }\n    for _,\
    \ val := range arr {\n        if val%2 == 0 {\n            if val == minVal {\n\
    \                result[minIndex] = val\n            }\n        }\n    }\n   \
    \ return result\n}\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(arr))\n    arr", "    sort.Ints(arr)\n    var result []int\n\
    \    var index int\n    for _, v := range arr {\n        if v%2 == 0 {\n     \
    \       result = append(result, v)\n            index = len(result)-1\n      \
    \  }\n    }\n    if index == -1 {\n        return []\n    }\n    return append(result[:index],\
    \ result[index+1:]...)\n}\n", "    m := make(map[int]int)\n    for _, v := range\
    \ arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int, 0, len(m))\n\
    \    for k, v := range m {\n        if v%2 == 0 {\n            result = append(result,\
    \ k)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    index := 0\n    min := arr[0]\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if min > v {\n                min = v\n                index\
    \ = index + 1\n            }\n        } else {\n            if min == v {\n  \
    \              index = index + 1\n            }\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    arr2 := make([]int, len(arr))\n    min := arr[0]\n    index := 0\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            arr2[index] =\
    \ v\n            min = (min > v) ? min : v\n            index++\n        }\n \
    \   }\n    if index == 0 {\n        return []\n    }\n    return arr2[0:index]\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    var result []int\n\
    \    var index int\n    for _, v := range arr {\n        if v%2 == 0 {\n     \
    \       result = append(result, v)\n            index = len(result)-1\n      \
    \  }\n    }\n    if index == -1 {\n        return []\n    }\n    return append([]int{result[index],\
    \ index}, result[:index]...)\n}\n", "    arr2 := make([]int, len(arr))\n    arr3\
    \ := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int,\
    \ len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n\
    \    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10\
    \ := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int,\
    \ len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n\
    \    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17\
    \ := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int,\
    \ len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n\
    \    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24\
    \ := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int,\
    \ len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n\
    \    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31\
    \ := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int,\
    \ len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n\
    \    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38\
    \ := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int,\
    \ len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n\
    \    arr43 := make([]int, len(arr))\n    arr", "    m := make(map[int]int)\n \
    \   for _, v := range arr {\n        m[v] = m[min(m[v], len(m))]\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for _, v := range m {\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    min :=\
    \ arr[0]\n    index := 0\n    for _, value := range arr {\n        if value%2\
    \ == 0 {\n            if value < min {\n                min = value\n        \
    \        index = index\n            }\n        } else {\n            if min >\
    \ value {\n                min = value\n                index = index\n      \
    \      }\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n\
    \    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n        \
    \    if min > v {\n                min = v\n                index = index\n  \
    \          }\n        } else {\n            if min > v {\n                min\
    \ = v\n                index = index\n            }\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v] =\
    \ m[v] + 1\n    }\n    sort.Ints(arr)\n    result := make([]int, 0, len(arr))\n\
    \    for _, v := range arr {\n        if m[v] % 2 == 0 {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n", "    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "  \
    \  m := make(map[int]int)\n    for _, v := range arr {\n        m[v] = m[min(v,\
    \ m[v])]\n    }\n    result := make([]int, 0, len(m))\n    for _, v := range m\
    \ {\n        result = append(result, v)\n    }\n    return result\n}\n", "   \
    \ sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = sort.SearchInts(arr,\
    \ value)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(arr))\n    arr", "    result := make([]int, 0)\n    min := arr[0]\n    index\
    \ := 0\n    for _, val := range arr {\n        if val < min {\n            min\
    \ = val\n            index = -1\n        }\n        if val == min {\n        \
    \    index = index + 1\n        }\n    }\n    result = append(result, min)\n \
    \   result = append(result, index)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    min := arr[0]\n    index := 0\n    for _, v := range arr {\n       \
    \ if v%2 == 0 {\n            if min > v {\n                min = v\n         \
    \       index = index\n            }\n        } else {\n            if min > v\
    \ {\n                min = v\n                index = index\n            }\n \
    \       }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    var result []int\n    var minVal int\n\
    \    var minIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n  \
    \          if minVal == 0 || v < minVal {\n                minVal = v\n      \
    \          minIndex = -1\n            }\n        } else {\n            if minVal\
    \ == 0 || v > minVal {\n                minVal = v\n                minIndex =\
    \ -1\n            }\n        }\n    }\n    if minVal == 0 {\n        return []\n\
    \    }\n    result = append(result, minVal)\n    if minIndex == -1 {\n       \
    \ return result\n    }\n    for _, v := range arr {\n        if v%2 == 0 {\n \
    \           if v == minVal {\n                return append(result, minIndex)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for _, v := range m {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    if len(result) == 0 {\n        return\
    \ nil\n    }\n    if len(result) == 1 {\n        return result[0]\n    }\n   \
    \ return result\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    index := 0\n    for _, value := range arr {\n        if value%2 ==\
    \ 0 {\n            if value < smalest_value {\n                smalest_value =\
    \ value\n                smalest_index = index\n            }\n        } else\
    \ {\n            if value < smalest_value {\n                smalest_value = value\n\
    \                smalest_index = index\n            }\n        }\n        index++\n\
    \    }\n    if smalest_value == 0 {\n        return []\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n   \
    \ index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n           \
    \ if min > v {\n                min = v\n                index = index\n     \
    \       }\n        } else {\n            if min > v {\n                min = v\n\
    \                index = index\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n\
    \    }\n    result := make([]int, 0, len(m))\n    for _, v := range m {\n    \
    \    if v%2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    if len(result) == 0 {\n        return []\n    }\n    if len(result) == 1\
    \ {\n        return result[0]\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if v < min {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    // write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for _, v := range m {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    if len(result) == 0 {\n        return\
    \ nil\n    }\n    if len(result) == 1 {\n        return result[0]\n    }\n   \
    \ return result\n}\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(arr))\n    arr", "    result := make([]int, 0)\n    min :=\
    \ arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            if min > v {\n                min = v\n                index = index\
    \ + 1\n            }\n        } else {\n            if min == v {\n          \
    \      index = index + 1\n            }\n        }\n    }\n    if min == 0 {\n\
    \        return nil\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    sort.Ints(arr)\n    result := make([]int,\
    \ 0)\n    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n   \
    \         result = append(result, v)\n            index = index + 1\n        }\n\
    \    }\n    if index == 0 {\n        return []\n    }\n    return append(result,\
    \ arr[index-1])\n}\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(arr))\n    arr", "    result := make([]int, 0)\n    min :=\
    \ arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            if min > v {\n                min = v\n                index = index\n\
    \            }\n        } else {\n            if min > v {\n                min\
    \ = v\n                index = index\n            }\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if v < min {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min == v {\n                index = index\n            }\n\
    \        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n\
    \    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n        \
    \    if min > v {\n                min = v\n                index = index\n  \
    \          }\n        } else {\n            if min > v {\n                min\
    \ = v\n                index = index\n            }\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v] =\
    \ m[min(m[v], len(m))]\n    }\n    var result []int\n    for _, v := range m {\n\
    \        if v == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    var minVal int\n    var minIndex\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            if minVal\
    \ == 0 || minVal > v {\n                minVal = v\n                minIndex =\
    \ v\n            }\n        } else {\n            if minVal == 0 || minVal > v\
    \ {\n                minVal = v\n                minIndex = v\n            }\n\
    \        }\n    }\n    result = append(result, minVal)\n    result = append(result,\
    \ minIndex)\n    return result\n}\n", "    m := make(map[int]int)\n    for _,\
    \ v := range arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int,\
    \ 0)\n    for k, v := range m {\n        if v%2 == 0 {\n            result = append(result,\
    \ k)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v]++\n    }\n    sort.Ints(arr)\n    result\
    \ := make([]int, 0, len(arr))\n    for _, v := range arr {\n        if m[v] %\
    \ 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n    index :=\
    \ 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if min >\
    \ v {\n                min = v\n                index = index + 1\n          \
    \  }\n        } else {\n            if min == v {\n                index = index\
    \ + 1\n            }\n        }\n    }\n    if min == 0 {\n        return nil\n\
    \    }\n    result = append(result, min)\n    if index == len(arr) {\n       \
    \ return nil\n    }\n    return append(result, index)\n}\n", "    result := make([]int,\
    \ 0)\n    min := arr[0]\n    index := 0\n    for _, v := range arr {\n       \
    \ if v%2 == 0 {\n            if v < min {\n                min = v\n         \
    \       index = index\n            }\n        } else {\n            if min ==\
    \ v {\n                index = index\n            } else {\n                index\
    \ = index + 1\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    min := arr[0]\n    index := 0\n    for _, v := range arr {\n       \
    \ if v%2 == 0 {\n            if v < min {\n                min = v\n         \
    \       index = index\n            }\n        } else {\n            if min ==\
    \ v {\n                index = index\n            }\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v] =\
    \ m[v] + 1\n    }\n    arr2 := make([]int, 0, len(m))\n    for _, v := range m\
    \ {\n        if v%2 == 0 {\n            arr2 = append(arr2, v)\n        }\n  \
    \  }\n    if len(arr2) == 0 {\n        return []\n    }\n    arr3 := make([]int,\
    \ 0, len(arr2))\n    for _, v := range arr2 {\n        if v%2 == 0 {\n       \
    \     arr3 = append(arr3, v)\n        }\n    }\n    if len(arr3) == 0 {\n    \
    \    return []\n    }\n    arr4 := make([]int, 0, len(arr3))\n    for _, v :=\
    \ range arr3 {\n        if v%2 == 0 {\n            arr4 = append(arr4, v)\n  \
    \      }\n    }\n    if len(arr4) == 0 {\n        return []\n    }\n    arr5 :=\
    \ make([]int, 0, len(arr4))\n    for _, v := range arr4 {\n        if v%2 == 0\
    \ {\n            arr5 = append(arr5, v)\n        }\n    }\n    if len(arr5) ==\
    \ 0 {\n        return []\n    }\n    arr6 := make([]int, 0, len(arr5))\n    for\
    \ _, v := range arr5 {\n        if v%2 == 0 {\n            arr6 = append(arr6,\
    \ v)\n        }\n    }\n    if len(arr6) == 0 {\n        return []\n    }\n  \
    \  arr7 := make([]int, 0, len(arr6))\n    for _, v := range arr6 {\n        if\
    \ v%2 == 0 {\n            arr7 = append(arr7, v)\n        }\n    }\n    if len(arr7)\
    \ == 0 {\n        return []\n    }\n    arr8 := make([]int, 0, len(arr7))\n  \
    \  for _, v := range arr7 {\n        if v%2 == 0 {\n            arr8 = append(arr8,\
    \ v)\n        }\n    }\n    if len(arr8) == 0 {\n        return []\n    }\n  \
    \  arr9 := make([]int, 0, len(arr8))\n    for _, v := range arr8 {\n        if\
    \ v%2 == 0 {\n            arr9 = append(arr9, v)\n        }\n    }\n    if len(arr9)\
    \ == 0 {\n        return []\n    }\n    arr10 := make([]int, 0, len(arr9))\n \
    \   for _, v := range arr9 {\n        if v%2 == 0 {\n            arr10 = append(arr10,\
    \ v)\n        }\n    }\n    if len(arr10) == 0 {\n        return []\n    }\n \
    \   arr11 := make([]int, 0, len(arr10))\n    for _, v := range arr10 {\n     \
    \   if v%2 == 0 {\n            arr11 = append(arr11, v)\n        }\n    }\n  \
    \  if len(arr11) == 0 {\n        return []\n", "    result := make([]int, 0)\n\
    \    min := arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if v < min {\n                min = v\n                index\
    \ = index\n            }\n        } else {\n            if min > v {\n       \
    \         min = v\n                index = index\n            }\n        }\n \
    \   }\n    result = append(result, min)\n    result = append(result, index)\n\
    \    return result\n}\n", "    m := make(map[int]int)\n    for _, v := range arr\
    \ {\n        m[v] = m[v] + 1\n    }\n    sort.Ints(arr)\n    result := make([]int,\
    \ 0, len(arr))\n    for _, v := range arr {\n        if m[v] % 2 == 0 {\n    \
    \        result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    sort.Ints(arr)\n    var index int\n    var smalest int\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            if smalest == 0 {\n              \
    \  smalest = v\n                index = -1\n            } else {\n           \
    \     if v < smalest {\n                    smalest = v\n                    index\
    \ = -1\n                } else {\n                    if v == smalest {\n    \
    \                    index = index + 1\n                    }\n              \
    \  }\n            }\n        }\n    }\n    if smalest == 0 {\n        return []\n\
    \    }\n    return []int{smalest, index}\n}\n", "    result := make([]int, 0)\n\
    \    min := arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        } else {\n            if min == v {\n      \
    \          index = index\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n", "    m :=\
    \ make(map[int]int)\n    for _, v := range arr {\n        m[v] = m[v] + 1\n  \
    \  }\n    sort.Ints(arr)\n    result := make([]int, 0)\n    for _, v := range\
    \ arr {\n        if m[v] % 2 == 0 {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var minVal\
    \ int\n    var minIndex int\n    for _, v := range arr {\n        if v%2 == 0\
    \ {\n            if minVal == 0 || minVal > v {\n                minVal = v\n\
    \                minIndex = -1\n            }\n            if minVal == v {\n\
    \                minIndex += 1\n            }\n        } else {\n            if\
    \ minVal == 0 || minVal < v {\n                minVal = v\n                minIndex\
    \ = -1\n            }\n            if minVal == v {\n                minIndex\
    \ += 1\n            }\n        }\n    }\n    if minVal == 0 {\n        return\
    \ []\n    }\n    result = append(result, minVal)\n    if minIndex == -1 {\n  \
    \      return result\n    }\n    result = append(result, minIndex)\n    return\
    \ result\n}\n", "    m := make(map[int]int)\n    for _, v := range arr {\n   \
    \     m[v] = m[min(v, m[v])]\n    }\n    result := make([]int, 0, len(m))\n  \
    \  for _, v := range m {\n        result = append(result, v)\n    }\n    return\
    \ result\n}\n", "    m := make(map[int]int)\n    for _, v := range arr {\n   \
    \     m[v] = m[v] + 1\n    }\n    result := make([]int, 0, len(m))\n    for k,\
    \ v := range m {\n        if v%2 == 0 {\n            result = append(result, k)\n\
    \        }\n    }\n    if len(result) == 0 {\n        return nil\n    }\n    if\
    \ len(result) == 1 {\n        return result[0]\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    var minVal int\n    var minIndex int\n    var minVal\
    \ int\n    var minIndex int\n    var minVal int\n    var minIndex int\n    var\
    \ minVal int\n    var minIndex int\n    var minVal int\n    var minIndex int\n\
    \    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var min", "    result := make([]int, 0)\n    min := arr[0]\n    index\
    \ := 0\n    for _, val := range arr {\n        if val == min {\n            index\
    \ = index + 1\n        }\n        if val%2 == 0 {\n            min = val\n   \
    \         index = index + 1\n        }\n    }\n    if min == 0 {\n        return\
    \ result\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    sort.Ints(arr)\n    result := make([]int,\
    \ 0)\n    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n   \
    \         result = append(result, v)\n            index = index + 1\n        }\n\
    \    }\n    if index == 0 {\n        return []\n    }\n    return append(result,\
    \ arr[index-1])\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n    index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < min {\n                min = value\n                index = index\n\
    \            }\n        } else {\n            if min > value {\n             \
    \   min = value\n                index = index\n            }\n        }\n   \
    \ }\n    result = append(result, min)\n    result = append(result, index)\n  \
    \  return result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n   \
    \ index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n           \
    \ if min > v {\n                min = v\n                index = index\n     \
    \       }\n        } else {\n            if min == v {\n                index\
    \ = index\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    var result\
    \ []int\n    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            result = append(result, v)\n            index = index + 1\n     \
    \   }\n    }\n    if index == 0 {\n        return []\n    }\n    if index > 1\
    \ {\n        result = append(result, arr[index-1])\n    }\n    return result\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v] =\
    \ m[min(v, m[v])]\n    }\n    result := make([]int, 0, len(m))\n    for k := range\
    \ m {\n        result = append(result, k)\n    }\n    return result\n}\n", " \
    \   m := make(map[int]int)\n    for _, v := range arr {\n        m[v] = m[v] +\
    \ 1\n    }\n    sort.Ints(arr)\n    result := make([]int, 0)\n    for _, v :=\
    \ range arr {\n        if m[v] % 2 == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    min := arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        } else {\n            if min > v {\n       \
    \         min = v\n                index = index\n            }\n        }\n \
    \   }\n    result = append(result, min)\n    result = append(result, index)\n\
    \    return result\n}\n", "    m := make(map[int]int)\n    for _, v := range arr\
    \ {\n        m[v] = m[v] + 1\n    }\n    result := make([]int, 0, len(m))\n  \
    \  for k, v := range m {\n        if v == 0 {\n            result = append(result,\
    \ k)\n        }\n    }\n    if len(result) == 0 {\n        return nil\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    min := arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        } else {\n            if min > v {\n       \
    \         min = v\n                index = index\n            }\n        }\n \
    \   }\n    result = append(result, min)\n    result = append(result, index)\n\
    \    return result\n}\n", "    var result []int\n    var minVal int\n    var minIndex\
    \ int\n    for _, val := range arr {\n        if val%2 == 0 {\n            if\
    \ minVal == 0 || val < minVal {\n                minVal = val\n              \
    \  minIndex = -1\n            }\n            if val == minVal {\n            \
    \    minIndex += 1\n            }\n        }\n    }\n    if minIndex == -1 {\n\
    \        return nil\n    }\n    result = make([]int, minIndex+1)\n    result[0]\
    \ = minVal\n    for _, val := range arr {\n        if val%2 == 0 {\n         \
    \   if val == minVal {\n                result[minIndex] = minIndex\n        \
    \    }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for k, v := range m {\n        if v%2 == 0 {\n            result\
    \ = append(result, k)\n        }\n    }\n    if len(result) == 0 {\n        return\
    \ nil\n    }\n    if len(result) == 1 {\n        return result[0]\n    }\n   \
    \ return result\n}\n", "    m := make(map[int]int)\n    for _, v := range arr\
    \ {\n        m[v] = m[v] + 1\n    }\n    sort.Ints(arr)\n    result := make([]int,\
    \ 0, len(arr))\n    for _, v := range arr {\n        if m[v] % 2 == 0 {\n    \
    \        result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    n := len(arr)\n    result := make([]int, n)\n    min := arr[0]\n    index :=\
    \ 0\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n            index = i\n        }\n    }\n    result[0] = min\n   \
    \ return result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n    index\
    \ := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if min\
    \ > v {\n                min = v\n                index = index\n            }\n\
    \        } else {\n            if min == v {\n                index = index\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    sort.Ints(arr)\n    result\
    \ := make([]int, 0)\n    index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            result = append(result, v)\n            index = index +\
    \ 1\n        }\n    }\n    if index == 0 {\n        return []\n    }\n    return\
    \ result\n}\n", "    sort.Ints(arr)\n    var result []int\n    var minVal int\n\
    \    var minIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n  \
    \          if minVal == 0 || v < minVal {\n                minVal = v\n      \
    \          minIndex = sort.Search(len(arr), func(i int) bool {\n             \
    \       return arr[i] < minVal\n                })\n            }\n        }\n\
    \    }\n    if minIndex == len(arr) {\n        return nil\n    }\n    result =\
    \ append(result, minVal)\n    result = append(result, minIndex)\n    return result\n\
    }\n", "    var result []int\n    var smallestValue int\n    var smallestIndex\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            if smallestValue\
    \ == 0 {\n                smallestValue = v\n                smallestIndex = 0\n\
    \            } else {\n                if v < smallestValue {\n              \
    \      smallestValue = v\n                    smallestIndex = 0\n            \
    \    } else if v == smallestValue {\n                    smallestIndex += 1\n\
    \                }\n            }\n        } else {\n            if smallestValue\
    \ == 0 {\n                smallestValue = v\n                smallestIndex = 0\n\
    \            } else {\n                if v > smallestValue {\n              \
    \      smallestValue = v\n                    smallestIndex = 0\n            \
    \    } else if v == smallestValue {\n                    smallestIndex += 1\n\
    \                }\n            }\n        }\n    }\n    if smallestValue == 0\
    \ {\n        return nil\n    }\n    result = make([]int, 1)\n    result[0] = smallestValue\n\
    \    result[1] = smallestIndex\n    return result\n}\n", "    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)-1\n        }\n    }\n    if index == -1 {\n        return []\n \
    \   }\n    return append([]int{result[0], index}, pluck(arr[index+1:]))\n}\n",
  "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v] = m[v] +\
    \ 1\n    }\n    sort.Ints(arr)\n    result := make([]int, 0)\n    for _, v :=\
    \ range arr {\n        if m[v] % 2 == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    min := arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if min > v {\n                min = v\n                index\
    \ = index + 1\n            }\n        } else {\n            if min == v {\n  \
    \              index = index + 1\n            }\n        }\n    }\n    if min\
    \ == 0 {\n        return nil\n    }\n    result = append(result, min)\n    if\
    \ index == len(arr) {\n        return nil\n    }\n    return append(result, index)\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min == v {\n                index = index\n            }\n\
    \        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    result := make([]int, 0)\n    index :=\
    \ 0\n    min := arr[0]\n    for _, v := range arr {\n        if v%2 == 0 {\n \
    \           if min > v {\n                min = v\n                index = index\
    \ + 1\n            }\n        } else {\n            if min > v {\n           \
    \     min = v\n                index = index + 1\n            }\n        }\n \
    \   }\n    result = append(result, min)\n    result = append(result, index)\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n \
    \   index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n         \
    \   if min > v {\n                min = v\n                index = index\n   \
    \         }\n        } else {\n            if min == v {\n                index\
    \ = index\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[min(v, m[v])]\n    }\n    var res\
    \ []int\n    for _, v := range m {\n        if v%2 == 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n", "    m := make(map[int]int)\n  \
    \  for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int,\
    \ 0)\n    for k, v := range m {\n        if v == 1 {\n            result = append(result,\
    \ k)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    min := arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        } else {\n            if min > v {\n       \
    \         min = v\n                index = index\n            }\n        }\n \
    \   }\n    result = append(result, min)\n    result = append(result, index)\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    index := 0\n    smalest\
    \ := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if smalest+1\
    \ < v {\n                smalest = v\n                index = index + 1\n    \
    \        }\n        } else {\n            if smalest+1 < v {\n               \
    \ smalest = v\n                index = index + 1\n            }\n        }\n \
    \   }\n    if smalest+1 < arr[0] {\n        smalest = arr[0]\n        index =\
    \ index + 1\n    }\n    result = append(result, smalest, index)\n    return result\n\
    }\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(arr))\n    arr", "    sort.Ints(arr)\n    index := 0\n    smalest := 0\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            if smalest ==\
    \ 0 {\n                smalest = v\n                index = index + 1\n      \
    \      } else {\n                if v < smalest {\n                    smalest\
    \ = v\n                    index = index + 1\n                }\n            }\n\
    \        }\n    }\n    if smalest == 0 {\n        return []\n    }\n    return\
    \ []int{smalest, index}\n}\n", "    var result []int\n    var minIndex int\n \
    \   var minVal int\n    for _, v := range arr {\n        if v%2 == 0 {\n     \
    \       if minVal == 0 || v < minVal {\n                minVal = v\n         \
    \       minIndex = v\n            }\n        } else {\n            if minVal ==\
    \ 0 || v > minVal {\n                minVal = v\n                minIndex = v\n\
    \            }\n        }\n    }\n    if minVal == 0 {\n        return []\n  \
    \  }\n    result = append(result, minVal)\n    result = append(result, minIndex)\n\
    \    return result\n}\n", "    n := len(arr)\n    result := make([]int, n)\n \
    \   min := arr[0]\n    index := 0\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ < min {\n            min = arr[i]\n            index = i\n        }\n    }\n\
    \    result[index] = min\n    return result\n}\n", "    arr2 := make([]int, len(arr))\n\
    \    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5\
    \ := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int,\
    \ len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n\
    \    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12\
    \ := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int,\
    \ len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n\
    \    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19\
    \ := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int,\
    \ len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n\
    \    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26\
    \ := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int,\
    \ len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n\
    \    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33\
    \ := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int,\
    \ len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n\
    \    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40\
    \ := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int,\
    \ len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[min(v, m[v])]\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for _, v := range m {\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n", "    sort.Ints(arr)\n    var result []int\n\
    \    var index int\n    var smallestEven int\n    for _, v := range arr {\n  \
    \      if v%2 == 0 {\n            smallestEven = v\n        } else {\n       \
    \     if smallestEven == v {\n                index = index + 1\n            }\
    \ else {\n                result = append(result, smallestEven)\n            \
    \    index = index + 1\n                smallestEven = v\n            }\n    \
    \    }\n    }\n    if smallestEven == 0 {\n        result = append(result, 0)\n\
    \    }\n    return append(result, index)\n}\n", "    result := make([]int, 0)\n\
    \    min := arr[0]\n    index := 0\n    for _, value := range arr {\n        if\
    \ value%2 == 0 {\n            if value < min {\n                min = value\n\
    \                index = index\n            }\n        } else {\n            if\
    \ min > value {\n                min = value\n                index = index\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    min := arr[0]\n    index := 0\n    for _, value := range arr {\n   \
    \     if value%2 == 0 {\n            if value < min {\n                min = value\n\
    \                index = index\n            }\n        } else {\n            if\
    \ min > value {\n                min = value\n                index = index\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for k, v := range m {\n        if v%2 == 0 {\n            result\
    \ = append(result, k)\n        }\n    }\n    return result\n}\n", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.SearchInts(arr,\
    \ value)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    var result []int\n    var index int\n    var smallestValue int\n  \
    \  var smallestIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            if smallestValue == 0 {\n                smallestValue = v\n    \
    \            smallestIndex = index\n            } else {\n                if smallestValue\
    \ > v {\n                    smallestValue = v\n                    smallestIndex\
    \ = index\n                }\n            }\n        }\n        index++\n    }\n\
    \    if smallestValue == 0 {\n        return nil\n    }\n    result = append(result,\
    \ smallestValue, smallestIndex)\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for _, v := range m {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    if len(result) == 0 {\n        return\
    \ []\n    }\n    sort.Ints(result)\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for _, v := range m {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    if len(result) == 0 {\n        return\
    \ []\n    }\n    if len(result) == 1 {\n        return result[0]\n    }\n    return\
    \ result\n}\n", "    arr := make([]int, len(arr))\n    min := 0\n    max := 0\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n \
    \       }\n    }\n    arr := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    \
    \    if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    arr :=\
    \ make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ % 2 == 0 {\n            arr[i] = arr[i]\n        } else {\n            arr[i]\
    \ = arr[i] + 1\n        }\n    }\n    arr := make([]int, len(arr))\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    arr := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i]\
    \ < min {\n            min = arr[i]\n        }\n    }\n    arr := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    arr := make([]int, len(arr))\n    for i := 0;\
    \ i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n \
    \       }\n        if arr[i] < min {\n            min = arr[i]\n        }\n  \
    \  }\n    arr := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i]\
    \ < min {\n            min = arr[i]\n        }\n    }\n    arr := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    arr := make([]int, len(arr))\n    for i := 0;\
    \ i < len(arr); i++ {\n        if arr[i] > max {", "    result := make([]int,\
    \ 0)\n    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n   \
    \         result = append(result, v)\n            index += 1\n        }\n    }\n\
    \    if index == 0 {\n        return nil\n    }\n    return append(result, arr[index-1])\
    \ // append the smallest even value\n}\n", "    // write your code here\n    sort.Ints(arr)\n\
    \    var result []int\n    var i int\n    for i = 0; i < len(arr); i++ {\n   \
    \     if arr[i] % 2 == 0 {\n            result = append(result, arr[i])\n    \
    \    }\n    }\n    if len(result) == 0 {\n        return nil\n    }\n    sort.Ints(result)\n\
    \    var j int\n    for j = 0; j < len(result); j++ {\n        if result[j] %\
    \ 2 == 0 {\n            return append([]int{result[j]}, result[:j])\n        }\n\
    \    }\n    return nil\n}\n", "    m := make(map[int]int)\n    for _, v := range\
    \ arr {\n        m[v] = m[min(v, m[v])]\n    }\n    result := make([]int, 0, len(m))\n\
    \    for _, v := range m {\n        result = append(result, v)\n    }\n    return\
    \ result\n}\n", "    // write your code here\n    arr2 := make([]int, len(arr))\n\
    \    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5\
    \ := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int,\
    \ len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n\
    \    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12\
    \ := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int,\
    \ len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n\
    \    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19\
    \ := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int,\
    \ len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n\
    \    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26\
    \ := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int,\
    \ len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n\
    \    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33\
    \ := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int,\
    \ len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n\
    \    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40\
    \ := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int,\
    \ len(arr))\n    arr43 := make([]int, len(", "    result := make([]int, 0)\n \
    \   min := arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        } else {\n            if min > v {\n       \
    \         min = v\n                index = index\n            }\n        }\n \
    \   }\n    result = append(result, min)\n    result = append(result, index)\n\
    \    return result\n}\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(arr))\n    arr", "    result := make([]int, 0)\n    min :=\
    \ arr[0]\n    index := 0\n    for _, val := range arr {\n        if val%2 == 0\
    \ {\n            if val < min {\n                min = val\n                index\
    \ = index\n            }\n        } else {\n            if val == min {\n    \
    \            index = index\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n", "    m :=\
    \ make(map[int]int)\n    for _, v := range arr {\n        m[v] = m[v] + 1\n  \
    \  }\n    result := make([]int, 0, len(m))\n    for k, v := range m {\n      \
    \  if v%2 == 0 {\n            result = append(result, k)\n        }\n    }\n \
    \   if len(result) == 0 {\n        return nil\n    }\n    if len(result) == 1\
    \ {\n        return result[0]\n    }\n    sort.Ints(result)\n    return result\n\
    }", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < min\
    \ {\n                min = value\n                index = index\n            }\n\
    \        } else {\n            if min > value {\n                min = value\n\
    \                index = index\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    // write your\
    \ code here\n    sort.Ints(arr)\n    result := make([]int, 0)\n    index := 0\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            result = append(result,\
    \ v)\n            index = index + 1\n        }\n    }\n    if index == 0 {\n \
    \       return []\n    }\n    return append(result, arr[index-1])\n}\n", "   \
    \ var minIndex int\n    var minVal int\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            if minVal == 0 || v < minVal {\n                minVal\
    \ = v\n                minIndex = v\n            }\n        } else {\n       \
    \     if minVal == 0 || v > minVal {\n                minVal = v\n           \
    \     minIndex = v\n            }\n        }\n    }\n    return []int{minVal,\
    \ minIndex}\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n    index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < min {\n                min = value\n                index = index\n\
    \            }\n        } else {\n            if min > value {\n             \
    \   min = value\n                index = index\n            }\n        }\n   \
    \ }\n    result = append(result, min)\n    result = append(result, index)\n  \
    \  return result\n}\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(arr))\n    arr", "    var result []int\n    var minIndex\
    \ int\n    var minVal int\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            if minVal == 0 || v < minVal {\n                minVal = v\n    \
    \            minIndex = v\n            }\n        } else {\n            if minVal\
    \ == 0 || v > minVal {\n                minVal = v\n                minIndex =\
    \ v\n            }\n        }\n    }\n    result = append(result, minVal)\n  \
    \  result = append(result, minIndex)\n    return result\n}\n", "    result :=\
    \ make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < min {\n                min = v\n\
    \                index = index\n            }\n        } else {\n            if\
    \ min == v {\n                index = index\n            } else {\n          \
    \      min = v\n                index = index\n            }\n        }\n    }\n\
    \    result = append(result, min)\n    result = append(result, index)\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n    index :=\
    \ 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if min >\
    \ v {\n                min = v\n                index = index\n            }\n\
    \        } else {\n            if min > v {\n                min = v\n       \
    \         index = index\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n", "    var\
    \ result []int\n    var minVal int\n    var minIndex int\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n \
    \               minVal = v\n                minIndex = v\n            }\n    \
    \    } else {\n            if minVal == 0 || v > minVal {\n                minVal\
    \ = v\n                minIndex = v\n            }\n        }\n    }\n    result\
    \ = append(result, minVal)\n    result = append(result, minIndex)\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n    index :=\
    \ 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if v < min\
    \ {\n                min = v\n                index = index\n            }\n \
    \       } else {\n            if min == v {\n                index = index\n \
    \           } else {\n                index = index + 1\n                min =\
    \ v\n            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v]++\n    }\n    sort.Ints(arr)\n    result\
    \ := make([]int, 0, len(arr))\n    for _, v := range arr {\n        if m[v] %\
    \ 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var minVal int\n    var minIndex int\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            if minVal ==\
    \ 0 || minVal > v {\n                minVal = v\n                minIndex = v\n\
    \            }\n        } else {\n            if minVal == 0 || minVal > v {\n\
    \                minVal = v\n                minIndex = v\n            }\n   \
    \     }\n    }\n    if minVal == 0 {\n        return nil\n    }\n    result =\
    \ append(result, minVal)\n    result = append(result, minIndex)\n    return result\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v] =\
    \ m[v] + 1\n    }\n    result := make([]int, 0, len(m))\n    for k, v := range\
    \ m {\n        if v%2 == 0 {\n            result = append(result, k)\n       \
    \ }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    min :=\
    \ arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            if min > v {\n                min = v\n                index = index\
    \ + 1\n            }\n        } else {\n            if min > v {\n           \
    \     min = v\n                index = index + 1\n            }\n        }\n \
    \   }\n    result = append(result, min)\n    result = append(result, index)\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n \
    \   index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n         \
    \   if min > v {\n                min = v\n                index = index\n   \
    \         }\n        } else {\n            if min == v {\n                index\
    \ = index\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    var result\
    \ []int\n    var minIndex int\n    var minVal int\n    for _, v := range arr {\n\
    \        if v%2 == 0 {\n            minVal = v\n            minIndex = v\n   \
    \     } else {\n            if minVal == v {\n                minIndex++\n   \
    \         }\n        }\n    }\n    result = append(result, minVal, minIndex)\n\
    \    return result\n}\n", "    // write your code here\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    var result []int\n    var minIndex int\n    var\
    \ minValue int\n    for _, v := range arr {\n        if v%2 == 0 {\n         \
    \   if minValue == 0 || minValue > v {\n                minValue = v\n       \
    \         minIndex = v\n            }\n        } else {\n            if minValue\
    \ == 0 || minValue > v {\n                minValue = v\n                minIndex\
    \ = v\n            }\n        }\n    }\n    result = append(result, minValue)\n\
    \    result = append(result, minIndex)\n    return result\n}\n", "    var result\
    \ []int\n    var minVal int\n    var minIndex int\n    for _, v := range arr {\n\
    \        if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n         \
    \       minVal = v\n                minIndex = -1\n            }\n           \
    \ if minIndex == -1 || v < minIndex {\n                minIndex = v\n        \
    \    }\n        } else {\n            if minVal == 0 || v > minVal {\n       \
    \         minVal = v\n                minIndex = -1\n            }\n         \
    \   if minIndex == -1 || v > minIndex {\n                minIndex = v\n      \
    \      }\n        }\n    }\n    if minVal == 0 {\n        return []\n    }\n \
    \   result = append(result, minVal)\n    result = append(result, minIndex)\n \
    \   return result\n}\n", "    sort.Ints(arr)\n    evens := make([]int, len(arr))\n\
    \    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n        \
    \    evens[index] = v\n            index++\n        }\n    }\n    if len(evens)\
    \ == 0 {\n        return []\n    }\n    sort.Ints(evens)\n    smallest := evens[0]\n\
    \    smallest := index\n    for _, v := range evens {\n        if v == smallest\
    \ {\n            smallest = index\n        }\n        index++\n    }\n    return\
    \ []int{smallest, index}\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n\
    \    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n        \
    \    if min > v {\n                min = v\n                index = index + 1\n\
    \            }\n        } else {\n            if min == v {\n                index\
    \ = index + 1\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "  \
    \  result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if min > v {\n             \
    \   min = v\n                index = index\n            }\n        } else {\n\
    \            if min > v {\n                min = v\n                index = index\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    sort.Ints(arr)\n    index\
    \ := 0\n    smalest := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if smalest != v {\n                smalest_index\
    \ = index\n                smalest = v\n            }\n        } else {\n    \
    \        if smalest_index > index {\n                smalest_index = index\n \
    \           }\n        }\n        index++\n    }\n    if smalest_index > 0 {\n\
    \        return append([]int{smalest, smalest_index}, arr[index:])\n    }\n  \
    \  return arr\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n    index\
    \ := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if v <\
    \ min {\n                min = v\n                index = index\n            }\n\
    \        } else {\n            if min > v {\n                min = v\n       \
    \         index = index\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n", "    sort.Ints(arr)\n\
    \    index := 0\n    smalest := arr[0]\n    smalest_index := 0\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if smalest == v {\n        \
    \        smalest_index = index\n            }\n            smalest = v\n     \
    \       smalest_index = index\n        }\n        index++\n    }\n    if smalest_index\
    \ == 0 {\n        return []\n    }\n    return []int{smalest, smalest_index}\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v] =\
    \ m[v] + 1\n    }\n    result := make([]int, 0, len(m))\n    for k, v := range\
    \ m {\n        if v%2 == 0 {\n            result = append(result, k)\n       \
    \ }\n    }\n    if len(result) == 0 {\n        return nil\n    }\n    if len(result)\
    \ == 1 {\n        return result[0]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < min {\n           \
    \     min = value\n                index = index\n            }\n        } else\
    \ {\n            if min == value {\n                index = index\n          \
    \  }\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    var result []int\n    var minVal int\n\
    \    var minIndex int\n    var i int\n    for i = 0; i < len(arr); i++ {\n   \
    \     if arr[i] < minVal {\n            minVal = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    for i = 0; i < len(arr); i++ {\n        if arr[i]\
    \ == minVal {\n            result = append(result, minIndex)\n        }\n    }\n\
    \    return result\n}\n", "    n := len(arr)\n    result := make([]int, n)\n \
    \   min := arr[0]\n    index := 0\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ < min {\n            min = arr[i]\n            index = i\n        }\n    }\n\
    \    result[index] = min\n    return result\n}\n", "    sort.Ints(arr)\n    index\
    \ := 0\n    smalest := arr[0]\n    for _, v := range arr {\n        if v%2 ==\
    \ 0 {\n            if smalest == 0 {\n                smalest = v\n          \
    \      index = index + 1\n            } else {\n                if v < smalest\
    \ {\n                    smalest = v\n                    index = index + 1\n\
    \                }\n            }\n        }\n    }\n    return []int{smalest,\
    \ index}\n}\n", "    var result []int\n    var minIndex int\n    var minVal int\n\
    \    var minIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n  \
    \          if minVal == 0 || v < minVal {\n                minVal = v\n      \
    \          minIndex = v\n            }\n        } else {\n            if minVal\
    \ == 0 || v > minVal {\n                minVal = v\n                minIndex =\
    \ v\n            }\n        }\n    }\n    result = append(result, minVal)\n  \
    \  result = append(result, minIndex)\n    return result\n}", "    result := make([]int,\
    \ 0)\n    min := arr[0]\n    index := 0\n    for _, v := range arr {\n       \
    \ if v%2 == 0 {\n            if min > v {\n                min = v\n         \
    \       index = index\n            }\n        } else {\n            if min ==\
    \ v {\n                index = index\n            }\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < min\
    \ {\n                min = value\n                index = index\n            }\n\
    \        } else {\n            if min > value {\n                min = value\n\
    \                index = index\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v] =\
    \ m[v] + 1\n    }\n    result := make([]int, 0, len(m))\n    for _, v := range\
    \ m {\n        if v%2 == 0 {\n            result = append(result, v)\n       \
    \ }\n    }\n    if len(result) == 0 {\n        return []\n    }\n    if len(result)\
    \ == 1 {\n        return result[0]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            if min > v {\n                min\
    \ = v\n                index = index\n            }\n        } else {\n      \
    \      if min > v {\n                min = v\n                index = index\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    min := arr[0]\n    index := 0\n    for _, v := range arr {\n       \
    \ if v%2 == 0 {\n            if min > v {\n                min = v\n         \
    \       index = index\n            }\n        } else {\n            if min > v\
    \ {\n                min = v\n                index = index\n            }\n \
    \       }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
