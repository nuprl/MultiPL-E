language: go_test.go
name: HumanEval_107_even_odd_palindrome
results:
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    \n    for i := 1; i <= n; i++ {\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n        evenPalindromes = append(evenPalindromes, i)\n    }\n    \n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    \n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes =\
    \ append(oddPalindromes, n)\n    \n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    \n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes =\
    \ append(oddPalindromes, n)\n    \n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    \n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes =\
    \ append(oddPalindromes, n)\n    \n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    \n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes =\
    \ append(oddPalindromes, n)\n    \n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddP\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa1x09zez_test.go:69:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n  \
    \  oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzfpqntpo_test.go:26:47:\
    \ undefined: evenPalindrome\n/tmp/tmpzfpqntpo_test.go:27:45: undefined: oddPalindrome\n\
    /tmp/tmpzfpqntpo_test.go:28:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindrome\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp65y4d254_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i+1)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes, 0)\n\
    \    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddP\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkaptwagf_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ even_odd_palindrome(i))\n        oddPalindromes = append(oddPalindromes, even_odd_palindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo_z2gp9o_test.go:30:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_q4fjad_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpe_q4fjad_test.go:29:16: undefined: isEven\n\
    /tmp/tmpe_q4fjad_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    \n    for i := 1; i <= n; i++\
    \ {\n        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    \n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes...)\n    oddPalindromes = append(oddPalindromes,\
    \ oddPalindromes...)\n    \n    evenPalindromes = append(evenPalindromes, oddPalindromes...)\n\
    \    oddPalindromes = append(oddPalindromes, evenPalindromes...)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes...)\n    oddPalindromes = append(oddPalindromes,\
    \ oddPalindromes...)\n    \n    evenPalindromes = append(evenPalindromes, evenPalindromes...)\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindromes...)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes...)\n    oddPalindromes = append(oddPalindromes,\
    \ oddPalindromes...)\n    \n    evenPalindromes = append(evenPalindromes, evenPalindromes...)\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindromes...)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes...)\n    oddPalindromes = append(oddPalindromes,\
    \ oddPalindromes...)\n    \n    evenPalindromes = append(evenPalindromes, evenPalindromes...)\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindromes...)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes...)\n    oddPalindro\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbx493x4i_test.go:62:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0,\
    \ n)\n    oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n          \
    \      evenPalindromes = append(evenPalindromes, i)\n            } else {\n  \
    \              oddPalindromes = append(oddPalindromes, i)\n            }\n   \
    \     }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpelcg5y12_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpelcg5y12_test.go:29:16: undefined: isEven\n\
    /tmp/tmpelcg5y12_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    evenPalindromes := make([]interface{}, 0)\n  \
    \  oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n \
    \       evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes =\
    \ append(oddPalindromes, i)\n    }\n    for _, v := range evenPalindromes {\n\
    \        if isPalindrome(v) {\n            even++\n        }\n    }\n    for _,\
    \ v := range oddPalindromes {\n        if isPalindrome(v) {\n            odd++\n\
    \        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpog4a4mz5_test.go:32:12: undefined: isPalindrome

    /tmp/tmpog4a4mz5_test.go:37:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindrome\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp65y4d254_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    evenPalindromes, oddPalindromes := make([]interface{},\
    \ 0), make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n    }\n    for i := 0; i < len(evenPalindromes); i++ {\n        if evenPalindromes[i]%2\
    \ == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \    }\n    for i := 0; i < len(oddPalindromes); i++ {\n        if oddPalindromes[i]%2\
    \ == 1 {\n            odd++\n        } else {\n            even++\n        }\n\
    \    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqgkkircg_test.go:31:12: invalid operation: evenPalindromes[i] % 2 (mismatched
    types interface{} and int)

    /tmp/tmpqgkkircg_test.go:38:12: invalid operation: oddPalindromes[i] % 2 (mismatched
    types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalin\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr_ly_drl_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i+1)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes, 0)\n\
    \    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddP\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkaptwagf_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    i := 0\n    for i <= n {\n        if isPalindrome(i) {\n           \
    \ if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n        i++\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps9cjm83q_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmps9cjm83q_test.go:29:16: undefined: isEven\n\
    /tmp/tmps9cjm83q_test.go:37:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ even_odd_palindrome_test(i))\n        oddPalindromes = append(oddPalindromes,\
    \ even_odd_palindrome_test(i))\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakbciwp8_test.go:27:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpakbciwp8_test.go:28:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpakbciwp8_test.go:30:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    evenPalindromes, oddPalindromes := make([]interface{},\
    \ 0), make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n   \
    \         even++\n        } else {\n            odd++\n        }\n    }\n    return\
    \ []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuku2d6w3_test.go:31:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    evenPalindromes, oddPalindromes := []interface{}{},\
    \ []interface{}{}\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n\
    \            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                even++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                odd++\n            }\n        }\n\
    \    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpryw87cou_test.go:27:12: undefined: isPalindrome

    /tmp/tmpryw87cou_test.go:28:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            even++\n        } else {\n            odd++\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzx_28mf5_test.go:26:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp019hp1kc_test.go:59:1: expected ''{'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp019hp1kc_test.go:59:1: expected ''{'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    evenPalindromes, oddPalindromes = evenPalindromes, oddPalindromes\n\
    \    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i)\
    \ {\n                evenPalindromes = append(evenPalindromes, i)\n          \
    \  } else {\n                oddPalindromes = append(oddPalindromes, i)\n    \
    \        }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\n\
    func TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphjj_b7ae_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmphjj_b7ae_test.go:29:16: undefined: isEven\n\
    /tmp/tmphjj_b7ae_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    \n    for i := 1; i <= n; i++\
    \ {\n        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    \n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes...)\n    oddPalindromes = append(oddPalindromes,\
    \ oddPalindromes...)\n    \n    evenPalindromes = append(evenPalindromes, oddPalindromes...)\n\
    \    \n    evenPalindromes = append(evenPalindromes, evenPalindromes...)\n   \
    \ \n    evenPalindromes = append(evenPalindromes, evenPalindromes...)\n    \n\
    \    evenPalindromes = append(evenPalindromes, evenPalindromes...)\n    \n   \
    \ evenPalindromes = append(evenPalindromes, evenPalindromes...)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes...)\n    \n    evenPalindromes = append(evenPalindromes,\
    \ evenPalindromes...)\n    \n    evenPalindromes = append(evenPalindromes, evenPalindromes...)\n\
    \    \n    evenPalindromes = append(evenPalindromes, evenPalindromes...)\n   \
    \ \n    evenPalindromes = append(evenPalindromes, evenPalindromes...)\n    \n\
    \    evenPalindromes = append(evenPalindromes, evenPalindromes...)\n    \n   \
    \ evenPalindromes = append(evenPalindromes, evenPalindromes...)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes...)\n    \n    evenPalindromes = append(evenPalindromes,\
    \ evenPalindromes...)\n    \n    evenPalindromes = append(evenPalindrome\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbqavkrny_test.go:67:44: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_test.EvenPalindromes(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindromes(n))\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyigpbgr__test.go:26:47:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpyigpbgr__test.go:27:45: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpyigpbgr__test.go:28:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n            oddPalindromes = append(oddPalindromes,\
    \ i)\n        }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphauo5au4_test.go:31:12:\
    \ undefined: isPalindrome\n/tmp/tmphauo5au4_test.go:36:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i\
    \ := 1; i <= n; i++ {\n        oddPalindromes = append(oddPalindromes, i)\n  \
    \      evenPalindromes = append(evenPalindromes, i)\n        if isPalindrome(i)\
    \ {\n            oddPalindromeCount++\n        } else {\n            evenPalindromeCount++\n\
    \        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpspe4m7xk_test.go:31:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    evenPalindromes, oddPalindromes := make([]interface{},\
    \ 0), make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ evenPalindromes...)\n    oddPalindromes = append(oddPalindromes, oddPalindromes...)\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplb8rky65_test.go:24:5:\
    \ even declared but not used\n/tmp/tmplb8rky65_test.go:24:11: odd declared but\
    \ not used\n/tmp/tmplb8rky65_test.go:27:12: undefined: isPalindrome\n/tmp/tmplb8rky65_test.go:28:16:\
    \ undefined: isEven\n/tmp/tmplb8rky65_test.go:37:29: too many return values\n\t\
    have ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    i := 1\n    for i <= n {\n        if isPalindrome(i) {\n           \
    \ if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n        i++\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzv47ybl5_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpzv47ybl5_test.go:29:16: undefined: isEven\n\
    /tmp/tmpzv47ybl5_test.go:37:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes, oddPalindromes = evenOddPalindromes(n)\n    return\
    \ evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyuzustyn_test.go:26:39:\
    \ undefined: evenOddPalindromes\n/tmp/tmpyuzustyn_test.go:27:29: too many return\
    \ values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_q4fjad_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpe_q4fjad_test.go:29:16: undefined: isEven\n\
    /tmp/tmpe_q4fjad_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n        evenPalindromes = append(evenPalindromes, i)\n    }\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzznzm0ow_test.go:31:12:\
    \ undefined: isPalindrome\n/tmp/tmpzznzm0ow_test.go:37:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindrome\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp65y4d254_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    evenPalindromeCount := 0\n\
    \    oddPalindromeCount := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m0w7h53_test.go:30:12: undefined: isPalindrome

    /tmp/tmp6m0w7h53_test.go:31:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp019hp1kc_test.go:59:1: expected ''{'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        } else {\n            continue\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_6qab7h_test.go:29:12: undefined: isPalindrome

    /tmp/tmp8_6qab7h_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes, 0)\n\
    \    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalin\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqilpw8j8_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        } else {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, nil)\n                evenPalindromeCount++\n    \
    \        } else {\n                oddPalindromes = append(oddPalindromes, nil)\n\
    \                oddPalindromeCount++\n            }\n        }\n    }\n    return\
    \ []interface{}{evenPalindromeCount, oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlv4g6fi_test.go:29:12: undefined: isPalindrome

    /tmp/tmpdlv4g6fi_test.go:30:16: undefined: isEven

    /tmp/tmpdlv4g6fi_test.go:38:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++\
    \ {\n        if isPalindrome(i) {\n            if isEven(i) {\n              \
    \  evenPalindromes = append(evenPalindromes, i)\n            } else {\n      \
    \          oddPalindromes = append(oddPalindromes, i)\n            }\n       \
    \ }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa8q2gi8x_test.go:27:21:\
    \ no new variables on left side of :=\n/tmp/tmpa8q2gi8x_test.go:28:20: no new\
    \ variables on left side of :=\n/tmp/tmpa8q2gi8x_test.go:30:12: undefined: isPalindrome\n\
    /tmp/tmpa8q2gi8x_test.go:31:16: undefined: isEven\n/tmp/tmpa8q2gi8x_test.go:38:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        odd += i\n\
    \        if i%2 == 0 {\n            even++\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpe_p__vzs_test.go:54: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=61) %!s(int=7626)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpe_p__vzs_test.go:54: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=6) %!s(int=78)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpe_p__vzs_test.go:54: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpe_p__vzs_test.go:54: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=31) %!s(int=2016)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpe_p__vzs_test.go:54: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=12) %!s(int=325)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmpe_p__vzs_test.go:54: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=9) %!s(int=190)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpe_p__vzs_test.go:54: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=4) %!s(int=45)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074107
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    evenPalindromes := make([]interface{}, 0)\n  \
    \  oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n \
    \       if isPalindrome(i) {\n            if isEven(i) {\n                even++\n\
    \                evenPalindromes = append(evenPalindromes, i)\n            } else\
    \ {\n                odd++\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return []interface{}{even, evenPalindromes,\
    \ odd, oddPalindromes}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk533o3os_test.go:28:12: undefined: isPalindrome

    /tmp/tmpk533o3os_test.go:29:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    \n    for\
    \ i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i)\
    \ {\n                evenPalindromes = append(evenPalindromes, i)\n          \
    \      evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    \n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppjj2ahd5_test.go:30:12: undefined: isPalindrome

    /tmp/tmppjj2ahd5_test.go:31:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_test(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test(n))\n  \
    \  return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsb2fo8wi_test.go:26:47:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpsb2fo8wi_test.go:27:45: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpsb2fo8wi_test.go:28:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n  \
    \  oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzfpqntpo_test.go:26:47:\
    \ undefined: evenPalindrome\n/tmp/tmpzfpqntpo_test.go:27:45: undefined: oddPalindrome\n\
    /tmp/tmpzfpqntpo_test.go:28:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0,\
    \ n)\n    oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n          \
    \      evenPalindromes = append(evenPalindromes, i)\n            } else {\n  \
    \              oddPalindromes = append(oddPalindromes, i)\n            }\n   \
    \     }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpelcg5y12_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpelcg5y12_test.go:29:16: undefined: isEven\n\
    /tmp/tmpelcg5y12_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i+1)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, 0)\n\
    \    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmlbub9ad_test.go:34:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ even_odd_palindrome_test(i))\n        oddPalindromes = append(oddPalindromes,\
    \ even_odd_palindrome_test(i))\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd3tndupf_test.go:27:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpd3tndupf_test.go:28:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpd3tndupf_test.go:30:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    i := 0\n    for i <= n {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n        i += 2\n   \
    \ }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8jwzmawd_test.go:34:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalin\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr_ly_drl_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp019hp1kc_test.go:59:1: expected ''{'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     evenPalindromes = append(evenPalindromes, i)\n        } else {\n       \
    \     oddPalindromes = append(oddPalindromes, i)\n        }\n    }\n    return\
    \ evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_bqp40bq_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_bqp40bq_test.go:33:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i\
    \ := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i)\
    \ {\n                evenPalindromes = append(evenPalindromes, i)\n          \
    \      evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpra55fghv_test.go:29:12: undefined: isPalindrome

    /tmp/tmpra55fghv_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        oddPalindromeCount += isPalindrome(i)\n        if\
    \ isPalindrome(i) {\n            evenPalindromeCount += isPalindrome(i)\n    \
    \    }\n    }\n    evenPalindromes = append(evenPalindromes, evenPalindromeCount)\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindromeCount)\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzi2sc_bf_test.go:29:31:\
    \ undefined: isPalindrome\n/tmp/tmpzi2sc_bf_test.go:30:12: undefined: isPalindrome\n\
    /tmp/tmpzi2sc_bf_test.go:31:36: undefined: isPalindrome\n/tmp/tmpzi2sc_bf_test.go:36:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_even(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_odd(n))\n   \
    \ return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4ektu4_p_test.go:26:47:\
    \ undefined: even_odd_palindrome_even\n/tmp/tmp4ektu4_p_test.go:27:45: undefined:\
    \ even_odd_palindrome_odd\n/tmp/tmp4ektu4_p_test.go:28:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        oddPalindromes = append(oddPalindromes, i)\n     \
    \   evenPalindromes = append(evenPalindromes, i)\n        if isPalindrome(i) {\n\
    \            evenPalindromeCount++\n        } else {\n            oddPalindromeCount++\n\
    \        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0tcy_kqf_test.go:31:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n  \
    \  oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzfpqntpo_test.go:26:47:\
    \ undefined: evenPalindrome\n/tmp/tmpzfpqntpo_test.go:27:45: undefined: oddPalindrome\n\
    /tmp/tmpzfpqntpo_test.go:28:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ even_odd_palindrome_even(n))\n    oddPalindromes = append(oddPalindromes, even_odd_palindrome_odd(n))\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvk7q1tmy_test.go:27:47:\
    \ undefined: even_odd_palindrome_even\n/tmp/tmpvk7q1tmy_test.go:28:45: undefined:\
    \ even_odd_palindrome_odd\n/tmp/tmpvk7q1tmy_test.go:29:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        even, odd =\
    \ even+palindrome(i), odd+palindrome(i)\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a80hvty_test.go:26:26: undefined: palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        odd += i\n\
    \        if isPalindrome(i) {\n            even++\n        }\n    }\n    return\
    \ []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppi9yqrdt_test.go:27:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    i := 1\n    for i <= n {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n        i++\n    }\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptdto2k81_test.go:29:12:\
    \ undefined: isPalindrome\n/tmp/tmptdto2k81_test.go:30:16: undefined: isEven\n\
    /tmp/tmptdto2k81_test.go:38:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_test.EvenPalindromes(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindromes(n))\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyigpbgr__test.go:26:47:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpyigpbgr__test.go:27:45: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpyigpbgr__test.go:28:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    i := 0\n    for i <= n {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n        i += 2\n   \
    \ }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9991r2p8_test.go:32:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n  \
    \  oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzfpqntpo_test.go:26:47:\
    \ undefined: evenPalindrome\n/tmp/tmpzfpqntpo_test.go:27:45: undefined: oddPalindrome\n\
    /tmp/tmpzfpqntpo_test.go:28:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalin\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvzp57h8w_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, n+1)\n    oddPalindromes = append(oddPalindromes,\
    \ n+1)\n    evenPalindromes = append(evenPalindromes, n+2)\n    oddPalindromes\
    \ = append(oddPalindromes, n+2)\n    evenPalindromes = append(evenPalindromes,\
    \ n+3)\n    oddPalindromes = append(oddPalindromes, n+3)\n    evenPalindromes\
    \ = append(evenPalindromes, n+4)\n    oddPalindromes = append(oddPalindromes,\
    \ n+4)\n    evenPalindromes = append(evenPalindromes, n+5)\n    oddPalindromes\
    \ = append(oddPalindromes, n+5)\n    evenPalindromes = append(evenPalindromes,\
    \ n+6)\n    oddPalindromes = append(oddPalindromes, n+6)\n    evenPalindromes\
    \ = append(evenPalindromes, n+7)\n    oddPalindromes = append(oddPalindromes,\
    \ n+7)\n    evenPalindromes = append(evenPalindromes, n+8)\n    oddPalindromes\
    \ = append(oddPalindromes, n+8)\n    evenPalindromes = append(evenPalindromes,\
    \ n+9)\n    oddPalindromes = append(oddPalindromes, n+9)\n    evenPalindromes\
    \ = append(evenPalindromes, n+10)\n    oddPalindromes = append(oddPalindromes,\
    \ n+10)\n    evenPalindromes = append(evenPalindromes, n+11)\n    oddPalindromes\
    \ = append(oddPalindromes, n+11)\n    evenPalindromes = append(evenPalindro\n\
    func TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp04h7c_cm_test.go:54:42: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    even\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbg_hx8o__test.go:59:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalin\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvzp57h8w_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n   \
    \     oddPalindromes = append(oddPalindromes, i)\n        if isPalindrome(i) {\n\
    \            evenPalindromeCount++\n        } else {\n            oddPalindromeCount++\n\
    \        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7udzsk5e_test.go:31:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ even_odd_palindrome_test(i))\n        oddPalindromes = append(oddPalindromes,\
    \ even_odd_palindrome_test(i))\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakbciwp8_test.go:27:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpakbciwp8_test.go:28:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpakbciwp8_test.go:30:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    for i := 0; i < n; i++ {\n        if evenPalindromes[i] != oddPalindromes[i]\
    \ {\n            evenPalindromes = append(evenPalindromes, i)\n            oddPalindromes\
    \ = append(oddPalindromes, i)\n        }\n    }\n    return evenPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpx9u0rwdw_test.go:61: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpx9u0rwdw_test.go:61: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=12)]'\n  \
    \  --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpx9u0rwdw_test.go:"
  timestamp: 1660074109
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0,\
    \ n)\n    oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n          \
    \      evenPalindromes = append(evenPalindromes, i)\n            } else {\n  \
    \              oddPalindromes = append(oddPalindromes, i)\n            }\n   \
    \     }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpelcg5y12_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpelcg5y12_test.go:29:16: undefined: isEven\n\
    /tmp/tmpelcg5y12_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    \nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmtfff_c0_test.go:59:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_q4fjad_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpe_q4fjad_test.go:29:16: undefined: isEven\n\
    /tmp/tmpe_q4fjad_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes, oddPalindromes = evenOddPalindromes(n)\n    return\
    \ evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyuzustyn_test.go:26:39:\
    \ undefined: evenOddPalindromes\n/tmp/tmpyuzustyn_test.go:27:29: too many return\
    \ values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        even, odd =\
    \ even+odd, even\n        if isPalindrome(i) {\n            even, odd = odd+even,\
    \ even\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppyqzyz27_test.go:27:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    \n    for\
    \ i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n\
    \        oddPalindromes = append(oddPalindromes, i)\n    }\n    \n    for _, v\
    \ := range evenPalindromes {\n        evenPalindromeCount++\n    }\n    for _,\
    \ v := range oddPalindromes {\n        oddPalindromeCount++\n    }\n    \n   \
    \ return []interface{}{evenPalindromeCount, oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp61s99jnr_test.go:34:12: v declared but not used

    /tmp/tmp61s99jnr_test.go:37:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromeCount += isPalindrome(i)\n        oddPalindromeCount\
    \ += isPalindrome(n-i)\n    }\n    evenPalindromes = append(evenPalindromes, evenPalindromeCount)\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindromeCount)\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp10njbsjj_test.go:29:32:\
    \ undefined: isPalindrome\n/tmp/tmp10njbsjj_test.go:30:31: undefined: isPalindrome\n\
    /tmp/tmp10njbsjj_test.go:34:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ even_odd_palindrome(i))\n        oddPalindromes = append(oddPalindromes, even_odd_palindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo_z2gp9o_test.go:30:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ even_odd_palindrome(i))\n        oddPalindromes = append(oddPalindromes, even_odd_palindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo_z2gp9o_test.go:30:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    evenPalindromes, oddPalindromes := make([]interface{},\
    \ 0), make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            evenPalindromes = append(evenPalindromes, i)\n        } else\
    \ {\n            oddPalindromes = append(oddPalindromes, i)\n        }\n    }\n\
    \    for _, v := range evenPalindromes {\n        if isPalindrome(v) {\n     \
    \       even++\n        } else {\n            odd++\n        }\n    }\n    for\
    \ _, v := range oddPalindromes {\n        if isPalindrome(v) {\n            odd++\n\
    \        } else {\n            even++\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsb45a3kn_test.go:27:12: undefined: isPalindrome

    /tmp/tmpsb45a3kn_test.go:34:12: undefined: isPalindrome

    /tmp/tmpsb45a3kn_test.go:41:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0,\
    \ n)\n    oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n;\
    \ i++ {\n        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i+1)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    for i := 0; i < n; i++\
    \ {\n        if evenPalindromes[i] != i {\n            evenPalindromes = append(evenPalindromes,\
    \ 0)\n        }\n        if oddPalindromes[i] != i {\n            oddPalindromes\
    \ = append(oddPalindromes, 0)\n        }\n    }\n    return evenPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp58_74u7h_test.go:64: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20)\
    \ %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27)\
    \ %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34)\
    \ %!s(int=35) %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41)\
    \ %!s(int=42) %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48)\
    \ %!s(int=49) %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55)\
    \ %!s(int=56) %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62)\
    \ %!s(int=63) %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69)\
    \ %!s(int=70) %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76)\
    \ %!s(int=77) %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83)\
    \ %!s(int=84) %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90)\
    \ %!s(int=91) %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97)\
    \ %!s(int=98) %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103)\
    \ %!s(int=104) %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109)\
    \ %!s(int=110) %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115)\
    \ %!s(int=116) %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121)\
    \ %!s(int=122) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmp58_74u7h_test.go:64: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=0)]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp58_74u7h_test.go:64:\
    \ ex"
  timestamp: 1660074109
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     evenPalindromes = append(evenPalindromes, i)\n        } else {\n       \
    \     oddPalindromes = append(oddPalindromes, i)\n        }\n    }\n    return\
    \ evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_bqp40bq_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_bqp40bq_test.go:33:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ even_odd_palindrome_test.EvenPalindrome(i))\n        oddPalindromes = append(oddPalindromes,\
    \ even_odd_palindrome_test.OddPalindrome(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44h201sq_test.go:27:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp44h201sq_test.go:28:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp44h201sq_test.go:30:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0,\
    \ n)\n    oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n          \
    \      evenPalindromes = append(evenPalindromes, i)\n            } else {\n  \
    \              oddPalindromes = append(oddPalindromes, i)\n            }\n   \
    \     }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpelcg5y12_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpelcg5y12_test.go:29:16: undefined: isEven\n\
    /tmp/tmpelcg5y12_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0,\
    \ n)\n    oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n          \
    \      evenPalindromes = append(evenPalindromes, i)\n            } else {\n  \
    \              oddPalindromes = append(oddPalindromes, i)\n            }\n   \
    \     }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpelcg5y12_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpelcg5y12_test.go:29:16: undefined: isEven\n\
    /tmp/tmpelcg5y12_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n\
    \        oddPalindromes = append(oddPalindromes, i)\n    }\n    for _, v := range\
    \ oddPalindromes {\n        if v%2 == 0 {\n            evenPalindromes = append(evenPalindromes,\
    \ v)\n        }\n    }\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt6ayuqa6_test.go:31:12: invalid operation: v % 2 (mismatched types interface{}
    and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     evenPalindromes = append(evenPalindromes, i)\n        } else {\n       \
    \     oddPalindromes = append(oddPalindromes, i)\n        }\n    }\n    return\
    \ evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_bqp40bq_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_bqp40bq_test.go:33:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0,\
    \ n)\n    oddPalindromes := make([]interface{}, 0, n)\n    evenPalindromes = append(evenPalindromes,\
    \ evenPalindrome(n))\n    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpptx7wufc_test.go:27:47:\
    \ undefined: evenPalindrome\n/tmp/tmpptx7wufc_test.go:28:45: undefined: oddPalindrome\n\
    /tmp/tmpptx7wufc_test.go:29:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    evenPalindromes, oddPalindromes := make([]interface{},\
    \ 0), make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        } else {\n            if isEven(i) {\n          \
    \      even++\n            } else {\n                odd++\n            }\n  \
    \      }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpap0p8tt__test.go:27:12: undefined: isPalindrome

    /tmp/tmpap0p8tt__test.go:28:16: undefined: isEven

    /tmp/tmpap0p8tt__test.go:34:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ even_odd_palindrome_test(n-i))\n        oddPalindromes = append(oddPalindromes,\
    \ even_odd_palindrome_test(i))\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnal__t9d_test.go:27:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpnal__t9d_test.go:28:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpnal__t9d_test.go:30:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0,\
    \ n)\n    oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n          \
    \      evenPalindromes = append(evenPalindromes, i)\n            } else {\n  \
    \              oddPalindromes = append(oddPalindromes, i)\n            }\n   \
    \     }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpelcg5y12_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpelcg5y12_test.go:29:16: undefined: isEven\n\
    /tmp/tmpelcg5y12_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ even_odd_palindrome_test(i))\n        oddPalindromes = append(oddPalindromes,\
    \ even_odd_palindrome_test(i))\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakbciwp8_test.go:27:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpakbciwp8_test.go:28:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpakbciwp8_test.go:30:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes, oddPalindromes = even_odd_palindrome_helper(n)\n  \
    \  return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkwkrtbca_test.go:26:39:\
    \ undefined: even_odd_palindrome_helper\n/tmp/tmpkwkrtbca_test.go:27:29: too many\
    \ return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        odd = odd+1\n\
    \        if i%2 == 0 {\n            even = even+1\n        }\n    }\n    return\
    \ []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpngqekv67_test.go:54: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=61) %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpngqekv67_test.go:54: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=6) %!s(int=12)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpngqekv67_test.go:54: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpngqekv67_test.go:54: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=31) %!s(int=63)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpngqekv67_test.go:54: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=12) %!s(int=25)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmpngqekv67_test.go:54: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=9) %!s(int=19)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpngqekv67_test.go:54: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=4) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindrome\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp65y4d254_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    \n    // base case\n    if n < 1 {\n        return evenPalindromes\n\
    \    }\n    \n    // recursive case\n    for i := 1; i <= n; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome(i))\n    }\n    \n    for _, p\
    \ := range oddPalindromes {\n        if p == fmt.Sprintf(\"%d\", n) {\n      \
    \      evenPalindromes = append(evenPalindromes, fmt.Sprintf(\"%d\", n))\n   \
    \     }\n    }\n    \n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0320\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5203ca?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x501340?, 0x0?, 0x0?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0330\
    \ sp=0xc0201e0328 pc=0x449c25\ncommand-line-arguments_test.even_odd_palindrome(0x1)\n\
    \t/tmp/tmpfvjedemg_test.go:24 +0x3f fp=0xc0201e03f8 sp=0xc0201e0330 pc=0x4ef75f\n\
    command-line-arguments_test.even_odd_palindrome(0x1)\n\t/tmp/tmpfvjedemg_test.go:34\
    \ +0xc5 fp=0xc0201e04c0 sp=0xc0201e03f8 pc=0x4ef7e5\ncommand-line-arguments_test.even_odd_palindrome(0x1)\n\
    \t/tmp/tmpfvjedemg_test.go:34 +0xc5 fp=0xc0201e0588 sp=0xc0201e04c0 pc=0x4ef7e5\n\
    command-line-arguments_test.even_odd_palindrome(0x1)\n\t/tmp/tmpfvjedemg_test.go:34\
    \ +0xc5 fp=0xc0201e0650 sp=0xc0201e0588 pc=0x4ef7e5\ncommand-line-arguments_test.even_odd_palindrome(0x1)\n\
    \t/tmp/tmpfvjedemg_test.go:34 +0xc5 fp=0xc0201e0718 sp=0xc0201e0650 pc=0x4ef7e5\n\
    command-line-arguments_test.even_odd_palindrome(0x1)\n\t/tmp/tmpfvjedemg_test.go:34\
    \ +0xc5 fp=0xc0201e07e0 sp=0xc0201e0718 pc=0x4ef7e5\ncommand-line-arguments_test.even_odd_palindrome(0x1)\n\
    \t/tmp/tmpfvjedemg_test.go:34 +0xc5 fp=0xc0201e08a8 sp=0xc0201e07e0 pc=0x4ef7e5\n\
    command-line-arguments_test.even_odd_palindrome(0x1)\n\t/tmp/tmpfvjedemg_test.go:34\
    \ +0xc5 fp=0xc0201e0970 sp=0xc0201e08a8 pc=0x4ef7e5\ncommand-line-arguments_test.even_odd_palindrome(0x1)\n\
    \t/tmp/tmpfvjedemg_test.go:34 +0xc5 fp=0xc0201e0a38 sp=0xc0201e0970 pc=0x4ef7e5\n\
    command-line-arguments_test.even_odd_palindrome(0x1)\n\t/tmp/tmpfvjedemg_test.go:34\
    \ +0xc5 fp=0xc0201e0b00 sp=0xc0201e0a38 pc=0x4ef7e5\ncommand-line-arguments_test.even_odd_palindrome(0x1)\n\
    \t/tmp/tmpfvjedemg_test.go:34 +0xc5 fp=0xc0201e0bc8"
  timestamp: 1660074110
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    i := 1\n    for i <= n {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n        i++\n    }\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptdto2k81_test.go:29:12:\
    \ undefined: isPalindrome\n/tmp/tmptdto2k81_test.go:30:16: undefined: isEven\n\
    /tmp/tmptdto2k81_test.go:38:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n  \
    \  oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzfpqntpo_test.go:26:47:\
    \ undefined: evenPalindrome\n/tmp/tmpzfpqntpo_test.go:27:45: undefined: oddPalindrome\n\
    /tmp/tmpzfpqntpo_test.go:28:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    for i :=\
    \ 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if evenPalindromes[i-1]\
    \ == oddPalindromes[j-1] {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                oddPalindromes = append(oddPalindromes, j)\n           \
    \ }\n        }\n    }\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmprk0bz4t4_test.go:61: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20)\
    \ %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27)\
    \ %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int"
  timestamp: 1660074109
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, n+1)\n    oddPalindromes = append(oddPalindromes,\
    \ n+1)\n    evenPalindromes = append(evenPalindromes, n+2)\n    oddPalindromes\
    \ = append(oddPalindromes, n+2)\n    evenPalindromes = append(evenPalindromes,\
    \ n+3)\n    oddPalindromes = append(oddPalindromes, n+3)\n    evenPalindromes\
    \ = append(evenPalindromes, n+4)\n    oddPalindromes = append(oddPalindromes,\
    \ n+4)\n    evenPalindromes = append(evenPalindromes, n+5)\n    oddPalindromes\
    \ = append(oddPalindromes, n+5)\n    evenPalindromes = append(evenPalindromes,\
    \ n+6)\n    oddPalindromes = append(oddPalindromes, n+6)\n    evenPalindromes\
    \ = append(evenPalindromes, n+7)\n    oddPalindromes = append(oddPalindromes,\
    \ n+7)\n    evenPalindromes = append(evenPalindromes, n+8)\n    oddPalindromes\
    \ = append(oddPalindromes, n+8)\n    evenPalindromes = append(evenPalindromes,\
    \ n+9)\n    oddPalindromes = append(oddPalindromes, n+9)\n    evenPalindromes\
    \ = append(evenPalindromes, n+10)\n    oddPalindromes = append(oddPalindromes,\
    \ n+10)\n    evenPalindromes = append(evenPalindromes, n+11)\n    oddPalindromes\
    \ = append(oddPalindromes, n+11)\n    evenPalindromes = append(evenP\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnfu8571n_test.go:54:35: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    result := make([]interface{}, 0, 2)\n    for i\
    \ := 1; i <= n; i++ {\n        odd_palindrome := isPalindrome(i)\n        if odd_palindrome\
    \ {\n            odd++\n        } else {\n            even++\n        }\n    \
    \    if even > odd {\n            result = append(result, even)\n            even\
    \ = 0\n        }\n        if even < odd {\n            result = append(result,\
    \ odd)\n            odd = 0\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjeeac6tj_test.go:27:27: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    \n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    \n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    \n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes =\
    \ append(oddPalindromes, n)\n    \n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    \n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes =\
    \ append(oddPalindromes, n)\n    \n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    \n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes =\
    \ append(oddPalindromes, n)\n    \n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    \n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes =\
    \ append(oddPalindromes, n)\n    \n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddP\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpard04l70_test.go:69:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    \n    for i := 1; i <= n; i++\
    \ {\n        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    \n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes[len(evenPalindromes)-1])\n    oddPalindromes\
    \ = append(oddPalindromes, oddPalindromes[len(oddPalindromes)-1])\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes[len(evenPalindromes)-1])\n    oddPalindromes\
    \ = append(oddPalindromes, oddPalindromes[len(oddPalindromes)-1])\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes[len(evenPalindromes)-1])\n    oddPalindromes\
    \ = append(oddPalindromes, oddPalindromes[len(oddPalindromes)-1])\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes[len(evenPalindromes)-1])\n    oddPalindromes\
    \ = append(oddPalindromes, oddPalindromes[len(oddPalindromes)-1])\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes[len(evenPalindromes)-1])\n    oddPalindromes\
    \ = append(oddPalindromes, oddPalindromes[len(oddPalindromes)-1])\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes[len(evenPalindromes)-1])\n    oddPalindromes\
    \ = append(oddPalindromes, oddPalindromes[len(oddPalindromes)-1])\n    \n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes[len(evenPalindromes)-1])\n    oddPalindrome\n\
    func TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwdwooonp_test.go:56:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0)\n\
    \    oddPalindromes := make([]interface{}, 0)\n    evenPalindromeCount := 0\n\
    \    oddPalindromeCount := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m0w7h53_test.go:30:12: undefined: isPalindrome

    /tmp/tmp6m0w7h53_test.go:31:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        even, odd =\
    \ odd+even, even+odd\n        if isPalindrome(i) {\n            even, odd = odd+even,\
    \ even+odd\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsngj_flu_test.go:27:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindrome\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp65y4d254_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ even_odd_palindrome(i))\n        oddPalindromes = append(oddPalindromes, even_odd_palindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo_z2gp9o_test.go:30:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i+1)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, 0)\n\
    \    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddP\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6pxkallt_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    // write your code here\n    evenPalindromes := make([]interface{}, 0,\
    \ n)\n    oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n          \
    \      evenPalindromes = append(evenPalindromes, i)\n            } else {\n  \
    \              oddPalindromes = append(oddPalindromes, i)\n            }\n   \
    \     }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpelcg5y12_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpelcg5y12_test.go:29:16: undefined: isEven\n\
    /tmp/tmpelcg5y12_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                even++\n            } else {\n\
    \                odd++\n            }\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6hx6_5m6_test.go:26:12: undefined: isPalindrome

    /tmp/tmp6hx6_5m6_test.go:27:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromeCount += isPalindrome(i)\n        oddPalindromeCount\
    \ += !isPalindrome(i)\n    }\n    evenPalindromes = append(evenPalindromes, evenPalindromeCount)\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindromeCount)\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpifxog7w9_test.go:29:32:\
    \ undefined: isPalindrome\n/tmp/tmpifxog7w9_test.go:30:32: undefined: isPalindrome\n\
    /tmp/tmpifxog7w9_test.go:34:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenPalindromes = append(evenPalindromes, i)\n\
    \            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppjtrqkou_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmppjtrqkou_test.go:28:16: undefined: isEven\n\
    /tmp/tmppjtrqkou_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        str := fmt.Sprintf(\"\
    %d\", i)\n        if isPalindrome(str) {\n            even++\n        } else {\n\
    \            odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7cidduyj_test.go:27:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        odd = odd+i/2\n\
    \        even = even+i/2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpdzib7rgp_test.go:52: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=3782) %!s(int=3782)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpdzib7rgp_test.go:52: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=36) %!s(int=36)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpdzib7rgp_test.go:52: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpdzib7rgp_test.go:52: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=992) %!s(int=992)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpdzib7rgp_test.go:52: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=156) %!s(int=156)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmpdzib7rgp_test.go:52: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=90) %!s(int=90)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpdzib7rgp_test.go:52: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=20) %!s(int=20)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmpdzib7rgp_test.go:52: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n  \
    \  oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzfpqntpo_test.go:26:47:\
    \ undefined: evenPalindrome\n/tmp/tmpzfpqntpo_test.go:27:45: undefined: oddPalindrome\n\
    /tmp/tmpzfpqntpo_test.go:28:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0, n)\n    oddPalindromes := make([]interface{},\
    \ 0, n)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmfg33gh_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpcmfg33gh_test.go:28:16: undefined: isEven\n\
    /tmp/tmpcmfg33gh_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                even++\n            } else {\n\
    \                odd++\n            }\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6hx6_5m6_test.go:26:12: undefined: isPalindrome

    /tmp/tmp6hx6_5m6_test.go:27:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
    \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n\
    // Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
    // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and\
    \ odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{}\
    \ {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n              \
    \  evenPalindromeCount++\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n                oddPalindromeCount++\n        \
    \    }\n        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvs2_do8_test.go:29:12: undefined: isPalindrome

    /tmp/tmplvs2_do8_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
