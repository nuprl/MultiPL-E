name: HumanEval_131_digits
language: go_test.go
prompt: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a positive integer n, return the product of the odd digits.\n// Return 0 if all\
  \ digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4)  == 0\n//\
  \ digits(235) == 15\nfunc digits(n int) int {\n"
tests: "func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
  \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
  \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
  \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
  \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    product := 1\n    for i := 0; i < n; i++ {\n        product *=\
    \ int(n%10)\n        n = int(n/10)\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    return product\n}\n", "    product := 0\n    for i := 0; i < n; i++\
    \ {\n        if n%2 == 0 {\n            product *= i\n        }\n        n /=\
    \ 2\n    }\n    return product\n}\n", "    product := 1\n    for i := 0; i < n;\
    \ i++ {\n        product *= int(n%10)\n        n /= 10\n    }\n    if n == 0 {\n\
    \        return 0\n    }\n    return product\n}\n", "    p := 0\n    for i :=\
    \ 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= i\n        }\n    \
    \    n /= 2\n    }\n    return p\n}\n", "    product := 1\n    for i := 0; i <\
    \ n; i++ {\n        if n%2 == 0 {\n            product *= i\n        }\n     \
    \   n /= 2\n    }\n    return product\n}\n", "    product := 1\n    for i := 0;\
    \ i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n    }\n    if n\
    \ == 0 {\n        return 0\n    }\n    return product\n}\n", "    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n", "    p := 0\n   \
    \ for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= 2\n      \
    \      n /= 2\n        } else {\n            p += 1\n            n -= 1\n    \
    \    }\n    }\n    return p\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    product := 1\n    i := 0\n    for ; n > 0; n-- {\n        product *= int(n%10)\n\
    \        i++\n    }\n    return product\n}\n", "    product := 1\n    for i :=\
    \ 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n        }\n\
    \        n /= 2\n    }\n    return product\n}\n", "    product := 0\n    for i\
    \ := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n      \
    \  }\n        n /= 2\n    }\n    return product\n}\n", "    product := 0\n   \
    \ for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n", "    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n", "    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n", "    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n", "    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n", "    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n", "    p := 1\n   \
    \ for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= i\n      \
    \  }\n        n /= 2\n    }\n    return p\n}\n", "    product := 1\n    for i\
    \ := 0; i < n; i++ {\n        product *= i\n        if product % 2 == 1 {\n  \
    \          return 0\n        }\n    }\n    return product\n}\n", "    product\
    \ := 0\n    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product\
    \ *= i\n        }\n        n /= 2\n    }\n    return product\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
