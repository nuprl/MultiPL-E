name: HumanEval_48_is_palindrome
language: go_test.go
prompt: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
  // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n//\
  \ >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n"
tests: "func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
  \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"), expected:\
  \ true },\n     { actual: candidate(\"zbcd\"), expected: false },\n     { actual:\
  \ candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"xywyz\"),\
  \ expected: false },\n     { actual: candidate(\"xywzx\"), expected: false },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    length := len(text)\n    if length == 0 {\n        return true\n\
    \    }\n    if length <= 1 {\n        return text == text[0:length]\n    }\n \
    \   start := 0\n    end := length-1\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n", "    left, right := 0, len(text) - 1\n\
    \    for left < right {\n        if text[left] != text[right] {\n            return\
    \ false\n        }\n        left++\n        right--\n    }\n    return true\n\
    }\n", "    length := len(text)\n    if length < 2 {\n        return true\n   \
    \ }\n    start := 0\n    end := length-1\n    middle := (start + end) / 2\n  \
    \  for start < end {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        start++\n        end--\n    }\n    return true\n}\n",
  "    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n", "    if len(text) <= 1 {\n       \
    \ return true\n    }\n    first := text[0]\n    last := text[len(text)-1]\n  \
    \  return first == last\n}\n", "    length := len(text)\n    if length < 2 {\n\
    \        return true\n    }\n    start := 0\n    end := length-1\n    middle :=\
    \ length/2\n    for start < middle {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start += 1\n        end -= 1\n \
    \   }\n    return true\n}\n", "    length := len(text)\n    if length < 2 {\n\
    \        return true\n    }\n    start := 0\n    end := length-1\n    middle :=\
    \ length/2\n    for start < middle {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n", "    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return true\n}\n", "    if len(text) < 2 {\n      \
    \  return true\n    }\n    first := text[0]\n    last := text[len(text)-1]\n \
    \   return first == last\n}\n", "    if len(text) < 2 {\n        return true\n\
    \    }\n    left := 0\n    right := len(text) - 1\n    middle := (left + right)\
    \ / 2\n    for i := middle; i >= 0; i-- {\n        if text[i] != text[right] {\n\
    \            return false\n        }\n        left++\n        right--\n    }\n\
    \    return true\n}\n", "    length := len(text)\n    if length == 0 {\n     \
    \   return true\n    }\n    if length == 1 {\n        return text == text[:len(text)/2]\n\
    \    }\n    middle := length / 2\n    return is_palindrome(text[:middle]) && is_palindrome(text[middle:])\n\
    }\n", "    text := strings.ToLower(text)\n    length := len(text)\n    if length\
    \ < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n   \
    \ middle := (start + end) / 2\n    for start < end {\n        if text[start] !=\
    \ text[end] {\n            return false\n        }\n        start++\n        end--\n\
    \    }\n    return true\n}\n", "    left, right := 0, len(text)-1\n    for left\
    \ < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true\n}\n", " \
    \   if len(text) <= 1 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n", "    length :=\
    \ len(text)\n    if length < 2 {\n        return true\n    }\n    start := 0\n\
    \    end := length-1\n    middle := length/2\n    \n    for start < middle &&\
    \ end > middle {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start += 1\n        end -= 1\n    }\n    return true\n}\n",
  "    length := len(text)\n    if length < 2 {\n        return true\n    }\n    start\
    \ := 0\n    end := length-1\n    middle := length/2\n    for start < middle {\n\
    \        if text[start] != text[end] {\n            return false\n        }\n\
    \        start++\n        end--\n    }\n    return true\n}\n", "    length :=\
    \ len(text)\n    if length < 2 {\n        return true\n    }\n    start := 0\n\
    \    end := length-1\n    middle := (start + end) / 2\n    for start < end {\n\
    \        if text[start] != text[end] {\n            return false\n        }\n\
    \        start++\n        end--\n    }\n    return true\n}\n", "    if len(text)\
    \ < 2 {\n        return true\n    }\n    if text[0] != text[len(text)-1] {\n \
    \       return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n}\n",
  "    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n \
    \   \n    for start < end {\n        if text[start] != text[end] {\n         \
    \   return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n", "    if len(text) <= 1 {\n        return true\n    }\n    left :=\
    \ 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for i :=\
    \ 0; i < middle; i++ {\n        if text[i] != text[right] {\n            return\
    \ false\n        }\n        left++\n        right--\n    }\n    return true\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
