language: go_test.go
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    min += 1\n    max -= 1\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = min\n  \
    \      if i == len(lst)-1 {\n            result[i] = max\n        } else {\n \
    \           result[i+1] = max\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpr8229qr__test.go:16 +0xcf\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpr8229qr__test.go:52 +0x2ee\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__xabvg0_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) <= 1 {\n        return lst\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := make([]int, 0, len(lst))\n    for _, v := range lst {\n      \
    \  if v == min {\n            result = append(result, max)\n        } else {\n\
    \            result = append(result, v)\n        }\n    }\n\n    return strange_sort_list(result)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160380\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd700?, 0x0?, 0x4?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160390\
    \ sp=0xc020160388 pc=0x449c25\ncommand-line-arguments_test.strange_sort_list({0xc001346880?,\
    \ 0x4, 0x0?})\n\t/tmp/tmpw9g2g6d1_test.go:31 +0x7c fp=0xc020160410 sp=0xc020160390\
    \ pc=0x4ef6dc\ncommand-line-arguments_test.strange_sort_list({0xc001346860?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpw9g2g6d1_test.go:40 +0x175 fp=0xc020160490 sp=0xc020160410\
    \ pc=0x4ef7d5\ncommand-line-arguments_test.strange_sort_list({0xc001346840?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpw9g2g6d1_test.go:40 +0x175 fp=0xc020160510 sp=0xc020160490\
    \ pc=0x4ef7d5\ncommand-line-arguments_test.strange_sort_list({0xc001346820?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpw9g2g6d1_test.go:40 +0x175 fp=0xc020160590 sp=0xc020160510\
    \ pc=0x4ef7d5\ncommand-line-arguments_test.strange_sort_list({0xc001346800?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpw9g2g6d1_test.go:40 +0x175 fp=0xc020160610 sp=0xc020160590\
    \ pc=0x4ef7d5\ncommand-line-arguments_test.strange_sort_list({0xc0013467e0?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpw9g2g6d1_test.go:40 +0x175 fp=0xc020160690 sp=0xc020160610\
    \ pc=0x4ef7d5\ncommand-line-arguments_test.strange_sort_list({0xc0013467c0?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpw9g2g6d1_test.go:40 +0x175 fp=0xc020160710 sp=0xc020160690\
    \ pc=0x4ef7d5\ncommand-line-arguments_test.strange_sort_list({0xc0013467a0?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpw9g2g6d1_test.go:40 +0x175 fp=0xc020160790 sp=0xc020160710\
    \ pc=0x4ef7d5\ncommand-line-arguments_test.strange_sort_list({0xc001346780?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpw9g2g6d1_test.go:40 +0x175 fp=0xc020160810 sp=0xc020160790\
    \ pc=0x4ef7d5\ncommand-line-arguments_test.strange_so"
  timestamp: 1660074702
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp25wpaq4q_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min}, lst...)\n    lst = append([]int{max}, lst...)\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp7pa7dgbc_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp7pa7dgbc_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp7pa7dgbc_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n   \
    \     tmp7pa7dgbc_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    result := []int{}\n    for _, v := range lst {\n        if v == min {\n \
    \           result = append(result, v)\n        }\n        if v == max {\n   \
    \         result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ result {\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwreyeol9_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = \nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1v9rc9nu_test.go:126:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpah2bwa_d_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            result[i] = min\n\
    \        } else {\n            result[i] = max\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp9k8jmwyi_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp9k8jmwyi_test.go:49\
    \ +0x427\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp25wpaq4q_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    var min int\n    var max int\n    for _, v := range lst\
    \ {\n        if min == 0 {\n            min = v\n        }\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, min)\n        }\n        if v == max {\n      \
    \      result = append(result, max)\n        }\n    }\n    for _, v := range lst\
    \ {\n        if v == min {\n            result = append(result, min)\n       \
    \ }\n        if v == max {\n            result = append(result, max)\n       \
    \ }\n    }\n    for _, v := range lst {\n        if v == min {\n            result\
    \ = append(result, min)\n        }\n        if v == max {\n            result\
    \ = append(result, max)\n        }\n    }\n    for _, v := range lst {\n     \
    \   if v == min {\n            result = append(result, min)\n        }\n     \
    \   if v == max {\n            result = append(result, max)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ min)\n        }\n        if v == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    for _, v := range lst {\n        if v == min {\n\
    \            result = append(result, min)\n        }\n        if v == max {\n\
    \            result = append(result, max)\n        }\n    }\n    for _, v := range\
    \ lst {\n        if v == min {\n            result = append(result, min)\n   \
    \     }\n        if v == max {\n            result = append(result, max)\n   \
    \     }\n    }\n    for _, v := range lst {\n        if v == min {\n         \
    \   result = append(result, min)\n        }\n        if v == max {\n         \
    \   result = append(result, max)\n        }\n    }\n    for _, v := range lst\
    \ {\n        if v == min {\n            result = append(result, min)\n       \
    \ }\n        if v == max {\n            result = append(result, max)\n       \
    \ }\n    }\n    for _, v := range lst {\n        if v == min {\n            result\
    \ = append(result, min)\n        }\n        if v == max {\n            result\
    \ = append(result, max)\n        }\n    }\n    for _, v := range lst {\n     \
    \   if v == min {\n            result = append(result, min)\n        }\n     \
    \   if v == max {\n            result = append(result, max)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ min)\n        }\n        if v == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    for _, v := range lst {\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpro7p1fq9_test.go:128:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n\n    // Find the minimum value\n\
    \    min := lst[0]\n    for _, val := range lst {\n        if val < min {\n  \
    \          min = val\n        }\n    }\n\n    // Find the maximum value\n    max\
    \ := lst[0]\n    for _, val := range lst {\n        if val > max {\n         \
    \   max = val\n        }\n    }\n\n    // Sort list from min to max\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n\
    \n    // Return sorted list\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwli58t59_test.go:37:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = min + i*((max-min)/len(lst))\n    }\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp7vrevjub_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp7vrevjub_test.go:45\
    \ +0x4b1\ntesting.tRunner(0xc0001036c0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = min + i*((max-min)/len(lst))\n    }\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp7vrevjub_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp7vrevjub_test.go:45\
    \ +0x4b1\ntesting.tRunner(0xc0001036c0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    for _, v := range lst {\n        result = append(result,\
    \ v)\n    }\n    for i := len(lst) - 1; i >= 0; i-- {\n        for j := 0; j <\
    \ i; j++ {\n            if result[j] > result[j+1] {\n                tmp := result[j]\n\
    \                result[j] = result[j+1]\n                result[j+1] = tmp\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpuvtouuqx_test.go:53: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpuvtouuqx_test.go:53: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpuvtouuqx_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpuvtouuqx_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpuvtouuqx_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpuvtouuqx_test.go:53: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min}, lst...)\n    lst = append([]int{max}, lst...)\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp7pa7dgbc_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp7pa7dgbc_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp7pa7dgbc_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n   \
    \     tmp7pa7dgbc_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) <= 0 {\n        return lst\n    }\n\n    // Initialize min and\
    \ max to first element.\n    min := lst[0]\n    max := lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n\n    // Sort remaining elements.\n\
    \    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n  \
    \      if lst[i] < min {\n            result[i] = min\n        } else {\n    \
    \        result[i] = max\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpwv4c03ku_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpwv4c03ku_test.go:66: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpwv4c03ku_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpwv4c03ku_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpwv4c03ku_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpwv4c03ku_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max to first element.\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n\
    \    // Initialize result with min and max elements.\n    result := make([]int,\
    \ 2)\n    result[0] = min\n    result[1] = max\n\n    // Sort remaining elements.\n\
    \    for _, v := range lst {\n        if v < min {\n            v = v - min\n\
    \        }\n        if v > max {\n            v = v - max\n        }\n       \
    \ result[0] = v\n        result[1] = v\n    }\n\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f1bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmp8kiq2qjn_test.go:17 +0xe5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp8kiq2qjn_test.go:60 +0x2ee\ntesting.tRunner(0xc000003d40, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    var min int\n    var max int\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    for _, v := range lst {\n    \
    \    if v == min {\n            result = append(result, max)\n            max\
    \ = v\n        } else {\n            result = append(result, v)\n        }\n \
    \   }\n    for _, v := range lst {\n        if v == max {\n            result\
    \ = append(result, min)\n            min = v\n        } else {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpvqh1_azl_test.go:67: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpvqh1_azl_test.go:67: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpvqh1_azl_test.go:67: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpvqh1_azl_test.go:67: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpvqh1_azl_test.go:67: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpvqh1_azl_test.go:67: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=0)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvqh1_azl_test.go:67:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=-5) %!s(i"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__xabvg0_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := range\
    \ lst {\n        if min > lst[i] {\n            result[i] = min\n        } else\
    \ {\n            result[i] = lst[i]\n        }\n    }\n    for i := range lst\
    \ {\n        if max < lst[i] {\n            result[i] = max\n        } else {\n\
    \            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpvct7fesl_test.go:16 +0xdf\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpvct7fesl_test.go:56 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    var min int\n    var max int\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    for _, v := range lst {\n    \
    \    if v == min {\n            result = append(result, max)\n        } else {\n\
    \            result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ lst {\n        if v == max {\n            result = append(result, min)\n   \
    \     } else {\n            result = append(result, v)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp7lcdrvwl_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmp7lcdrvwl_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp7lcdrvwl_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp7lcdrvwl_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp7lcdrvwl_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmp7lcdrvwl_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=0)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp7lcdrvwl_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(in"
  timestamp: 1660074701
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, val := range lst {\n        if val < min {\n            min\
    \ = val\n        }\n        if val > max {\n            max = val\n        }\n\
    \    }\n    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074712
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__xabvg0_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := make([]int, len(lst))\n    for i, v := range lst {\n        if\
    \ v == min {\n            result[i] = max\n        } else {\n            result[i]\
    \ = min\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpvr54xh0y_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvr54xh0y_test.go:64: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpvr54xh0y_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvr54xh0y_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvr54xh0y_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpvr54xh0y_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            result[i] = min\n\
    \        } else {\n            result[i] = max\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp9k8jmwyi_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp9k8jmwyi_test.go:49\
    \ +0x427\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max to first element\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n\n    //\
    \ Initialize new list with min and max values\n    result := make([]int, 0, 2)\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ min)\n        }\n        if v == max {\n            result = append(result,\
    \ max)\n        }\n    }\n\n    // Append remaining elements\n    for _, v :=\
    \ range lst {\n        if v != min && v != max {\n            result = append(result,\
    \ v)\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpv19w4fo2_test.go:17 +0x24d\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpv19w4fo2_test.go:61 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max to first element of list\n    min := lst[0]\n   \
    \ max := lst[0]\n    for _, val := range lst {\n        if val < min {\n     \
    \       min = val\n        }\n        if val > max {\n            max = val\n\
    \        }\n    }\n\n    // Initialize new list with min and max values\n    result\
    \ := make([]int, 0, 2)\n    for _, val := range lst {\n        if val < min {\n\
    \            result = append(result, min)\n        } else if val > max {\n   \
    \         result = append(result, max)\n        } else {\n            result =\
    \ append(result, val)\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpobuqwl1c_test.go:17\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpobuqwl1c_test.go:55\
    \ +0x9d0\ntesting.tRunner(0xc00019e1a0, 0x528d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    min += 1\n    max -= 1\n    result := []int{}\n \
    \   for i := 0; i < len(lst); i++ {\n        if min <= lst[i] && lst[i] <= max\
    \ {\n            result = append(result, lst[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpmexiecyp_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpmexiecyp_test.go:49\
    \ +0x665\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074702
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__xabvg0_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min}, lst...)\n    lst = append([]int{max}, lst...)\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpinqaro53_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__xabvg0_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n    lst = append([]int{max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512580,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512580, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmptgrpwnlz_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmptgrpwnlz_test.go:43\
    \ +0x538\ntesting.tRunner(0xc0001a0340, 0x527e80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074702
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpah2bwa_d_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            result[i] = min\n\
    \        } else {\n            result[i] = max\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp9k8jmwyi_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp9k8jmwyi_test.go:49\
    \ +0x427\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    for _, value := range lst {\n        result = append(result,\
    \ value)\n    }\n    for i := len(lst) - 1; i > 0; i-- {\n        for j := 0;\
    \ j < i; j++ {\n            if result[j] > result[j+1] {\n                tmp\
    \ := result[j]\n                result[j] = result[j+1]\n                result[j+1]\
    \ = tmp\n            }\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp66bffolc_test.go:53: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp66bffolc_test.go:53: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp66bffolc_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp66bffolc_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp66bffolc_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp66bffolc_test.go:53: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074702
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    var min int\n    var max int\n    for _, v := range lst\
    \ {\n        if min == 0 {\n            min = v\n        }\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, min)\n        }\n        if v == max {\n      \
    \      result = append(result, max)\n        }\n        if v < min {\n       \
    \     result = append(result, v)\n        }\n        if v > max {\n          \
    \  result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpe46wjh7n_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpe46wjh7n_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpe46wjh7n_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpe46wjh7n_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpe46wjh7n_test.go:68: expected\
    \ '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpe46wjh7n_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpe46wjh7n_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpe46wjh7n_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    var min int\n    var max int\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    for _, v := range lst {\n    \
    \    if v == min {\n            result = append(result, max)\n        }\n    \
    \    if v == max {\n            result = append(result, min)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp8fi_0uec_test.go:59: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp8fi_0uec_test.go:59: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp8fi_0uec_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp8fi_0uec_test.go:59: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmp8fi_0uec_test.go:59: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp8fi_0uec_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4)\
    \ %!s(int=5)]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp8fi_0uec_test.go:59: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8\
    \ (0.00s)\n        tmp8fi_0uec_test.go:59: expected '[%!s(int=111111)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max values\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst {\n        if v < min {\n            min = v\n      \
    \  }\n        if v > max {\n            max = v\n        }\n    }\n\n    // Initialize\
    \ new list\n    result := make([]int, len(lst))\n\n    // Sort list using min\
    \ and max\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n  \
    \          lst[i], lst[len(lst)-i-1] = lst[len(lst)-i-1], lst[i]\n        }\n\
    \        if lst[i] < min {\n            lst[i], lst[len(lst)-i-1] = lst[len(lst)-i-1],\
    \ lst[i]\n        }\n        result[i] = lst[i]\n    }\n\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpj_6gph8p_test.go:17 +0x11e\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpj_6gph8p_test.go:57 +0x2ee\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    for _, v := range lst {\n        result = append(result,\
    \ v)\n    }\n    for i := len(lst) - 1; i > 0; i-- {\n        for j := 0; j <\
    \ i; j++ {\n            if result[j] > result[j+1] {\n                tmp := result[j]\n\
    \                result[j] = result[j+1]\n                result[j+1] = tmp\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpojki45i6_test.go:53: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpojki45i6_test.go:53: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpojki45i6_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpojki45i6_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpojki45i6_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpojki45i6_test.go:53: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    min += 1\n    max -= 1\n    result := []int{}\n \
    \   for _, v := range lst {\n        if v < min {\n            result = append(result,\
    \ min)\n            min = v\n        }\n        if v > max {\n            result\
    \ = append(result, max)\n            max = v\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpo90nr6c4_test.go:16 +0x229\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpo90nr6c4_test.go:56 +0x2ee\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max to first element of lst\n    var min, max int\n \
    \   min, max = lst[0], lst[0]\n\n    // Iterate through remaining elements of\
    \ lst\n    for _, v := range lst[1:] {\n        // If current element is greater\
    \ than max, swap it with max\n        if v > max {\n            max, min = v,\
    \ max\n        }\n        // If current element is less than min, swap it with\
    \ min\n        if v < min {\n            max, min = v, min\n        }\n    }\n\
    \n    // Return sorted list\n    return []int{min, max}\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmppytqkq3g_test.go:18\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmppytqkq3g_test.go:48\
    \ +0x367\ntesting.tRunner(0xc000192680, 0x527da0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpah2bwa_d_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min}, lst...)\n    lst = append([]int{max}, lst...)\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp7pa7dgbc_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp7pa7dgbc_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp7pa7dgbc_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp7pa7dgbc_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n   \
    \     tmp7pa7dgbc_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n    lst = append([]int{max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512580,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512580, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmptgrpwnlz_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmptgrpwnlz_test.go:43\
    \ +0x538\ntesting.tRunner(0xc0001a0340, 0x527e80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074702
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprr_d73zf_test.go:16:5: undefined: sort

    /tmp/tmprr_d73zf_test.go:16:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max to first element of lst\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    // Initialize new list to hold sorted elements\n    result := make([]int,\
    \ len(lst))\n\n    // Sort list using min and max values\n    for i := 0; i <\
    \ len(lst); i++ {\n        if lst[i] < min {\n            lst[i], lst[0] = lst[0],\
    \ lst[i]\n        }\n        if lst[i] > max {\n            lst[i], lst[len(lst)-1]\
    \ = lst[len(lst)-1], lst[i]\n        }\n    }\n\n    // Return sorted list\n \
    \   return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpes1z_tbn_test.go:17 +0xd3\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpes1z_tbn_test.go:57 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) <= 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n \
    \       if lst[i] > max {\n            lst[i], lst[len(lst)-i-1] = lst[len(lst)-i-1],\
    \ lst[i]\n        }\n        if lst[i] < min {\n            lst[i], lst[len(lst)-i-1]\
    \ = lst[len(lst)-i-1], lst[i]\n        }\n        result[i] = lst[i]\n    }\n\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpgp3t1dd3_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpgp3t1dd3_test.go:66: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpgp3t1dd3_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpgp3t1dd3_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpgp3t1dd3_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpgp3t1dd3_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074703
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            result[i] = min\n        } else {\n   \
    \         result[i] = max\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsocynzwj_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074702
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max to first element.\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    // Initialize new list with min and max elements.\n    result := make([]int,\
    \ 2)\n    result[0] = min\n    result[1] = max\n    // Iterate through remaining\
    \ elements.\n    for _, v := range lst {\n        if v < min {\n            result[0]\
    \ = v\n        }\n        if v > max {\n            result[1] = v\n        }\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp9m74vs99_test.go:17\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp9m74vs99_test.go:55\
    \ +0x45e\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074703
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max with first element\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n\
    \    // Initialize new list with min and max values\n    result := make([]int,\
    \ 0, 2)\n    for _, v := range lst {\n        if v == min {\n            result\
    \ = append(result, min)\n        }\n        if v == max {\n            result\
    \ = append(result, max)\n        }\n    }\n\n    // Append remaining elements\
    \ to new list\n    for _, v := range lst {\n        if v != min && v != max {\n\
    \            result = append(result, v)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000187bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpqfn56dx6_test.go:17 +0x24d\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpqfn56dx6_test.go:61 +0x2ee\ntesting.tRunner(0xc000199040, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max values\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst {\n        if v < min {\n            min = v\n      \
    \  }\n        if v > max {\n            max = v\n        }\n    }\n\n    // Initialize\
    \ new list\n    result := make([]int, len(lst))\n\n    // Sort list by comparing\
    \ min and max\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n\
    \            result[i] = min\n        } else {\n            result[i] = max\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp6v9ak226_test.go:17\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp6v9ak226_test.go:55\
    \ +0x427\ntesting.tRunner(0xc000103520, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = min\n        if i == len(lst)-1 {\n\
    \            result[i] = max\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp_j93p64b_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp_j93p64b_test.go:48\
    \ +0x3f7\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpah2bwa_d_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n    lst = append([]int{max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512580,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512580, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmptgrpwnlz_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmptgrpwnlz_test.go:43\
    \ +0x538\ntesting.tRunner(0xc0001a0340, 0x527e80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074702
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := []int{}\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    \
    \    if v < min {\n            result = append(result, v)\n        }\n       \
    \ if v > max {\n            result = append(result, v)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmppmr7l50t_test.go:16 +0x27d\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmppmr7l50t_test.go:56 +0x2ee\ntesting.tRunner(0xc0001124e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max values\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst {\n        if v < min {\n            min = v\n      \
    \  }\n        if v > max {\n            max = v\n        }\n    }\n\n    // Initialize\
    \ new list\n    result := make([]int, len(lst))\n\n    // Sort list using min\
    \ and max\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n  \
    \          lst[i] = min\n            continue\n        }\n        if lst[i] >\
    \ max {\n            lst[i] = max\n            continue\n        }\n        result[i]\
    \ = lst[i]\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpobc6bvqc_test.go:17 +0xc8\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpobc6bvqc_test.go:59 +0x2ee\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min}, lst...)\n    lst = append([]int{max}, lst...)\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpinqaro53_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := []int{}\n    for _, v := range lst {\n        if v == min {\n\
    \            result = append(result, max)\n        }\n        if v == max {\n\
    \            result = append(result, min)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz9ql6e1u_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074702
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpah2bwa_d_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = min\n        if i == len(lst)-1 {\n\
    \            result[i] = max\n        } else {\n            result[i+1] = max\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpgjfjki6u_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpgjfjki6u_test.go:50\
    \ +0x41e\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074704
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, val := range lst {\n        if val < min {\n         \
    \   min = val\n        }\n        if val > max {\n            max = val\n    \
    \    }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i == 0 {\n            result[i] = min\n        } else {\n\
    \            result[i] = max\n        }\n    }\n\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn68r3q58_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n\n    // Initialize min and max\
    \ to first and last element\n    min := lst[0]\n    max := lst[len(lst)-1]\n\n\
    \    // Initialize new list to hold sorted elements\n    result := make([]int,\
    \ 0, len(lst))\n\n    // Sort list by comparing min with each element\n    for\
    \ _, v := range lst {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n    }\n\n    // Add min\
    \ to result\n    result = append(result, min)\n\n    // Add max to result\n  \
    \  result = append(result, max)\n\n    // Add remaining elements to result\n \
    \   for _, v := range lst[len(lst)-1:] {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n     \
    \   result = append(result, v)\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoknhm6i1_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  n := len(lst)\n    if n == 0 {\n        return []int{}\n    }\n    min := lst[0]\n\
    \    max := lst[n-1]\n    i := 0\n    j := n - 1\n    k := n - 2\n    result :=\
    \ make([]int, n)\n    for {\n        if i == j {\n            break\n        }\n\
    \        if lst[i] > max {\n            k = k - 1\n            max = lst[k]\n\
    \        }\n        if lst[j] < min {\n            k = k - 1\n            min\
    \ = lst[k]\n        }\n        if lst[i] < min {\n            i = i + 1\n    \
    \        continue\n        }\n        if lst[j] > max {\n            j = j - 1\n\
    \            max = lst[j]\n        }\n        result[i] = lst[i]\n        result[j]\
    \ = lst[j]\n        i = i + 1\n        j = j - 1\n    }\n    for i := 0; i < n;\
    \ i++ {\n        result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5c90, 0x4, 0x450329?})\n\
    \t/tmp/tmp3mgzk9gl_test.go:30 +0x18f\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp3mgzk9gl_test.go:64 +0x93\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074704
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpah2bwa_d_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n\n    // Find minimum value\n\
    \    min := lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n    }\n\n    // Find maximum value\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v > max {\n            max = v\n    \
    \    }\n    }\n\n    // Sort remaining values\n    lst = append([]int{min}, lst...)\n\
    \    lst = append(lst, max)\n\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpr34ujhmn_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpr34ujhmn_test.go:64:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpr34ujhmn_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpr34ujhmn_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)\
    \ %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpr34ujhmn_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpr34ujhmn_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpr34ujhmn_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpr34ujhmn_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar"
  timestamp: 1660074705
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize first element to minimum.\n    min := lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n    }\n\n\
    \    // Initialize last element to maximum.\n    max := lst[len(lst)-1]\n    for\
    \ _, v := range lst[len(lst)-1:] {\n        if v > max {\n            max = v\n\
    \        }\n    }\n\n    // Initialize middle element to minimum of first and\
    \ last element.\n    middle := min\n    for _, v := range lst[1:len(lst)-1] {\n\
    \        if v < middle {\n            middle = v\n        }\n    }\n\n    // Return\
    \ new list.\n    return append([]int{min}, lst[1:len(lst)-1], middle)\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8r2k_y3n_test.go:41:34: cannot use lst[1:len(lst) - 1] (value of type
    []int) as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074704
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max to first element\n    var min, max int\n    min =\
    \ max = lst[0]\n\n    // Iterate over remaining elements\n    for i := 1; i <\
    \ len(lst); i++ {\n        // If current element is greater than max, swap it\
    \ with max\n        if lst[i] > max {\n            max = lst[i]\n        }\n\n\
    \        // If current element is less than min, swap it with min\n        if\
    \ lst[i] < min {\n            min = lst[i]\n        }\n    }\n\n    // Return\
    \ sorted list\n    return []int{min, max}\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq2b2bfg4_test.go:18:15: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074704
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max with first element.\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n\n    // Iterate over remaining elements.\n    for i :=\
    \ 1; i < len(lst); i++ {\n        // If current element is greater than max, swap\
    \ it with max.\n        if lst[i] > max {\n            max = lst[i]\n        }\n\
    \n        // If current element is less than min, swap it with min.\n        if\
    \ lst[i] < min {\n            min = lst[i]\n        }\n    }\n\n    // Return\
    \ sorted list.\n    return []int{min, max, lst[0], lst[len(lst)-1]}\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmplcxte8v7_test.go:18\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmplcxte8v7_test.go:49\
    \ +0x453\ntesting.tRunner(0xc0001164e0, 0x527da0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074705
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            result[i] = min\n\
    \        } else {\n            result[i] = max\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp9k8jmwyi_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp9k8jmwyi_test.go:49\
    \ +0x427\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074701
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) <= 1 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074718
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__xabvg0_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n    lst = append([]int{max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512580,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512580, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmptgrpwnlz_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmptgrpwnlz_test.go:43\
    \ +0x538\ntesting.tRunner(0xc0001a0340, 0x527e80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074702
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] > max {\n            lst[i], lst[len(lst)-i-1]\
    \ = lst[len(lst)-i-1], lst[i]\n        }\n        if lst[i] < min {\n        \
    \    lst[i], lst[len(lst)-i-1] = lst[len(lst)-i-1], lst[i]\n        }\n      \
    \  result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmphn6uk0ot_test.go:16 +0x11e\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmphn6uk0ot_test.go:51 +0x2ee\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074705
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    for i := 0; i < len(lst); i++ {\n        j := i\n   \
    \     for j > 0 && lst[j-1] > lst[j] {\n            lst[j-1], lst[j] = lst[j],\
    \ lst[j-1]\n            j--\n        }\n        result = append(result, lst[j])\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp0px4khb8_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp0px4khb8_test.go:49: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp0px4khb8_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp0px4khb8_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp0px4khb8_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp0px4khb8_test.go:49: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074705
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) <= 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min}, lst...)\n    lst = append([]int{max}, lst...)\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpfjarggmu_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpfjarggmu_test.go:55:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpfjarggmu_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpfjarggmu_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpfjarggmu_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpfjarggmu_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpfjarggmu_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n   \
    \     tmpfjarggmu_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar"
  timestamp: 1660074705
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, val := range lst {\n        if val < min {\n         \
    \   min = val\n        }\n        if val > max {\n            max = val\n    \
    \    }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            result[i] = min\n        } else\
    \ {\n            result[i] = max\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpqmy6p_o8_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpqmy6p_o8_test.go:63: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpqmy6p_o8_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpqmy6p_o8_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpqmy6p_o8_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpqmy6p_o8_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074705
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    var min int\n    var max int\n    for _, v := range lst\
    \ {\n        if min == 0 {\n            min = v\n            max = v\n       \
    \     continue\n        }\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n    for _, v\
    \ := range lst {\n        if v < min {\n            result = append(result, min)\n\
    \            min = v\n            continue\n        }\n        if v > max {\n\
    \            result = append(result, max)\n            max = v\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return append(result,\
    \ min)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp_snkp0po_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp_snkp0po_test.go:69:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp_snkp0po_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n    \
    \    tmp_snkp0po_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp_snkp0po_test.go:69: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__5 (0.00s)\n        tmp_snkp0po_test.go:69: expected\
    \ '[]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmp_snkp0po_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp_snkp0po_test.go:69:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8\
    \ (0.00s)\n        tmp_snkp0po_test.go:69: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111"
  timestamp: 1660074705
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := []int{}\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range result {\n        result = append(result, v)\n    }\n \
    \   return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmptb6d0yca_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmptb6d0yca_test.go:53\
    \ +0xb25\ntesting.tRunner(0xc000103520, 0x528d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074705
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max values.\n    min := lst[0]\n    max := lst[0]\n \
    \   for _, v := range lst {\n        if v < min {\n            min = v\n     \
    \   }\n        if v > max {\n            max = v\n        }\n    }\n\n    // Sort\
    \ list using min and max values.\n    result := make([]int, len(lst))\n    for\
    \ i := 0; i < len(lst); i++ {\n        result[i] = min + i*(max-min+1)\n    }\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp69p21gie_test.go:17\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp69p21gie_test.go:48\
    \ +0x41f\ntesting.tRunner(0xc000103520, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074705
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) <= 1 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074718
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpah2bwa_d_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, max)\n        }\n\
    \        if v == max {\n            result = append(result, min)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpye9tt1fy_test.go:17\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpye9tt1fy_test.go:50\
    \ +0x810\ntesting.tRunner(0xc0001a01a0, 0x528d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074706
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max variables\n    var min, max int\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n\n    // Initialize result\
    \ list\n    var result []int\n\n    // Sort list by comparing min and max\n  \
    \  for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n\n    // Append min and max to result\n    result = append(result,\
    \ min)\n    result = append(result, max)\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp96a8zlwj_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp96a8zlwj_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=0) %!s(int=9)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp96a8zlwj_test.go:68: expected\
    \ '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmp96a8zlwj_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=0) %!s(int=9)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp96a8zlwj_test.go:68: expected\
    \ '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__5\
    \ (0.00s)\n        tmp96a8zlwj_test.go:68: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp96a8zlwj_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=0) %!s(int=8)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp96a8zlwj_test.go:68: expected\
    \ '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmp96a8zlwj_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=0) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074706
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpah2bwa_d_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            result[i] = min\n\
    \        } else {\n            result[i] = max\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp9k8jmwyi_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp9k8jmwyi_test.go:49\
    \ +0x427\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074701
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n \
    \       if lst[i] > max {\n            j := i\n            for ; j < len(lst)\
    \ && lst[j] <= max; j++ {\n            }\n            result[i] = lst[j]\n   \
    \         lst[i] = max\n            max = lst[j]\n        }\n        if lst[i]\
    \ < min {\n            j := i\n            for ; j < len(lst) && lst[j] >= min;\
    \ j++ {\n            }\n            result[i] = lst[j]\n            lst[i] = min\n\
    \            min = lst[j]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmphbibq_a__test.go:74: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmphbibq_a__test.go:74: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmphbibq_a__test.go:74: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmphbibq_a__test.go:74:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmphbibq_a__test.go:74:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmphbibq_a__test.go:74: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmphbibq_a__test.go:74: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmphbibq_a__test.go:74:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074706
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := []int{}\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    \
    \    if v < min {\n            result = append(result, v)\n        }\n       \
    \ if v > max {\n            result = append(result, v)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmppmr7l50t_test.go:16 +0x27d\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmppmr7l50t_test.go:56 +0x2ee\ntesting.tRunner(0xc0001124e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprr_d73zf_test.go:16:5: undefined: sort

    /tmp/tmprr_d73zf_test.go:16:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n    lst = append([]int{max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512580,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512580, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmptgrpwnlz_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmptgrpwnlz_test.go:43\
    \ +0x538\ntesting.tRunner(0xc0001a0340, 0x527e80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074702
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max variables.\n    min := lst[0]\n    max := lst[0]\n\
    \    // Iterate through the list.\n    for _, val := range lst {\n        // If\
    \ current value is greater than max, set max to current value.\n        if val\
    \ > max {\n            max = val\n        }\n        // If current value is less\
    \ than min, set min to current value.\n        if val < min {\n            min\
    \ = val\n        }\n    }\n    // Return sorted list.\n    return []int{min, max}\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp19k8j96h_test.go:17\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp19k8j96h_test.go:46\
    \ +0x365\ntesting.tRunner(0xc0001a01a0, 0x527da0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074706
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    var min int\n    var max int\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    for _, v := range lst {\n    \
    \    if v == min {\n            result = append(result, max)\n        } else {\n\
    \            result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ lst {\n        if v == max {\n            result = append(result, min)\n   \
    \     } else {\n            result = append(result, v)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp7lcdrvwl_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmp7lcdrvwl_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp7lcdrvwl_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp7lcdrvwl_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp7lcdrvwl_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmp7lcdrvwl_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=0)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp7lcdrvwl_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(in"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    min += 1\n    max -= 1\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        if min <= lst[i] &&\
    \ lst[i] <= max {\n            result[i] = lst[i]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f4bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpqfv5pexf_test.go:16 +0xc5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpqfv5pexf_test.go:49 +0x2ee\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074706
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, max)\n        }\n\
    \        if v == max {\n            result = append(result, min)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpye9tt1fy_test.go:17\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpye9tt1fy_test.go:50\
    \ +0x810\ntesting.tRunner(0xc0001a01a0, 0x528d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074706
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    for _, v := range lst {\n        result = append(result,\
    \ v)\n    }\n    for i := 0; i < len(lst); i++ {\n        j := i\n        for\
    \ j > 0 && lst[j-1] > lst[j] {\n            lst[j] = lst[j-1]\n            j--\n\
    \        }\n        lst[j] = i\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp2kt6x1k8_test.go:52: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp2kt6x1k8_test.go:52: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp2kt6x1k8_test.go:52: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp2kt6x1k8_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp2kt6x1k8_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp2kt6x1k8_test.go:52: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074706
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n \
    \       if lst[i] > max {\n            j := i\n            for ; j < len(lst)\
    \ && lst[j] >= max; j++ {\n            }\n            result[i] = lst[j]\n   \
    \         lst[i] = max\n            max = lst[j]\n        } else {\n         \
    \   result[i] = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] < min {\n            result[i] = min\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpju7ob401_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074705
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprr_d73zf_test.go:16:5: undefined: sort

    /tmp/tmprr_d73zf_test.go:16:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            result[i] = min\n\
    \        } else {\n            result[i] = max\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp9k8jmwyi_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp9k8jmwyi_test.go:49\
    \ +0x427\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max values.\n    min := lst[0]\n    max := lst[0]\n \
    \   for _, v := range lst {\n        if v < min {\n            min = v\n     \
    \   }\n        if v > max {\n            max = v\n        }\n    }\n\n    // Sort\
    \ list by swapping min and max.\n    min := min\n    max := max\n    for i :=\
    \ 1; i < len(lst); i++ {\n        if lst[i] < min {\n            lst[i], lst[i-1]\
    \ = lst[i-1], lst[i]\n        }\n        if lst[i] > max {\n            lst[i],\
    \ lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n\n    // Return sorted list.\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8ts42vi_test.go:29:9: no new variables on left side of :=

    /tmp/tmpi8ts42vi_test.go:30:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074705
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n    for i := 1; i <\
    \ n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n \
    \       if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for\
    \ i := 0; i < n; i++ {\n        lst[i], lst[n-i-1] = lst[n-i-1], lst[i]\n    }\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0x62a7e0?, 0x5d4210?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpw0aseo7x_test.go:17 +0xaf\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpw0aseo7x_test.go:45 +0x229\ntesting.tRunner(0xc00019e000, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074706
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = min + i*((max-min)/len(lst))\n    }\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp7vrevjub_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp7vrevjub_test.go:45\
    \ +0x4b1\ntesting.tRunner(0xc0001036c0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__xabvg0_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__xabvg0_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = min + i*(max-min+1)\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp1tn0_jy9_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp1tn0_jy9_test.go:45\
    \ +0x41f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074706
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := make([]int, 0, len(lst))\n    for _, v := range lst {\n      \
    \  if v == min {\n            result = append(result, max)\n        } else {\n\
    \            result = append(result, v)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp2u_50059_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp2u_50059_test.go:64: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp2u_50059_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp2u_50059_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp2u_50059_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp2u_50059_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    var min int\n    var max int\n    for _, v := range lst\
    \ {\n        if min == 0 {\n            min = v\n        }\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, max)\n        } else {\n            result = append(result,\
    \ v)\n        }\n    }\n    for _, v := range lst {\n        if v == max {\n \
    \           result = append(result, min)\n        } else {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpi8hzsemh_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpi8hzsemh_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpi8hzsemh_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpi8hzsemh_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpi8hzsemh_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpi8hzsemh_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpi8hzsemh_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(in"
  timestamp: 1660074707
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__xabvg0_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max values\n    var min, max int\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n\n    // Initialize new list\n\
    \    result := make([]int, len(lst))\n\n    // Sort list using min and max values\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            lst[i],\
    \ lst[len(lst)-i-1] = lst[len(lst)-i-1], lst[i]\n        }\n        if lst[i]\
    \ < min {\n            lst[i], lst[len(lst)-i-1] = lst[len(lst)-i-1], lst[i]\n\
    \        }\n        result[i] = lst[i]\n    }\n\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpu59yybzy_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpu59yybzy_test.go:65: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpu59yybzy_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpu59yybzy_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpu59yybzy_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpu59yybzy_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, val := range lst {\n        if val < min {\n            min\
    \ = val\n        }\n        if val > max {\n            max = val\n        }\n\
    \    }\n    lst = append([]int{min}, lst...)\n    lst = append([]int{max}, lst...)\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3frl_obc_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074706
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    for _, v := range lst {\n        result = append(result,\
    \ v)\n    }\n    for i := len(lst) - 1; i > 0; i-- {\n        for j := 0; j <\
    \ i; j++ {\n            if result[j] > result[j+1] {\n                tmp := result[j]\n\
    \                result[j] = result[j+1]\n                result[j+1] = tmp\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpojki45i6_test.go:53: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpojki45i6_test.go:53: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpojki45i6_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpojki45i6_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpojki45i6_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpojki45i6_test.go:53: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, val := range lst {\n        if\
    \ val < min {\n            min = val\n        }\n        if val > max {\n    \
    \        max = val\n        }\n    }\n    result := make([]int, len(lst))\n  \
    \  for i := 0; i < len(lst); i++ {\n        result[i] = min + i*(max-min+1)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpcx2o64gs_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpcx2o64gs_test.go:45\
    \ +0x41f\ntesting.tRunner(0xc000103380, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := []int{}\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, min)\n        }\n\
    \        if v == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpb4x9tw1__test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpb4x9tw1__test.go:50\
    \ +0x818\ntesting.tRunner(0xc0001a0340, 0x528d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpah2bwa_d_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max values\n    var min, max int\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n\n    // Initialize new list\n\
    \    result := make([]int, len(lst))\n\n    // Sort list by comparing min and\
    \ max\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n      \
    \      result[i] = min\n        } else {\n            result[i] = max\n      \
    \  }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpg84lr8g8_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpg84lr8g8_test.go:63: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpg84lr8g8_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpg84lr8g8_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpg84lr8g8_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpg84lr8g8_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074707
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max to first element of list\n    min := lst[0]\n   \
    \ max := lst[0]\n    for _, v := range lst {\n        if v < min {\n         \
    \   min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n\n    // Initialize new list with min and max values\n    result := make([]int,\
    \ 2)\n    result[0] = min\n    result[1] = max\n\n    // Sort remaining elements\
    \ of the list\n    for _, v := range lst {\n        if v < min {\n           \
    \ v = v - min\n        }\n        if v > max {\n            v = v - max\n    \
    \    }\n        result[0] += v\n        result[1] += v\n    }\n\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00011bbf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmp_b9cr5gf_test.go:17 +0xe5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp_b9cr5gf_test.go:60 +0x2ee\ntesting.tRunner(0xc0001031e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = \nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1v9rc9nu_test.go:126:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    for _, v := range lst {\n        result = append(result,\
    \ v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynrpqvfy_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n    lst = append([]int{max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512580,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512580, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmptgrpwnlz_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmptgrpwnlz_test.go:43\
    \ +0x538\ntesting.tRunner(0xc0001a0340, 0x527e80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074702
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, val := range lst {\n        if\
    \ val < min {\n            min = val\n        }\n        if val > max {\n    \
    \        max = val\n        }\n    }\n    result := make([]int, len(lst))\n  \
    \  for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            result[i]\
    \ = min\n        } else {\n            result[i] = max\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpqwesbn_z_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpqwesbn_z_test.go:49\
    \ +0x427\ntesting.tRunner(0xc0001124e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // Initialize min and max values\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst {\n        if v < min {\n            min = v\n      \
    \  }\n        if v > max {\n            max = v\n        }\n    }\n\n    // Initialize\
    \ new list\n    result := make([]int, len(lst))\n\n    // Sort list by comparing\
    \ min and max\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n\
    \            result[i] = min\n        } else {\n            result[i] = max\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp6v9ak226_test.go:17\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp6v9ak226_test.go:55\
    \ +0x427\ntesting.tRunner(0xc000103520, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            result[i] = min\n        } else {\n   \
    \         result[i] = max\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpj1wkjboe_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpj1wkjboe_test.go:64: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpj1wkjboe_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpj1wkjboe_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpj1wkjboe_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpj1wkjboe_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprr_d73zf_test.go:16:5: undefined: sort

    /tmp/tmprr_d73zf_test.go:16:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := range\
    \ lst {\n        result[i] = min + max\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpc_j3qsal_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpc_j3qsal_test.go:45\
    \ +0x3d1\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] > max {\n            result[i] = max\n\
    \            max = lst[i]\n        } else if lst[i] < min {\n            result[i]\
    \ = min\n            min = lst[i]\n        } else {\n            result[i] = lst[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpkwul7arq_test.go:16 +0xcf\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpkwul7arq_test.go:53 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074707
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    min += 1\n    max -= 1\n    result := []int{}\n \
    \   for i := 0; i < len(lst); i++ {\n        if min <= lst[i] && lst[i] <= max\
    \ {\n            result = append(result, lst[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpmexiecyp_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpmexiecyp_test.go:49\
    \ +0x665\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074702
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  n := len(lst)\n    if n == 0 {\n        return lst\n    }\n    min := lst[0]\n\
    \    max := lst[n-1]\n    i := 0\n    for i < n {\n        if lst[i] > max {\n\
    \            max = lst[i]\n        }\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        i++\n    }\n    lst = append([]int{min}, lst...)\n\
    \    lst = append(lst, max)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp7ezsdtdm_test.go:58: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp7ezsdtdm_test.go:58:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp7ezsdtdm_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp7ezsdtdm_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)\
    \ %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp7ezsdtdm_test.go:58: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp7ezsdtdm_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp7ezsdtdm_test.go:58: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp7ezsdtdm_test.go:58: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar"
  timestamp: 1660074707
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprr_d73zf_test.go:16:5: undefined: sort

    /tmp/tmprr_d73zf_test.go:16:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074703
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    min += 1\n    max -= 1\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n\
    \            result[i] = min\n        } else {\n            result[i] = max\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpe2ql2hic_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpe2ql2hic_test.go:51\
    \ +0x447\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074707
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, val := range lst {\n        if val < min {\n            min\
    \ = val\n        }\n        if val > max {\n            max = val\n        }\n\
    \    }\n    lst = append([]int{min, max}, lst...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074712
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min}, lst...)\n    lst = append([]int{max}, lst...)\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpinqaro53_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, val := range lst {\n        if\
    \ val < min {\n            min = val\n        }\n        if val > max {\n    \
    \        max = val\n        }\n    }\n    result := make([]int, len(lst))\n  \
    \  for i := 0; i < len(lst); i++ {\n        result[i] = min\n        if i+1 <\
    \ len(lst) {\n            result[i+1] = max\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpq790g_ww_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpq790g_ww_test.go:48\
    \ +0x40d\ntesting.tRunner(0xc00019aea0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = min + max*(i+1)\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpd2ey3mm0_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpd2ey3mm0_test.go:45\
    \ +0x41d\ntesting.tRunner(0xc000103380, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append([]int{min}, lst...)\n    lst = append([]int{max}, lst...)\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpinqaro53_test.go:17:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] > max {\n            lst[i] = max\n \
    \       }\n        if lst[i] < min {\n            lst[i] = min\n        }\n  \
    \      result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001c6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001c6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f0bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmp885nuovc_test.go:16 +0xcf\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp885nuovc_test.go:51 +0x2ee\ntesting.tRunner(0xc000185040, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    min += 1\n    max -= 1\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = min + (max\
    \ - min) * (i/len(lst))\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpmecrw502_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpmecrw502_test.go:47\
    \ +0x4b1\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074708
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    min += 1\n    max -= 1\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        if min <= lst[i] &&\
    \ lst[i] <= max {\n            result[i] = lst[i]\n        } else {\n        \
    \    result[i] = min\n            min = lst[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001c6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001c6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f0bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpj41gy4w9_test.go:16 +0xcc\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpj41gy4w9_test.go:52 +0x2ee\ntesting.tRunner(0xc000184ea0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074708
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    min += 1\n    max -= 1\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        if min <= lst[i] &&\
    \ lst[i] <= max {\n            result[i] = lst[i]\n        } else {\n        \
    \    result[i] = min\n            min = lst[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001c6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001c6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f0bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpj41gy4w9_test.go:16 +0xcc\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpj41gy4w9_test.go:52 +0x2ee\ntesting.tRunner(0xc000184ea0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074708
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] > max {\n            result[i] = max\n\
    \            max = lst[i]\n        } else {\n            result[i] = min\n   \
    \         min = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpw1s15d7__test.go:16 +0xc5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpw1s15d7__test.go:51 +0x2ee\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074708
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = min + int(float64(i)/float64(len(lst))*(max-min))\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbtn3z6ar_test.go:28:31: invalid operation: float64(i) / float64(len(lst))
    * (max - min) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := []int{}\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, min)\n        }\n\
    \        if v == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpb4x9tw1__test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpb4x9tw1__test.go:50\
    \ +0x818\ntesting.tRunner(0xc0001a0340, 0x528d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpa6wqol39_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpa6wqol39_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpah2bwa_d_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] > max {\n            lst[i], lst[len(lst)-i-1]\
    \ = lst[len(lst)-i-1], lst[i]\n        }\n        if lst[i] < min {\n        \
    \    lst[i], lst[len(lst)-i-1] = lst[len(lst)-i-1], lst[i]\n        }\n      \
    \  result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmphn6uk0ot_test.go:16 +0x11e\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmphn6uk0ot_test.go:51 +0x2ee\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074705
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, val := range lst {\n        if\
    \ val < min {\n            min = val\n        }\n        if val > max {\n    \
    \        max = val\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp0fcnr2ug_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp0fcnr2ug_test.go:42\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074708
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := []int{}\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range result {\n        result = append(result, v)\n    }\n \
    \   return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmptb6d0yca_test.go:16\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmptb6d0yca_test.go:53\
    \ +0xb25\ntesting.tRunner(0xc000103520, 0x528d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074705
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            result[i] = min\n        } else {\n   \
    \         result[i] = max\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpj1wkjboe_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpj1wkjboe_test.go:64: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpj1wkjboe_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpj1wkjboe_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpj1wkjboe_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpj1wkjboe_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
