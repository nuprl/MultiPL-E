language: go_test.go
name: HumanEval_142_sum_squares
results:
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, value := range lst {\n        if value%3 != 0 {\n            sum += value\
    \ * value\n        }\n        if value%4 != 0 {\n            sum += value * value\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%3 == 0 && i%4 == 0 {\n           \
    \ sum += lst[i]\n        } else if i%3 == 0 {\n            sum += lst[i]*lst[i]\n\
    \        } else if i%4 == 0 {\n            sum += lst[i]*lst[i]*lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpaui7e31e_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpaui7e31e_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpaui7e31e_test.go:53: expected '%!s(int=9)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpaui7e31e_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpaui7e31e_test.go:53: expected '%!s(int=-126)', got '%!s(int=-125)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpaui7e31e_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-64)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpaui7e31e_test.go:53: expected '%!s(int=0)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpaui7e31e_test.go:53:\
    \ expected '%!s(int=-14196)', got '%!s(int=-15290)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpaui7e31e_test.go:53: expected '%!s(int=-1448)', got '%!s(int=-1755)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpp48rnjl1_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpp48rnjl1_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpp48rnjl1_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpp48rnjl1_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpp48rnjl1_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpp48rnjl1_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpp48rnjl1_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpp48rnjl1_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpp48rnjl1_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, value := range lst {\n        if value%3 != 0 {\n            sum += value\
    \ * value\n        }\n        if value%4 != 0 {\n            sum += value * value\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n\
    \        if v%4 == 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpi0clrysd_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpi0clrysd_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpi0clrysd_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpi0clrysd_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpi0clrysd_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpi0clrysd_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpi0clrysd_test.go:52: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpi0clrysd_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n          \
    \  sum += v*v\n        }\n        if v%4 == 0 {\n            sum += v*v*v\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpro77qdj3_test.go:53: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpro77qdj3_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpro77qdj3_test.go:53: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpro77qdj3_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpro77qdj3_test.go:53: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpro77qdj3_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpro77qdj3_test.go:53: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpro77qdj3_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ i := range lst {\n        if i%3 != 0 {\n            sum += i * i\n        }\n\
    \        if i%4 != 0 {\n            sum += i * i * i\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7xwrsylv_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7xwrsylv_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7xwrsylv_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7xwrsylv_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7xwrsylv_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7xwrsylv_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp7xwrsylv_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7xwrsylv_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%3 == 0 && i%4 == 0 {\n           \
    \ sum += lst[i]\n        } else if i%3 == 0 {\n            sum += lst[i]*lst[i]\n\
    \        } else if i%4 == 0 {\n            sum += lst[i]*lst[i]*lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpaui7e31e_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpaui7e31e_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpaui7e31e_test.go:53: expected '%!s(int=9)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpaui7e31e_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpaui7e31e_test.go:53: expected '%!s(int=-126)', got '%!s(int=-125)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpaui7e31e_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-64)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpaui7e31e_test.go:53: expected '%!s(int=0)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpaui7e31e_test.go:53:\
    \ expected '%!s(int=-14196)', got '%!s(int=-15290)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpaui7e31e_test.go:53: expected '%!s(int=-1448)', got '%!s(int=-1755)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, value := range lst {\n        if value%3 != 0 {\n            sum += value\
    \ * value\n        }\n        if value%4 != 0 {\n            sum += value * value\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n          \
    \  sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ value := range lst {\n        if value%3 != 0 {\n            sum += value *\
    \ value\n        }\n        if value%4 != 0 {\n            sum += value * value\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n          \
    \  sum += i*i\n        }\n        if i%4 != 0 {\n            sum += i*i*i\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp9u20po99_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp9u20po99_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp9u20po99_test.go:50: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp9u20po99_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp9u20po99_test.go:50: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp9u20po99_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp9u20po99_test.go:50: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp9u20po99_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n          \
    \  sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Your code here\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n           \
    \ sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n   \
    \     }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpidlnun9z_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpidlnun9z_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpidlnun9z_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpidlnun9z_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpidlnun9z_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpidlnun9z_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpidlnun9z_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpidlnun9z_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, value := range lst {\n        if value%3 != 0 {\n            sum += value\
    \ * value\n        }\n        if value%4 != 0 {\n            sum += value * value\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4zubhkry_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4zubhkry_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4zubhkry_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4zubhkry_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4zubhkry_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4zubhkry_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4zubhkry_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4zubhkry_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 && i%4\
    \ == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp757997ie_test.go:50: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp757997ie_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp757997ie_test.go:50: expected '%!s(int=9)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp757997ie_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp757997ie_test.go:50: expected '%!s(int=-126)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp757997ie_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-56)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp757997ie_test.go:50: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp757997ie_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp757997ie_test.go:50: expected '%!s(int=-1448)', got '%!s(int=-15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n\
    \        if v%4 == 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpi0clrysd_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpi0clrysd_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpi0clrysd_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpi0clrysd_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpi0clrysd_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpi0clrysd_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpi0clrysd_test.go:52: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpi0clrysd_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpo8f2fkgc_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpo8f2fkgc_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpo8f2fkgc_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpo8f2fkgc_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpo8f2fkgc_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpo8f2fkgc_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpo8f2fkgc_test.go:52: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpo8f2fkgc_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n          \
    \  sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    var sum = 0\n    for _, val := range lst {\n        if val%3 != 0 {\n   \
    \         sum += val*val\n        }\n        if val%4 != 0 {\n            sum\
    \ += val*val*val\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpec_nwhbo_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpec_nwhbo_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpec_nwhbo_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpec_nwhbo_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpec_nwhbo_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpec_nwhbo_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpec_nwhbo_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpec_nwhbo_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, value := range lst {\n        if value%3 != 0 {\n            sum += value\
    \ * value\n        }\n        if value%4 != 0 {\n            sum += value * value\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, entry := range lst {\n        if entry % 3 == 0 {\n            entry\
    \ *= entry\n            sum += entry\n        } else if entry % 4 == 0 {\n   \
    \         entry *= entry\n            sum += entry\n        } else {\n       \
    \     sum += entry\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpqgd93ovc_test.go:55: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqgd93ovc_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpqgd93ovc_test.go:55: expected '%!s(int=-3)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqgd93ovc_test.go:55:\
    \ expected '%!s(int=-126)', got '%!s(int=-10)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqgd93ovc_test.go:55: expected '%!s(int=3030)', got '%!s(int=12936)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqgd93ovc_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpqgd93ovc_test.go:55: expected '%!s(int=-14196)', got '%!s(int=5584)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqgd93ovc_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=998)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n          \
    \  sum += i*i\n        }\n        if i%4 != 0 {\n            sum += i*i*i\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, value := range lst {\n        if value%3 != 0 {\n            sum += value\
    \ * value\n        }\n        if value%4 != 0 {\n            sum += value * value\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, val := range lst {\n        if val%3 != 0 {\n      \
    \      sum += val*val\n        }\n        if val%4 != 0 {\n            sum +=\
    \ val*val*val\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp834ys0dp_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp834ys0dp_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp834ys0dp_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp834ys0dp_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp834ys0dp_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp834ys0dp_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp834ys0dp_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp834ys0dp_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n  \
    \      }\n        if val%4 != 0 {\n            sum += val*val\n        }\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpu0i4d3vl_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpu0i4d3vl_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpu0i4d3vl_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpu0i4d3vl_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpu0i4d3vl_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpu0i4d3vl_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpu0i4d3vl_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpu0i4d3vl_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpu0i4d3vl_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ value := range lst {\n        if value%3 != 0 {\n            sum += value *\
    \ value\n        }\n        if value%4 != 0 {\n            sum += value * value\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ i := range lst {\n        if i%3 != 0 {\n            sum += i * i\n        }\n\
    \        if i%4 != 0 {\n            sum += i * i\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpxjw2f46u_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpxjw2f46u_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxjw2f46u_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpxjw2f46u_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpxjw2f46u_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxjw2f46u_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpxjw2f46u_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpxjw2f46u_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpxjw2f46u_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n  \
    \      }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpvh0o_s2s_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpvh0o_s2s_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpvh0o_s2s_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpvh0o_s2s_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpvh0o_s2s_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpvh0o_s2s_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpvh0o_s2s_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpvh0o_s2s_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, value := range lst {\n        if value%3 != 0 {\n  \
    \          sum += value * value\n        }\n        if value%4 != 0 {\n      \
    \      sum += value * value\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ value := range lst {\n        if value%3 != 0 {\n            sum += value *\
    \ value\n        }\n        if value%4 != 0 {\n            sum += value * value\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp50gldhz1_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp50gldhz1_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Your code here\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n           \
    \ sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n   \
    \     }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpidlnun9z_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpidlnun9z_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpidlnun9z_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpidlnun9z_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpidlnun9z_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpidlnun9z_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpidlnun9z_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpidlnun9z_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, entry := range lst {\n        if entry % 3 == 0 && entry % 4 == 0 {\n\
    \            sum += entry\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpqy09486o_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqy09486o_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqy09486o_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqy09486o_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpqy09486o_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqy09486o_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpqy09486o_test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqy09486o_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, value := range lst {\n        if value%3 != 0 {\n  \
    \          sum += value * value\n        }\n        if value%4 != 0 {\n      \
    \      sum += value * value\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 == 0 {\n            sum += v*v\n        }\n    }\n   \
    \ return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpfkjqul16_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpfkjqul16_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpfkjqul16_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpfkjqul16_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpfkjqul16_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpfkjqul16_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpfkjqul16_test.go:52: expected '%!s(int=-14196)', got '%!s(int=8225)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpfkjqul16_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=1086)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpplwbjej__test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpplwbjej__test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpplwbjej__test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpplwbjej__test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpplwbjej__test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpplwbjej__test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpplwbjej__test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpplwbjej__test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, value := range lst {\n        if value%3 != 0 {\n            sum += value\
    \ * value\n        }\n        if value%4 != 0 {\n            sum += value * value\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqegyyz_m_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpqegyyz_m_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp0fzjmzur_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp0fzjmzur_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 && i%4\
    \ == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp757997ie_test.go:50: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp757997ie_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp757997ie_test.go:50: expected '%!s(int=9)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp757997ie_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp757997ie_test.go:50: expected '%!s(int=-126)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp757997ie_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-56)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp757997ie_test.go:50: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp757997ie_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp757997ie_test.go:50: expected '%!s(int=-1448)', got '%!s(int=-15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum_squares := 0\n    for _, value := range lst {\n        if value%3 !=\
    \ 0 {\n            sum_squares += value * value\n        }\n        if value%4\
    \ != 0 {\n            sum_squares += value * value * value\n        }\n    }\n\
    \    return sum_squares\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp1uumc6xk_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp1uumc6xk_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp1uumc6xk_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp1uumc6xk_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp1uumc6xk_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp1uumc6xk_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp1uumc6xk_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp1uumc6xk_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ entry := range lst {\n        if entry%3 != 0 {\n            entry *= entry\n\
    \            sum += entry\n        }\n        if entry%4 != 0 {\n            entry\
    \ *= entry\n            sum += entry\n        }\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpouo_duuz_test.go:54: expected '%!s(int=6)', got '%!s(int=15)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpouo_duuz_test.go:54:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpouo_duuz_test.go:54: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpouo_duuz_test.go:54:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpouo_duuz_test.go:54: expected '%!s(int=-126)', got '%!s(int=1308)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpouo_duuz_test.go:54:\
    \ expected '%!s(int=3030)', got '%!s(int=12943)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpouo_duuz_test.go:54: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpouo_duuz_test.go:54:\
    \ expected '%!s(int=-14196)', got '%!s(int=3772739)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpouo_duuz_test.go:54: expected '%!s(int=-1448)', got '%!s(int=158370)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ _, val := range lst {\n        if val%3 != 0 {\n            sum+=val*val\n \
    \       }\n        if val%4 != 0 {\n            sum+=val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp3qsq2erv_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp3qsq2erv_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3qsq2erv_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp3qsq2erv_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp3qsq2erv_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp3qsq2erv_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp3qsq2erv_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp3qsq2erv_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, value := range lst {\n        if value%3 != 0 {\n            sum += value\
    \ * value\n        }\n        if value%4 != 0 {\n            sum += value * value\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiict3wcy_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiict3wcy_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, value := range lst {\n        if value%3 != 0 {\n  \
    \          sum += value * value\n        }\n        if value%4 != 0 {\n      \
    \      sum += value * value\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, value := range lst {\n        if value%3 != 0 {\n  \
    \          sum += value * value\n        }\n        if value%4 != 0 {\n      \
    \      sum += value * value\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp00udb2n7_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp00udb2n7_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp00udb2n7_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp00udb2n7_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp00udb2n7_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp00udb2n7_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp00udb2n7_test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp00udb2n7_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, entry := range lst {\n        if entry%3 != 0 {\n            sum += entry*entry\n\
    \        }\n        if entry%4 != 0 {\n            sum += entry*entry*entry\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpldirp916_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpldirp916_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpldirp916_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpldirp916_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpldirp916_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpldirp916_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpldirp916_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpldirp916_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ entry := range lst {\n        if entry%3 != 0 {\n            entry *= entry\n\
    \            sum += entry\n        }\n        if entry%4 != 0 {\n            entry\
    \ *= entry\n            sum += entry\n        }\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpouo_duuz_test.go:54: expected '%!s(int=6)', got '%!s(int=15)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpouo_duuz_test.go:54:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpouo_duuz_test.go:54: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpouo_duuz_test.go:54:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpouo_duuz_test.go:54: expected '%!s(int=-126)', got '%!s(int=1308)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpouo_duuz_test.go:54:\
    \ expected '%!s(int=3030)', got '%!s(int=12943)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpouo_duuz_test.go:54: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpouo_duuz_test.go:54:\
    \ expected '%!s(int=-14196)', got '%!s(int=3772739)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpouo_duuz_test.go:54: expected '%!s(int=-1448)', got '%!s(int=158370)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n          \
    \  sum += i*i\n        }\n        if i%4 != 0 {\n            sum += i*i*i\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpzjk2zwdp_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzjk2zwdp_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, value := range lst {\n        if value%3 != 0 {\n            sum += value\
    \ * value\n        }\n        if value%4 != 0 {\n            sum += value * value\
    \ * value\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpunh8g9t2_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpunh8g9t2_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpunh8g9t2_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpunh8g9t2_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpunh8g9t2_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpunh8g9t2_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpunh8g9t2_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpunh8g9t2_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp_vbw_pgi_test.go:52: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp_vbw_pgi_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp_vbw_pgi_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp_vbw_pgi_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp_vbw_pgi_test.go:52: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp_vbw_pgi_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp_vbw_pgi_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp_vbw_pgi_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp_vbw_pgi_test.go:52: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, val := range lst {\n        if val%3 != 0 {\n            sum += val*val\n\
    \        }\n        if val%4 != 0 {\n            sum += val*val*val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpg8e0ny3s_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpg8e0ny3s_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n          \
    \  sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum_squares := 0\n    for _, value := range lst {\n        if value%3 !=\
    \ 0 {\n            sum_squares += value * value\n        }\n        if value%4\
    \ != 0 {\n            sum_squares += value * value * value\n        }\n    }\n\
    \    return sum_squares\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp1uumc6xk_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp1uumc6xk_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp1uumc6xk_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp1uumc6xk_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp1uumc6xk_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp1uumc6xk_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp1uumc6xk_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp1uumc6xk_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, value := range lst {\n        if value%3 != 0 {\n  \
    \          sum += value * value\n        }\n        if value%4 != 0 {\n      \
    \      sum += value * value\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpsrv5tsy6_test.go:53:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpsrv5tsy6_test.go:53: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum_squares := 0\n  \
    \  for _, value := range lst {\n        if value%3 != 0 {\n            sum_squares\
    \ += value * value\n        }\n        if value%4 != 0 {\n            sum_squares\
    \ += value * value * value\n        }\n    }\n    return sum_squares\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpko0dr40l_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpko0dr40l_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpko0dr40l_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpko0dr40l_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpko0dr40l_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpko0dr40l_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpko0dr40l_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpko0dr40l_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpui192gsk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpui192gsk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpplwbjej__test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpplwbjej__test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpplwbjej__test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpplwbjej__test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpplwbjej__test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpplwbjej__test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpplwbjej__test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpplwbjej__test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n          \
    \  sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp7bv30yz7_test.go:53: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7bv30yz7_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    // Write your code here\n\
    \    var sum = 0\n    for i := 0; i < len(lst); i++ {\n        if i%3 != 0 {\n\
    \            sum += lst[i]*lst[i]\n        }\n        if i%4 != 0 {\n        \
    \    sum += lst[i]*lst[i]\n        }\n        if i%3 != 0 && i%4 != 0 {\n    \
    \        sum += lst[i]*lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp195gyj_e_test.go:56: expected '%!s(int=6)', got '%!s(int=39)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp195gyj_e_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=291)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp195gyj_e_test.go:56: expected '%!s(int=9)', got '%!s(int=16)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp195gyj_e_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=16)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp195gyj_e_test.go:56: expected '%!s(int=-126)', got '%!s(int=113)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp195gyj_e_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=29410)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp195gyj_e_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp195gyj_e_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=17412)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp195gyj_e_test.go:56: expected '%!s(int=-1448)', got '%!s(int=5295)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpmm0noehj_test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmm0noehj_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp00udb2n7_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp00udb2n7_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp00udb2n7_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp00udb2n7_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp00udb2n7_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp00udb2n7_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp00udb2n7_test.go:49: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp00udb2n7_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n        }\n\
    \        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp4w74808i_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4w74808i_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, value := range lst {\n        if value%3 != 0 {\n            sum += value\
    \ * value\n        }\n        if value%4 != 0 {\n            sum += value * value\
    \ * value\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpunh8g9t2_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpunh8g9t2_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpunh8g9t2_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpunh8g9t2_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpunh8g9t2_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpunh8g9t2_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpunh8g9t2_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpunh8g9t2_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ _, entry := range lst {\n        if entry % 3 == 0 && entry % 4 == 0 {\n   \
    \         sum += entry\n        } else if entry % 3 == 0 {\n            sum +=\
    \ entry * entry\n        } else if entry % 4 == 0 {\n            sum += entry\
    \ * entry * entry\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmppwslg7kb_test.go:53: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmppwslg7kb_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmppwslg7kb_test.go:53: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmppwslg7kb_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmppwslg7kb_test.go:53: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmppwslg7kb_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmppwslg7kb_test.go:53: expected '%!s(int=-14196)', got '%!s(int=-67995)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmppwslg7kb_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=8514)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n   \
    \ for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n   \
    \     }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeahznvdk_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeahznvdk_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpo8f2fkgc_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpo8f2fkgc_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpo8f2fkgc_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpo8f2fkgc_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpo8f2fkgc_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpo8f2fkgc_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpo8f2fkgc_test.go:52: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpo8f2fkgc_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n       \
    \ }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpdcgn39r8_test.go:52: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdcgn39r8_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
