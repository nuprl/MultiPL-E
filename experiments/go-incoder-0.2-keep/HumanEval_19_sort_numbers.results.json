{
  "language": "go_test.go",
  "name": "HumanEval_19_sort_numbers",
  "results": [
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n    numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpem5ax438_test.go:14:13: no new variables on left side of :=\n/tmp/tmpem5ax438_test.go:14:16: undefined: strings\n/tmp/tmpem5ax438_test.go:15:13: no new variables on left side of :=\n/tmp/tmpem5ax438_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmpem5ax438_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpem5ax438_test.go:19:5: undefined: sort\n/tmp/tmpem5ax438_test.go:20:13: no new variables on left side of :=\n/tmp/tmpem5ax438_test.go:20:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjl941o84_test.go:14:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:14:16: undefined: strings\n/tmp/tmpjl941o84_test.go:15:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:15:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpjl941o84_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpjl941o84_test.go:19:5: undefined: sort\n/tmp/tmpjl941o84_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = fmt.Sprintf(\"%v\", i)\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0145uss_test.go:14:13: no new variables on left side of :=\n/tmp/tmpm0145uss_test.go:14:16: undefined: strings\n/tmp/tmpm0145uss_test.go:15:13: no new variables on left side of :=\n/tmp/tmpm0145uss_test.go:15:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpm0145uss_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpm0145uss_test.go:19:5: undefined: sort\n/tmp/tmpm0145uss_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpasee_e18_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpt53jmupj_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt03l2arr_test.go:14:13: no new variables on left side of :=\n/tmp/tmpt03l2arr_test.go:14:16: undefined: strings\n/tmp/tmpt03l2arr_test.go:15:13: no new variables on left side of :=\n/tmp/tmpt03l2arr_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmpt03l2arr_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpt03l2arr_test.go:19:5: undefined: sort\n/tmp/tmpt03l2arr_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmptzk0wluq_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt03l2arr_test.go:14:13: no new variables on left side of :=\n/tmp/tmpt03l2arr_test.go:14:16: undefined: strings\n/tmp/tmpt03l2arr_test.go:15:13: no new variables on left side of :=\n/tmp/tmpt03l2arr_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmpt03l2arr_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpt03l2arr_test.go:19:5: undefined: sort\n/tmp/tmpt03l2arr_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1snthf1b_test.go:14:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:14:16: undefined: strings\n/tmp/tmp1snthf1b_test.go:15:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmp1snthf1b_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmp1snthf1b_test.go:19:5: undefined: sort\n/tmp/tmp1snthf1b_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := append(numbers, \"\")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqg0i_mlz_test.go:14:13: no new variables on left side of :=\n/tmp/tmpqg0i_mlz_test.go:14:16: undefined: strings\n/tmp/tmpqg0i_mlz_test.go:15:13: no new variables on left side of :=\n/tmp/tmpqg0i_mlz_test.go:15:23: first argument to append must be a slice; have numbers (variable of type string)\n/tmp/tmpqg0i_mlz_test.go:16:5: undefined: sort\n/tmp/tmpqg0i_mlz_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpjfwqxoym_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \", -1)\n    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n    numbers := strings.Replace(numbers, \" \", \" \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp5_l3_nfj_test.go:50:46: string literal not terminated\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \"0\")\n    numbers := strings.Trim(numbers, \"1\")\n    numbers := strings.Trim(numbers, \"2\")\n    numbers := strings.Trim(numbers, \"3\")\n    numbers := strings.Trim(numbers, \"4\")\n    numbers := strings.Trim(numbers, \"5\")\n    numbers := strings.Trim(numbers, \"6\")\n    numbers := strings.Trim(numbers, \"7\")\n    numbers := strings.Trim(numbers, \"8\")\n    numbers := strings.Trim(numbers, \"9\")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Tri\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpl0b5t_lr_test.go:65:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers {\n        numbers[i] = numbers[i][:1]\n    }\n    sort.Strings(numbers)\n    numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn42ta5hz_test.go:14:13: no new variables on left side of :=\n/tmp/tmpn42ta5hz_test.go:14:16: undefined: strings\n/tmp/tmpn42ta5hz_test.go:15:13: no new variables on left side of :=\n/tmp/tmpn42ta5hz_test.go:15:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpn42ta5hz_test.go:17:22: invalid operation: cannot slice numbers[i] (value of type byte)\n/tmp/tmpn42ta5hz_test.go:19:5: undefined: sort\n/tmp/tmpn42ta5hz_test.go:20:13: no new variables on left side of :=\n/tmp/tmpn42ta5hz_test.go:20:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpag0slhrg_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpwespm1e__test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpt53jmupj_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers {\n        numbers[i] = numbers[i] + strings.ToLower(fmt.Sprintf(\"%c\", i))\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxray4kcz_test.go:14:13: no new variables on left side of :=\n/tmp/tmpxray4kcz_test.go:14:16: undefined: strings\n/tmp/tmpxray4kcz_test.go:15:13: no new variables on left side of :=\n/tmp/tmpxray4kcz_test.go:15:16: undefined: strings\n/tmp/tmpxray4kcz_test.go:16:13: no new variables on left side of :=\n/tmp/tmpxray4kcz_test.go:16:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpxray4kcz_test.go:18:35: undefined: strings\n/tmp/tmpxray4kcz_test.go:20:5: undefined: sort\n/tmp/tmpxray4kcz_test.go:21:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpag0slhrg_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjl941o84_test.go:14:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:14:16: undefined: strings\n/tmp/tmpjl941o84_test.go:15:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:15:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpjl941o84_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpjl941o84_test.go:19:5: undefined: sort\n/tmp/tmpjl941o84_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp63vpeqxj_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers, \".\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpwo85vkbl_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpkypzmwsj_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers {\n        numbers[i] = fmt.Sprintf(\"%v\", i)\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc9ru0x1n_test.go:14:13: no new variables on left side of :=\n/tmp/tmpc9ru0x1n_test.go:14:16: undefined: strings\n/tmp/tmpc9ru0x1n_test.go:15:13: no new variables on left side of :=\n/tmp/tmpc9ru0x1n_test.go:15:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpc9ru0x1n_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpc9ru0x1n_test.go:19:5: undefined: sort\n/tmp/tmpc9ru0x1n_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0rc5vkx7_test.go:14:13: no new variables on left side of :=\n/tmp/tmp0rc5vkx7_test.go:14:16: undefined: strings\n/tmp/tmp0rc5vkx7_test.go:15:13: no new variables on left side of :=\n/tmp/tmp0rc5vkx7_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp0rc5vkx7_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers, \"9\")\n    numbers = strings.TrimPrefix(numbers, \"0\")\n    numbers = strings.TrimPrefix(numbers, \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpr993mpv9_test.go:57:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplh3zz0db_test.go:14:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:14:16: undefined: strings\n/tmp/tmplh3zz0db_test.go:15:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:15:16: undefined: strings\n/tmp/tmplh3zz0db_test.go:16:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmplh3zz0db_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpjfwqxoym_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt03l2arr_test.go:14:13: no new variables on left side of :=\n/tmp/tmpt03l2arr_test.go:14:16: undefined: strings\n/tmp/tmpt03l2arr_test.go:15:13: no new variables on left side of :=\n/tmp/tmpt03l2arr_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmpt03l2arr_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpt03l2arr_test.go:19:5: undefined: sort\n/tmp/tmpt03l2arr_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpv026ct4l_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp63vpeqxj_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpag0slhrg_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n\n    sort.Strings(numbers)\n\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpba54e423_test.go:14:13: no new variables on left side of :=\n/tmp/tmpba54e423_test.go:14:16: undefined: strings\n/tmp/tmpba54e423_test.go:15:13: no new variables on left side of :=\n/tmp/tmpba54e423_test.go:15:23: first argument to append must be a slice; have numbers (variable of type string)\n/tmp/tmpba54e423_test.go:16:13: no new variables on left side of :=\n/tmp/tmpba54e423_test.go:16:23: first argument to append must be a slice; have numbers (variable of type string)\n/tmp/tmpba54e423_test.go:17:13: no new variables on left side of :=\n/tmp/tmpba54e423_test.go:17:23: first argument to append must be a slice; have numbers (variable of type string)\n/tmp/tmpba54e423_test.go:18:13: no new variables on left side of :=\n/tmp/tmpba54e423_test.go:18:23: first argument to append must be a slice; have numbers (variable of type string)\n/tmp/tmpba54e423_test.go:18:13: too many errors\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpt53jmupj_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpjfwqxoym_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i, v := range numbers {\n        numbers[i] = int(v)\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2mv7uefv_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2mv7uefv_test.go:14:16: undefined: strings\n/tmp/tmp2mv7uefv_test.go:15:13: no new variables on left side of :=\n/tmp/tmp2mv7uefv_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmp2mv7uefv_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmp2mv7uefv_test.go:19:5: undefined: sort\n/tmp/tmp2mv7uefv_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv5jmcr4c_test.go:14:15: undefined: strings\n/tmp/tmpv5jmcr4c_test.go:15:13: no new variables on left side of :=\n/tmp/tmpv5jmcr4c_test.go:15:16: undefined: strings\n/tmp/tmpv5jmcr4c_test.go:16:13: no new variables on left side of :=\n/tmp/tmpv5jmcr4c_test.go:16:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpv5jmcr4c_test.go:18:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpv5jmcr4c_test.go:20:5: undefined: sort\n/tmp/tmpv5jmcr4c_test.go:21:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := append(numbers, numbers...)\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpprrke_c9_test.go:14:13: no new variables on left side of :=\n/tmp/tmpprrke_c9_test.go:14:16: undefined: strings\n/tmp/tmpprrke_c9_test.go:15:13: no new variables on left side of :=\n/tmp/tmpprrke_c9_test.go:15:23: first argument to append must be a slice; have numbers (variable of type string)\n/tmp/tmpprrke_c9_test.go:16:5: undefined: sort\n/tmp/tmpprrke_c9_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers, \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp2ag_0h1i_test.go:57:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp63vpeqxj_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplh3zz0db_test.go:14:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:14:16: undefined: strings\n/tmp/tmplh3zz0db_test.go:15:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:15:16: undefined: strings\n/tmp/tmplh3zz0db_test.go:16:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmplh3zz0db_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpkypzmwsj_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := append([]string{\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"}, numbers...)\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9wqvezra_test.go:14:13: no new variables on left side of :=\n/tmp/tmp9wqvezra_test.go:14:16: undefined: strings\n/tmp/tmp9wqvezra_test.go:15:13: no new variables on left side of :=\n/tmp/tmp9wqvezra_test.go:15:16: cannot use append([]string{\u2026}, numbers...) (value of type []string) as type string in assignment\n/tmp/tmp9wqvezra_test.go:15:113: cannot use numbers (variable of type string) as type []string in argument to append\n/tmp/tmp9wqvezra_test.go:16:5: undefined: sort\n/tmp/tmp9wqvezra_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1snthf1b_test.go:14:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:14:16: undefined: strings\n/tmp/tmp1snthf1b_test.go:15:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmp1snthf1b_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmp1snthf1b_test.go:19:5: undefined: sort\n/tmp/tmp1snthf1b_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp67smtcsu_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjl941o84_test.go:14:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:14:16: undefined: strings\n/tmp/tmpjl941o84_test.go:15:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:15:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpjl941o84_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpjl941o84_test.go:19:5: undefined: sort\n/tmp/tmpjl941o84_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpv026ct4l_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeynabmy2_test.go:14:13: no new variables on left side of :=\n/tmp/tmpeynabmy2_test.go:14:16: undefined: strings\n/tmp/tmpeynabmy2_test.go:15:13: no new variables on left side of :=\n/tmp/tmpeynabmy2_test.go:15:16: undefined: strings\n/tmp/tmpeynabmy2_test.go:16:13: no new variables on left side of :=\n/tmp/tmpeynabmy2_test.go:16:16: undefined: strings\n/tmp/tmpeynabmy2_test.go:17:13: no new variables on left side of :=\n/tmp/tmpeynabmy2_test.go:17:16: undefined: sort_numbers_test\n/tmp/tmpeynabmy2_test.go:18:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpv026ct4l_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp63vpeqxj_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjl941o84_test.go:14:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:14:16: undefined: strings\n/tmp/tmpjl941o84_test.go:15:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:15:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpjl941o84_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpjl941o84_test.go:19:5: undefined: sort\n/tmp/tmpjl941o84_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpi40jkd0n_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp5iv6xvtl_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpag0slhrg_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgnv60s4_test.go:14:15: undefined: strings\n/tmp/tmpsgnv60s4_test.go:15:13: no new variables on left side of :=\n/tmp/tmpsgnv60s4_test.go:15:16: undefined: strings\n/tmp/tmpsgnv60s4_test.go:16:5: undefined: sort\n/tmp/tmpsgnv60s4_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1snthf1b_test.go:14:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:14:16: undefined: strings\n/tmp/tmp1snthf1b_test.go:15:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmp1snthf1b_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmp1snthf1b_test.go:19:5: undefined: sort\n/tmp/tmp1snthf1b_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpag0slhrg_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1snthf1b_test.go:14:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:14:16: undefined: strings\n/tmp/tmp1snthf1b_test.go:15:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmp1snthf1b_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmp1snthf1b_test.go:19:5: undefined: sort\n/tmp/tmp1snthf1b_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp63vpeqxj_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpc6ki0mmk_test.go:56:40: missing ',' before newline in argument list\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp934928cp_test.go:68:29: missing ',' before newline in argument list\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgnv60s4_test.go:14:15: undefined: strings\n/tmp/tmpsgnv60s4_test.go:15:13: no new variables on left side of :=\n/tmp/tmpsgnv60s4_test.go:15:16: undefined: strings\n/tmp/tmpsgnv60s4_test.go:16:5: undefined: sort\n/tmp/tmpsgnv60s4_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpt53jmupj_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjl941o84_test.go:14:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:14:16: undefined: strings\n/tmp/tmpjl941o84_test.go:15:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:15:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpjl941o84_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpjl941o84_test.go:19:5: undefined: sort\n/tmp/tmpjl941o84_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1snthf1b_test.go:14:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:14:16: undefined: strings\n/tmp/tmp1snthf1b_test.go:15:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmp1snthf1b_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmp1snthf1b_test.go:19:5: undefined: sort\n/tmp/tmp1snthf1b_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpv026ct4l_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt03l2arr_test.go:14:13: no new variables on left side of :=\n/tmp/tmpt03l2arr_test.go:14:16: undefined: strings\n/tmp/tmpt03l2arr_test.go:15:13: no new variables on left side of :=\n/tmp/tmpt03l2arr_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmpt03l2arr_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpt03l2arr_test.go:19:5: undefined: sort\n/tmp/tmpt03l2arr_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp5iv6xvtl_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := append(numbers, numbers...)\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpprrke_c9_test.go:14:13: no new variables on left side of :=\n/tmp/tmpprrke_c9_test.go:14:16: undefined: strings\n/tmp/tmpprrke_c9_test.go:15:13: no new variables on left side of :=\n/tmp/tmpprrke_c9_test.go:15:23: first argument to append must be a slice; have numbers (variable of type string)\n/tmp/tmpprrke_c9_test.go:16:5: undefined: sort\n/tmp/tmpprrke_c9_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := append(numbers, numbers...)\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpprrke_c9_test.go:14:13: no new variables on left side of :=\n/tmp/tmpprrke_c9_test.go:14:16: undefined: strings\n/tmp/tmpprrke_c9_test.go:15:13: no new variables on left side of :=\n/tmp/tmpprrke_c9_test.go:15:23: first argument to append must be a slice; have numbers (variable of type string)\n/tmp/tmpprrke_c9_test.go:16:5: undefined: sort\n/tmp/tmpprrke_c9_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n    numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpem5ax438_test.go:14:13: no new variables on left side of :=\n/tmp/tmpem5ax438_test.go:14:16: undefined: strings\n/tmp/tmpem5ax438_test.go:15:13: no new variables on left side of :=\n/tmp/tmpem5ax438_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmpem5ax438_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpem5ax438_test.go:19:5: undefined: sort\n/tmp/tmpem5ax438_test.go:20:13: no new variables on left side of :=\n/tmp/tmpem5ax438_test.go:20:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7fd6rhv7_test.go:14:13: no new variables on left side of :=\n/tmp/tmp7fd6rhv7_test.go:14:16: undefined: strings\n/tmp/tmp7fd6rhv7_test.go:15:13: no new variables on left side of :=\n/tmp/tmp7fd6rhv7_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmp7fd6rhv7_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmp7fd6rhv7_test.go:19:5: undefined: sort\n/tmp/tmp7fd6rhv7_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp1utk0g42_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpn9jrqdie_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers, \".\")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpkmcd20kd_test.go:63:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n    numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk0duvw2u_test.go:14:13: no new variables on left side of :=\n/tmp/tmpk0duvw2u_test.go:14:16: undefined: strings\n/tmp/tmpk0duvw2u_test.go:15:13: no new variables on left side of :=\n/tmp/tmpk0duvw2u_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmpk0duvw2u_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpk0duvw2u_test.go:19:5: undefined: sort\n/tmp/tmpk0duvw2u_test.go:20:13: no new variables on left side of :=\n/tmp/tmpk0duvw2u_test.go:20:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplh3zz0db_test.go:14:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:14:16: undefined: strings\n/tmp/tmplh3zz0db_test.go:15:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:15:16: undefined: strings\n/tmp/tmplh3zz0db_test.go:16:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmplh3zz0db_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmprxwjqjc1_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpxpoeq7yv_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp934928cp_test.go:68:29: missing ',' before newline in argument list\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpc6ki0mmk_test.go:56:40: missing ',' before newline in argument list\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0rc5vkx7_test.go:14:13: no new variables on left side of :=\n/tmp/tmp0rc5vkx7_test.go:14:16: undefined: strings\n/tmp/tmp0rc5vkx7_test.go:15:13: no new variables on left side of :=\n/tmp/tmp0rc5vkx7_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp0rc5vkx7_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n    numbers := make([]string, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = strconv.Itoa(number)\n    }\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppcv50pni_test.go:14:13: no new variables on left side of :=\n/tmp/tmppcv50pni_test.go:14:16: undefined: strings\n/tmp/tmppcv50pni_test.go:15:13: no new variables on left side of :=\n/tmp/tmppcv50pni_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmppcv50pni_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmppcv50pni_test.go:19:5: undefined: sort\n/tmp/tmppcv50pni_test.go:20:13: no new variables on left side of :=\n/tmp/tmppcv50pni_test.go:20:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmppcv50pni_test.go:22:22: undefined: strconv\n/tmp/tmppcv50pni_test.go:24:12: undefined: strings\n/tmp/tmppcv50pni_test.go:24:12: too many errors\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 1,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpag0slhrg_test.go:66:6: expected '(', found TestSort_Numbers\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074344
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers {\n        numbers[i] = strings.Trim(numbers[i], \" \")\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfbdpbv1g_test.go:14:13: no new variables on left side of :=\n/tmp/tmpfbdpbv1g_test.go:14:16: undefined: strings\n/tmp/tmpfbdpbv1g_test.go:15:13: no new variables on left side of :=\n/tmp/tmpfbdpbv1g_test.go:15:16: undefined: strings\n/tmp/tmpfbdpbv1g_test.go:16:13: no new variables on left side of :=\n/tmp/tmpfbdpbv1g_test.go:16:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpfbdpbv1g_test.go:18:22: undefined: strings\n/tmp/tmpfbdpbv1g_test.go:20:5: undefined: sort\n/tmp/tmpfbdpbv1g_test.go:21:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074348
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjl941o84_test.go:14:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:14:16: undefined: strings\n/tmp/tmpjl941o84_test.go:15:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:15:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpjl941o84_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpjl941o84_test.go:19:5: undefined: sort\n/tmp/tmpjl941o84_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07_qm_q8_test.go:14:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:14:16: undefined: strings\n/tmp/tmp07_qm_q8_test.go:15:13: no new variables on left side of :=\n/tmp/tmp07_qm_q8_test.go:15:16: undefined: sort_numbers_test\n/tmp/tmp07_qm_q8_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := append([]string{\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"}, numbers...)\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9wqvezra_test.go:14:13: no new variables on left side of :=\n/tmp/tmp9wqvezra_test.go:14:16: undefined: strings\n/tmp/tmp9wqvezra_test.go:15:13: no new variables on left side of :=\n/tmp/tmp9wqvezra_test.go:15:16: cannot use append([]string{\u2026}, numbers...) (value of type []string) as type string in assignment\n/tmp/tmp9wqvezra_test.go:15:113: cannot use numbers (variable of type string) as type []string in argument to append\n/tmp/tmp9wqvezra_test.go:16:5: undefined: sort\n/tmp/tmp9wqvezra_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1snthf1b_test.go:14:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:14:16: undefined: strings\n/tmp/tmp1snthf1b_test.go:15:13: no new variables on left side of :=\n/tmp/tmp1snthf1b_test.go:15:16: cannot use make([]int, len(numbers)) (value of type []int) as type string in assignment\n/tmp/tmp1snthf1b_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmp1snthf1b_test.go:19:5: undefined: sort\n/tmp/tmp1snthf1b_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := append(numbers, \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6fjg9_5g_test.go:14:13: no new variables on left side of :=\n/tmp/tmp6fjg9_5g_test.go:14:16: undefined: strings\n/tmp/tmp6fjg9_5g_test.go:15:13: no new variables on left side of :=\n/tmp/tmp6fjg9_5g_test.go:15:23: first argument to append must be a slice; have numbers (variable of type string)\n/tmp/tmp6fjg9_5g_test.go:16:5: undefined: sort\n/tmp/tmp6fjg9_5g_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074348
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2vo5l2ct_test.go:14:13: no new variables on left side of :=\n/tmp/tmp2vo5l2ct_test.go:14:16: undefined: strings\n/tmp/tmp2vo5l2ct_test.go:15:5: undefined: sort\n/tmp/tmp2vo5l2ct_test.go:16:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplh3zz0db_test.go:14:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:14:16: undefined: strings\n/tmp/tmplh3zz0db_test.go:15:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:15:16: undefined: strings\n/tmp/tmplh3zz0db_test.go:16:13: no new variables on left side of :=\n/tmp/tmplh3zz0db_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmplh3zz0db_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074347
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaif0xz04_test.go:14:15: undefined: strings\n/tmp/tmpaif0xz04_test.go:15:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:15:16: undefined: strings\n/tmp/tmpaif0xz04_test.go:16:13: no new variables on left side of :=\n/tmp/tmpaif0xz04_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmpaif0xz04_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjl941o84_test.go:14:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:14:16: undefined: strings\n/tmp/tmpjl941o84_test.go:15:13: no new variables on left side of :=\n/tmp/tmpjl941o84_test.go:15:16: cannot use make([]string, len(numbers)) (value of type []string) as type string in assignment\n/tmp/tmpjl941o84_test.go:17:9: cannot assign to numbers[i] (value of type byte)\n/tmp/tmpjl941o84_test.go:19:5: undefined: sort\n/tmp/tmpjl941o84_test.go:20:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    },
    {
      "exit_code": 2,
      "program": "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five four three two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptch1nkcj_test.go:14:15: undefined: strings\n/tmp/tmptch1nkcj_test.go:15:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:15:16: undefined: strings\n/tmp/tmptch1nkcj_test.go:16:13: no new variables on left side of :=\n/tmp/tmptch1nkcj_test.go:16:16: undefined: sort_numbers_test\n/tmp/tmptch1nkcj_test.go:17:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074346
    }
  ]
}