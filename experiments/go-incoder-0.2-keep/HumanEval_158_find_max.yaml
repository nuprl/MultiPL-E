name: HumanEval_158_find_max
language: go_test.go
prompt: "package find_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Write a function that accepts a list of strings.\n// The list contains different\
  \ words. Return the word with maximum number\n// of unique characters. If multiple\
  \ strings have maximum number of unique\n// characters, return the one which comes\
  \ first in lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) ==\
  \ \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"\
  aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunc find_max(words []string) string\
  \ {\n"
tests: "func TestFind_Max(t *testing.T) {\n  candidate := find_max\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]string{\"name\", \"of\", \"string\"}), expected: \"\
  string\" },\n     { actual: candidate([]string{\"name\", \"enam\", \"game\"}), expected:\
  \ \"enam\" },\n     { actual: candidate([]string{\"aaaaaaa\", \"bb\", \"cc\"}),\
  \ expected: \"aaaaaaa\" },\n     { actual: candidate([]string{\"abc\", \"cba\"}),\
  \ expected: \"abc\" },\n     { actual: candidate([]string{\"play\", \"this\", \"\
  game\", \"of\", \"footbott\"}), expected: \"footbott\" },\n     { actual: candidate([]string{\"\
  we\", \"are\", \"gonna\", \"rock\"}), expected: \"gonna\" },\n     { actual: candidate([]string{\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"}), expected: \"nation\" },\n     { actual:\
  \ candidate([]string{\"this\", \"is\", \"a\", \"prrk\"}), expected: \"this\" },\n\
  \     { actual: candidate([]string{\"b\"}), expected: \"b\" },\n     { actual: candidate([]string{\"\
  play\", \"play\", \"play\"}), expected: \"play\" },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    sort.Strings(words)\n    max := 0\n    word := \"\"\n    for _,\
    \ word := range words {\n        count := 0\n        for _, letter := range word\
    \ {\n            count += letterCount[letter]\n        }\n        if count > max\
    \ {\n            max = count\n            word = word\n        }\n    }\n    return\
    \ word\n}\n", "    result := \"\"\n    max := 0\n    for _, word := range words\
    \ {\n        count := 0\n        for _, c := range word {\n            if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n                count++\n\
    \            }\n        }\n        if count > max {\n            result = word\n\
    \            max = count\n        }\n    }\n    if max > 0 {\n        result =\
    \ words[len(words)-1]\n    }\n    return result\n}\n", "    max := 0\n    index\
    \ := 0\n    for _, word := range words {\n        count := 0\n        for _, letter\
    \ := range word {\n            if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n                count++\n         \
    \   }\n        }\n        if count > max {\n            max = count\n        \
    \    index = word\n        }\n    }\n    return words[index]\n}\n", "    max :=\
    \ 0\n    index := 0\n    for _, word := range words {\n        count := 0\n  \
    \      for _, letter := range word {\n            if letter == 'a' || letter ==\
    \ 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n                count++\n\
    \            }\n        }\n        if count > max {\n            max = count\n\
    \            index = word\n        }\n    }\n    return words[index]\n}\n", " \
    \   max := 0\n    word := \"\"\n    for _, word := range words {\n        count\
    \ := 0\n        for _, letter := range word {\n            if letter == 'a' ||\
    \ letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n       \
    \         count++\n            }\n        }\n        if count > max {\n      \
    \      max = count\n            word = word\n        }\n    }\n    return word\n\
    }\n", "    result := \"\"\n    max := 0\n    for _, word := range words {\n  \
    \      count := 0\n        for _, letter := range word {\n            if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \                count++\n            }\n        }\n        if count > max {\n\
    \            result = word\n            max = count\n        }\n    }\n    return\
    \ result\n}\n", "    result := \"\"\n    max := 0\n    for _, word := range words\
    \ {\n        count := 0\n        for _, letter := range word {\n            if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter ==\
    \ 'u' {\n                count++\n            }\n        }\n        if count >\
    \ max {\n            result = word\n            max = count\n        }\n    }\n\
    \    return result\n}\n", "    max := 0\n    result := \"\"\n    for _, word :=\
    \ range words {\n        count := 0\n        for _, letter := range word {\n \
    \           if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n                count++\n            }\n        }\n    \
    \    if count > max {\n            result = word\n            max = count\n  \
    \      }\n    }\n    return result\n}\n", "    max := 0\n    word := \"\"\n  \
    \  for _, word := range words {\n        count := 0\n        for _, letter :=\
    \ range word {\n            if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n                count++\n            }\n\
    \        }\n        if count > max {\n            max = count\n            word\
    \ = word\n        }\n    }\n    return word\n}\n", "    max := 0\n    result :=\
    \ \"\"\n    for _, word := range words {\n        count := 0\n        for _, letter\
    \ := range word {\n            if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n                count++\n         \
    \   }\n        }\n        if count > max {\n            max = count\n        \
    \    result = word\n        }\n    }\n    return result\n}\n", "    max := 0\n\
    \    index := 0\n    for _, word := range words {\n        count := 0\n      \
    \  for _, c := range word {\n            count++\n        }\n        if count\
    \ > max {\n            max = count\n            index = word\n        }\n    }\n\
    \    return words[index]\n}\n", "    max := 0\n    word := \"\"\n    for _, w\
    \ := range words {\n        count := 0\n        for _, c := range w {\n      \
    \      if count+1 > max {\n                max = count\n                word =\
    \ w\n            }\n            count += unicode.IsOneOf([]rune(c), []rune(\"\
    a\"))\n        }\n    }\n    return word\n}\n", "    max := 0\n    index := 0\n\
    \    for _, word := range words {\n        count := 0\n        for _, letter :=\
    \ range word {\n            if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n                count++\n            }\n\
    \        }\n        if count > max {\n            max = count\n            index\
    \ = word\n        }\n    }\n    return index\n}\n", "    count := make(map[string]int)\n\
    \    for _, word := range words {\n        count[word]++\n    }\n    max := 0\n\
    \    word := \"\"\n    for word, count := range count {\n        if count > max\
    \ {\n            max = count\n        }\n    }\n    if max == 0 {\n        return\
    \ \"\"\n    }\n    for _, word := range words {\n        if count[word] == max\
    \ {\n            return word\n        }\n    }\n    return \"\"\n}\n", "    sort.Strings(words)\n\
    \    max := 0\n    word := \"\"\n    for _, w := range words {\n        count\
    \ := 0\n        for _, c := range w {\n            if c != ' ' {\n           \
    \     count++\n            }\n        }\n        if count > max {\n          \
    \  max = count\n            word = w\n        }\n    }\n    return word\n}\n",
  "    max := 0\n    word := \"\"\n    for _, w := range words {\n        count :=\
    \ 0\n        for _, c := range w {\n            if c != ' ' {\n              \
    \  count++\n            }\n        }\n        if count > max {\n            max\
    \ = count\n            word = w\n        }\n    }\n    return word\n}\n", "  \
    \  max := 0\n    result := \"\"\n    for _, word := range words {\n        count\
    \ := 0\n        for _, letter := range word {\n            if letter == 'a' ||\
    \ letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n       \
    \         count++\n            }\n        }\n        if count > max {\n      \
    \      result = word\n            max = count\n        }\n    }\n    return result\n\
    }\n", "    max := 0\n    result := \"\"\n    for _, word := range words {\n  \
    \      count := 0\n        for _, letter := range word {\n            count +=\
    \ letterCount[letter]\n        }\n        if count > max {\n            max =\
    \ count\n            result = word\n        }\n    }\n    return result\n}\n",
  "    max := 0\n    result := \"\"\n    for _, word := range words {\n        count\
    \ := 0\n        for _, c := range word {\n            count += counts[c]\n   \
    \     }\n        if count > max {\n            max = count\n            result\
    \ = word\n        }\n    }\n    return result\n}\n", "    max := 0\n    word :=\
    \ \"\"\n    for _, w := range words {\n        count := 0\n        for _, c :=\
    \ range w {\n            if c != ' ' {\n                count++\n            }\n\
    \        }\n        if count > max {\n            max = count\n            word\
    \ = w\n        }\n    }\n    return word\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
