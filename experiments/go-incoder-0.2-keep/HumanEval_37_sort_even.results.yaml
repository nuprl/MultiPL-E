language: go_test.go
name: HumanEval_37_sort_even
results:
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i\
    \ < len(l); i++ {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpavtuc9sh_test.go:16:7: no new variables on left side of :=

    /tmp/tmpavtuc9sh_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n  \
    \  for i := 0; i < len(l); i++ {\n        l[i] = evens[i]\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyb6vqzkv_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        }\n    }\n\
    \    sort.Ints(evens)\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2o26zj88_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    }\n    }\n    sort.Ints(evens)\n    return evens\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqdtubul_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqe7k3om_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n \
    \   for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i], l[i+1]\
    \ = l[i+1], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupz9sn5t_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        }\n    }\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptifw6v59_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        if i%2 == 0 {\n            evens[i] = evens[i]\n        } else\
    \ {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpw1i0ijkr_test.go:45: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpw1i0ijkr_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgbnugnv7_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n\
    \            evens[i] = l[i]\n        }\n    }\n    sort.Sort(evens)\n    return\
    \ evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9flevzjx_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i % 2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(append(evens, odds...), l...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmph84ik4i5_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n \
    \       tmph84ik4i5_test.go:43: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3)\
    \ %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmph84ik4i5_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10) %!s(int=5) %!s(int=8) %!s(int=-12)\
    \ %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens = append(evens, l...)\n\
    \    odds = append(odds, l...)\n    sort.Sort(evens)\n    sort.Sort(odds)\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu1797u94_test.go:18:11: no new variables on left side of :=

    /tmp/tmpu1797u94_test.go:21:5: undefined: sort

    /tmp/tmpu1797u94_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // Initialize a list to hold the even indicies\n\
    \    evens := make([]int, len(l))\n    // Initialize a list to hold the odd indicies\n\
    \    odds := make([]int, len(l))\n    // Initialize a list to hold the sorted\
    \ odd indicies\n    sortedOdds := make([]int, len(l))\n    // Initialize a list\
    \ to hold the sorted even indicies\n    sortedEvens := make([]int, len(l))\n\n\
    \    // Loop through the even indicies\n    for i := 0; i < len(l); i++ {\n  \
    \      // If the current index is even, append it to the sorted even indicies\n\
    \        if i%2 == 0 {\n            sortedEvens = append(sortedEvens, l[i])\n\
    \        } else {\n            // If the current index is odd, append it to the\
    \ sorted odd indicies\n            sortedOdds = append(sortedOdds, l[i])\n   \
    \     }\n    }\n\n    // Loop through the odd indicies\n    for i := 0; i < len(l);\
    \ i++ {\n        // If the current index is odd, append it to the sorted odd indicies\n\
    \        if i%2 == 1 {\n            sortedOdds = append(sortedOdds, l[i])\n  \
    \      } else {\n            // If the current index is even, append it to the\
    \ sorted even indicies\n            sortedEvens = append(sortedEvens, l[i])\n\
    \        }\n    }\n\n    // Loop through the sorted odd indicies\n    for i :=\
    \ 0; i < len(sortedOdds); i++ {\n        // If the current index is even, append\
    \ it to the sorted even indicies\n        if i%2 == 0 {\n            sortedEvens\
    \ = append(sortedEvens, sortedOdds[i])\n        } else {\n            // If the\
    \ current index is odd, append it to the sorted odd indicies\n            sortedOdds\
    \ = append(sortedOdds, sortedOdds[i])\n        }\n    }\n\n    // Loop through\
    \ the sorted even indicies\n    for i := 0; i < len(sortedEvens); i++ {\n    \
    \    // If the current index is even, append it to the sorted odd indicies\n \
    \       if i%2 == 0 {\n            sortedOdds = append(sortedOdds, sortedEvens[i])\n\
    \        } else {\n            // If the current index is odd, append it to the\
    \ sorted even indicies\n            sortedEvens = append(sortedEvens, sortedEvens[i])\n\
    \        }\n    }\n\n    // Return the sorted list\n    return sortedEvens\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmdu5fcki_test.go:17:5: evens declared but not used

    /tmp/tmpmdu5fcki_test.go:19:5: odds declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp279vyxqb_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgbnugnv7_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n \
    \   for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i], l[i+1]\
    \ = l[i+1], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupz9sn5t_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgbnugnv7_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // Initialize a list to hold the even indicies\n\
    \    evens := make([]int, len(l))\n    // Initialize a list to hold the odd indicies\n\
    \    odds := make([]int, len(l))\n    // Initialize a list to hold the sorted\
    \ values\n    sorted := make([]int, len(l))\n    // Initialize a list to hold\
    \ the sorted values\n    sorted_odd := make([]int, len(l))\n\n    // Loop through\
    \ the even indicies\n    for i := 0; i < len(evens); i++ {\n        // If the\
    \ current value is even, append it to the sorted list\n        if l[i] % 2 ==\
    \ 0 {\n            sorted[i] = l[i]\n            // If the current value is odd,\
    \ append it to the sorted odd list\n        } else {\n            sorted_odd[i]\
    \ = l[i]\n        }\n    }\n\n    // Loop through the odd indicies\n    for i\
    \ := 0; i < len(odds); i++ {\n        // If the current value is odd, append it\
    \ to the sorted odd list\n        if l[i] % 2 == 1 {\n            sorted_odd[i]\
    \ = l[i]\n            // If the current value is even, append it to the sorted\
    \ even list\n        } else {\n            evens[i] = l[i]\n        }\n    }\n\
    \n    // Loop through the sorted odd list\n    for i := 0; i < len(sorted_odd);\
    \ i++ {\n        // If the current value is even, append it to the sorted even\
    \ list\n        if sorted_odd[i] % 2 == 0 {\n            evens[i] = sorted_odd[i]\n\
    \            // If the current value is odd, append it to the sorted odd list\n\
    \        } else {\n            odds[i] = sorted_odd[i]\n        }\n    }\n\n \
    \   // Loop through the sorted even list\n    for i := 0; i < len(evens); i++\
    \ {\n        // If the current value is even, append it to the sorted odd list\n\
    \        if evens[i] % 2 == 0 {\n            odds[i] = evens[i]\n            //\
    \ If the current value is odd, append it to the sorted even list\n        } else\
    \ {\n            sorted[i] = evens[i]\n        }\n    }\n\n    // Return the sorted\
    \ list\n    return sorted\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpjy9k9l_o_test.go:88: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpjy9k9l_o_test.go:88: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=0) %!s(int=0) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpjy9k9l_o_test.go:88:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=0) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqsy28ka_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp279vyxqb_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp23mhgh7u_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp23mhgh7u_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int, len(l))\n\
    \    evens = l\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n   \
    \         evens[i] = l[i]\n        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbbtj9anx_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens[0], evens[1], evens[2] = l[0], l[1], l[2]\n    odds[0], odds[1],\
    \ odds[2] = l[3], l[4], l[5]\n    evens[3], evens[4], evens[5] = l[6], l[7], l[8]\n\
    \    odds[3], odds[4], odds[5] = l[9], l[10], l[11]\n    evens[6], evens[7], evens[8]\
    \ = l[12], l[13], l[14]\n    odds[6], odds[7], odds[8] = l[15], l[16], l[17]\n\
    \    evens[9], evens[10], evens[11] = l[18], l[19], l[20]\n    odds[9], odds[10],\
    \ odds[11] = l[21], l[22], l[23]\n    evens[12], evens[13], evens[14] = l[24],\
    \ l[25], l[26]\n    odds[12], odds[13], odds[14] = l[27], l[28], l[29]\n    evens[15],\
    \ evens[16], evens[17] = l[30], l[31], l[32]\n    odds[15], odds[16], odds[17]\
    \ = l[33], l[34], l[35]\n    evens[18], evens[19], evens[20] = l[36], l[37], l[38]\n\
    \    odds[18], odds[19], odds[20] = l[39], l[40], l[41]\n    evens[21], evens[22],\
    \ evens[23] = l[42], l[43], l[44]\n    odds[21], odds[22], odds[23] = l[45], l[46],\
    \ l[47]\n    evens[24], evens[25], evens[26] = l[48], l[49], l[50]\n    odds[24],\
    \ odds[25], odds[26] = l[51], l[52], l[53]\n    evens[27], evens[28], evens[29]\
    \ = l[54], l[55], l[56]\n    odds[27], odds[28], odds[29] = l[57], l[58], l[59]\n\
    \    evens[30], evens[3\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnmirmw_c_test.go:38:23: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n \
    \   for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i/2\n            j := j + i%2\n          \
    \  l[i], l[j] = l[j], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdshpdtyy_test.go:16:7: no new variables on left side of :=

    /tmp/tmpdshpdtyy_test.go:23:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int, len(l))\n\
    \    for i, v := range l {\n        if i%2 == 0 {\n            evens[i] = v\n\
    \        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm4nt49iy_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074036
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    for i := 0; i < len(l); i++ {\n        l[i] = evens[i]\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9gmlwp5_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074036
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens[0], evens[1] = evens[1], evens[0]\n    for i := 0; i < len(l);\
    \ i += 2 {\n        evens[i+1], evens[i] = evens[i], evens[i+1]\n    }\n    for\
    \ i := 0; i < len(evens); i += 2 {\n        odds[i], odds[i+1] = odds[i+1], odds[i]\n\
    \    }\n    return odds\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000c4600?, 0x3, 0x2b9b68930a88?})\n\
    \t/tmp/tmp0o9v9wu3_test.go:20 +0x105\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmp0o9v9wu3_test.go:35 +0x75\ntesting.tRunner(0xc0001924e0, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqsy28ka_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp23mhgh7u_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp23mhgh7u_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqsy28ka_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        }\n    }\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptifw6v59_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    }\n    }\n    sort.Ints(evens)\n    return evens\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqdtubul_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp23mhgh7u_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp23mhgh7u_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i\
    \ < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n        } else\
    \ {\n            l[i] = l[i] + l[i-1]\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpey8nar4j_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Ints(evens)\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3uc3kvf7_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i % 2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(evens, odds...)\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp4ly_x_o4_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmp4ly_x_o4_test.go:43:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3) %!s(int=0) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp4ly_x_o4_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074038
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp23mhgh7u_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp23mhgh7u_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    return\
    \ evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphmlg2zeq_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n\
    \            evens[i] = l[i]\n        }\n    }\n    sort.Ints(evens)\n    return\
    \ evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsimhga0c_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i % 2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f17bec0,\
    \ 0x3, 0xc000101400?})\n\t/tmp/tmpn010tb0r_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f17be90, 0x3, 0xc000101400?})\n\
    \t/tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be60, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be30, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be00, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bdd0, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bda0, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bd70, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bd40, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        }\n    }\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    for i := range l {\n \
    \       if i%2 == 0 {\n            l[i] = evens[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqpy9jqk__test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    for i := 0; i < len(l);\
    \ i += 2 {\n        j := i\n        for j++ < len(l) && l[j] == l[j-1] {\n   \
    \     }\n        evens[i], evens[j] = evens[j], evens[i]\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg2345_e5_test.go:22:17: expected ''{'', found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_1rnx9e_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := evens[:0]\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens =\
    \ append(evens, l[i])\n        } else {\n            evens = append(evens, l[i])\n\
    \        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4zuqkmhz_test.go:17:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n        \
    \    evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n        }\n\
    \    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f1f3ec0,\
    \ 0x3, 0xc000580c00?})\n\t/tmp/tmp8udxio17_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f1f3e90, 0x3, 0xc000580c00?})\n\
    \t/tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e60, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e30, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e00, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3dd0, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3da0, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3d70, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3d40, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Ints(evens)\n  \
    \  for i := 0; i < len(l); i++ {\n        l[i] = evens[i]\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg7x7thzg_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(even\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpydonrtcw_test.go:72:24: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n \
    \   for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i/2\n            j := j + 1\n            j\
    \ := j + 1\n            l[i] = l[j]\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj1trpfwc_test.go:16:7: no new variables on left side of :=

    /tmp/tmpj1trpfwc_test.go:23:15: no new variables on left side of :=

    /tmp/tmpj1trpfwc_test.go:24:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n\
    \            evens[i] = l[i]\n        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmptn9qlhvr_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmptn9qlhvr_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp23mhgh7u_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp23mhgh7u_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp89eqi6v6_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i\
    \ < len(l); i++ {\n        l[i] = l[i]\n    }\n    for i := 0; i < len(l); i +=\
    \ 2 {\n        l[i], l[i+1] = l[i+1], l[i]\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj49pwbe__test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqsy28ka_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp279vyxqb_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i\
    \ < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n        } else\
    \ {\n            l[i] = l[i] + l[i]/2\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmperhjbsb6_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, \nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2pyit0bx_test.go:59:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            odds[i] = l[i]\n        }\n    }\n   \
    \ return append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f1bbec0,\
    \ 0x3, 0xc000580400?})\n\t/tmp/tmpe7b0vf7s_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f1bbe90, 0x3, 0xc000580400?})\n\
    \t/tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbe60, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbe30, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbe00, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc020160578 sp=0xc020160510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbdd0, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbda0, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbd70, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbd40, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660074040
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := evens[:len(l)]\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        }\n    }\n    evens = append(evens, l...)\n    sort.Ints(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9r3hby8q_test.go:17:11: no new variables on left side of :=

    /tmp/tmp9r3hby8q_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n      \
    \      evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n       \
    \ }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f111ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpjxqd_9kj_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f111e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074041
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n  \
    \  for i := 0; i < len(l); i++ {\n        l[i] = evens[i]\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyb6vqzkv_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(append(evens, odds...), l...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpyhbm4yot_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n \
    \       tmpyhbm4yot_test.go:43: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3)\
    \ %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpyhbm4yot_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10) %!s(int=5) %!s(int=8) %!s(int=-12)\
    \ %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i\
    \ < len(l); i++ {\n        l[i] = l[i]\n    }\n    for i := 0; i < len(l)-1; i++\
    \ {\n        if l[i] > l[i+1] {\n            t := l[i]\n            l[i] = l[i+1]\n\
    \            l[i+1] = t\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgl2g0d0u_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    for i := 0; i < len(l); i++ {\n        l[i] = evens[i]\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9gmlwp5_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074036
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n        \
    \    evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n        }\n\
    \    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f1f3ec0,\
    \ 0x3, 0xc000580c00?})\n\t/tmp/tmp8udxio17_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f1f3e90, 0x3, 0xc000580c00?})\n\
    \t/tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e60, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e30, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e00, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3dd0, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3da0, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3d70, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3d40, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    for i\
    \ := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = evens[i]\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4gqsmvs8_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp23mhgh7u_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp23mhgh7u_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n\
    \            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_iif16c_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4sfmcphd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp4sfmcphd_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Ints(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilultj48_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%2 == 0 {\n    \
    \        evens[i] = v\n        } else {\n            odds[i] = v\n        }\n\
    \        i++\n    }\n    return append(append(evens, odds...), l...)\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpim5p9mm7_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=3) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n \
    \       tmpim5p9mm7_test.go:45: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-10) %!s(int=5)\
    \ %!s(int=3) %!s(int=-5) %!s(int=0) %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=1) %!s(int=0) %!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpim5p9mm7_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=0) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=12)\
    \ %!s(int=-10) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=23) %!s(int=0)\
    \ %!s(int=3) %!s(int=11) %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=8) %!s(int=-12)\
    \ %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Ints(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilultj48_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        } else {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzioldsjv_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(evens, odds...)\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp834j5xoi_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmp834j5xoi_test.go:43:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3) %!s(int=0) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp834j5xoi_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        if i%2 == 0 {\n            evens[i], evens[len(l)-i-1] = evens[len(l)-i-1],\
    \ evens[i]\n        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp6pvrjmtb_test.go:43: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp6pvrjmtb_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=12)\
    \ %!s(int=11) %!s(int=3) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=-12) %!s(int=8)\
    \ %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr31xt4df_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(append(evens, odds...), l...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpyhbm4yot_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n \
    \       tmpyhbm4yot_test.go:43: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3)\
    \ %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpyhbm4yot_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10) %!s(int=5) %!s(int=8) %!s(int=-12)\
    \ %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := evens[:0]\n\
    \    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n            evens\
    \ = append(evens, l[i])\n        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz5aabngi_test.go:17:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        if i%2 == 0 {\n            evens[i] = evens[i]\n        }\n \
    \   }\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp8iivp4qj_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp8iivp4qj_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens[0], evens[1] = evens[1], evens[0]\n    odds[0], odds[1] =\
    \ odds[1], odds[0]\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n\
    \            evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n \
    \       }\n    }\n    return append(append(evens, odds...), l...)\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpyoc3jqeq_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n \
    \       tmpyoc3jqeq_test.go:45: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3)\
    \ %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpyoc3jqeq_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10) %!s(int=5) %!s(int=8) %!s(int=-12)\
    \ %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Ints(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilultj48_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp279vyxqb_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(append(evens, odds...), l...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpyhbm4yot_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n \
    \       tmpyhbm4yot_test.go:43: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3)\
    \ %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpyhbm4yot_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10) %!s(int=5) %!s(int=8) %!s(int=-12)\
    \ %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(even\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpydonrtcw_test.go:72:24: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        } else {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzioldsjv_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // Create an empty list to hold the sorted values\n\
    \    l := make([]int, len(l))\n    // Iterate over the even indicies of the original\
    \ list\n    for i := 0; i < len(l); i += 2 {\n        // Copy the even indicies\
    \ of l into l' while sorting them\n        l[i] = l[i]\n        l[i+1] = l[i+1]\n\
    \        // Sort the even indicies of l'\n        sort.Ints(l[i:])\n    }\n  \
    \  // Return the sorted list\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7uwi0una_test.go:17:7: no new variables on left side of :=

    /tmp/tmp7uwi0una_test.go:24:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp279vyxqb_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n\
    \            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_iif16c_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i % 2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f17bec0,\
    \ 0x3, 0xc000101400?})\n\t/tmp/tmpn010tb0r_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f17be90, 0x3, 0xc000101400?})\n\
    \t/tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be60, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be30, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be00, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bdd0, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bda0, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bd70, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bd40, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n\
    \            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_iif16c_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp23mhgh7u_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp23mhgh7u_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n \
    \   for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i/2\n            j := j + i/2\n          \
    \  j := j + i/2\n            j := j + i/2\n            j := j + i/2\n        \
    \    j := j + i/2\n            j := j + i/2\n            j := j + i/2\n      \
    \      j := j + i/2\n            j := j + i/2\n            j := j + i/2\n    \
    \        j := j + i/2\n            j := j + i/2\n            j := j + i/2\n  \
    \          j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j := j + i/2\n            j := j + i/2\n            j := j + i/2\n\
    \            j \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpps7gtjlg_test.go:82:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xb07lqt_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i % 2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f17bec0,\
    \ 0x3, 0xc000101400?})\n\t/tmp/tmpn010tb0r_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f17be90, 0x3, 0xc000101400?})\n\
    \t/tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be60, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be30, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be00, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bdd0, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bda0, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bd70, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bd40, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            odds[i] = l[i]\n        }\n    }\n   \
    \ return append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f1bbec0,\
    \ 0x3, 0xc000580400?})\n\t/tmp/tmpe7b0vf7s_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f1bbe90, 0x3, 0xc000580400?})\n\
    \t/tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbe60, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbe30, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbe00, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc020160578 sp=0xc020160510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbdd0, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbda0, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbd70, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1bbd40, 0x3, 0xc000580400?})\n\t\
    /tmp/tmpe7b0vf7s_test.go:25 +0x92 fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660074040
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n \
    \   for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i/2\n            j := j - 1\n            j\
    \ := j - 1\n            l[i] = l[j]\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5jjblm2e_test.go:16:7: no new variables on left side of :=

    /tmp/tmp5jjblm2e_test.go:23:15: no new variables on left side of :=

    /tmp/tmp5jjblm2e_test.go:24:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp279vyxqb_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens = append(evens, l...)\n    odds = append(odds, l...)\n  \
    \  evens = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens\
    \ = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens = append(evens,\
    \ evens...)\n    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n\
    \    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds\
    \ = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds = append(odds,\
    \ odds...)\n    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n\
    \    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens\
    \ = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens = append(evens,\
    \ evens...)\n    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n\
    \    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds\
    \ = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds = append(odds,\
    \ odds...)\n    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n\
    \    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens\
    \ = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens = append(evens,\
    \ evens...)\n    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n\
    \    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds\
    \ = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds = append(odds,\
    \ odds...)\n    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n\
    \    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens\
    \ = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens = append(evens,\
    \ evens...)\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpicmw46_t_test.go:68:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i\
    \ < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n        } else\
    \ {\n            l[i] = l[i] + l[i-1]\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpey8nar4j_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp23mhgh7u_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp23mhgh7u_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n        \
    \    evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n        }\n\
    \    }\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n           \
    \ evens[i] = evens[i]\n        } else {\n            odds[i] = odds[i]\n     \
    \   }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpxbg9_k2g_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpxbg9_k2g_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0)\
    \ %!s(int=-3) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpxbg9_k2g_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074040
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(even\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpydonrtcw_test.go:72:24: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i % 2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f17bec0,\
    \ 0x3, 0xc000101400?})\n\t/tmp/tmpn010tb0r_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f17be90, 0x3, 0xc000101400?})\n\
    \t/tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be60, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be30, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be00, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bdd0, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bda0, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bd70, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bd40, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Ints(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilultj48_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i\
    \ < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n        } else\
    \ {\n            l[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++\
    \ {\n        if i%2 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphh8uqnqm_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Ints(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilultj48_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        if i%2 == 0 {\n            evens[i], evens[len(l)-1-i] = evens[len(l)-1-i],\
    \ evens[i]\n        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpxax3txxp_test.go:43: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpxax3txxp_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=12)\
    \ %!s(int=11) %!s(int=3) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=-12) %!s(int=8)\
    \ %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074040
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(even\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpydonrtcw_test.go:72:24: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Ints(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilultj48_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp279vyxqb_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        }\n    }\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpy7_61_9b_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpy7_61_9b_test.go:40: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0)\
    \ %!s(int=-3) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpy7_61_9b_test.go:40:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074040
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(even\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpydonrtcw_test.go:72:24: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int, len(l))\n\
    \    for i, v := range l {\n        if i%2 == 0 {\n            evens[i] = v\n\
    \        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm4nt49iy_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074036
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        if i%2 == 0 {\n            evens[i], evens[len(l)-i-1] = evens[len(l)-i-1],\
    \ evens[i]\n        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp6pvrjmtb_test.go:43: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp6pvrjmtb_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=12)\
    \ %!s(int=11) %!s(int=3) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=-12) %!s(int=8)\
    \ %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        }\n    }\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptifw6v59_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        evens[i] = i\n    }\n    sort.Sort(evens)\n    evens = evens[:len(l)]\n\
    \    for i := range l {\n        l[i] = evens[i]\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8xvl6u4_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(append(evens, odds...), l...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpyhbm4yot_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n \
    \       tmpyhbm4yot_test.go:43: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3)\
    \ %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpyhbm4yot_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10) %!s(int=5) %!s(int=8) %!s(int=-12)\
    \ %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i\
    \ < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n        } else\
    \ {\n            j := i/2\n            j := j + 1\n            j := j + 1\n  \
    \          l[i] = l[j]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa9zetqin_test.go:16:7: no new variables on left side of :=

    /tmp/tmpa9zetqin_test.go:22:15: no new variables on left side of :=

    /tmp/tmpa9zetqin_test.go:23:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqsy28ka_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n        \
    \    evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n        }\n\
    \    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f1f3ec0,\
    \ 0x3, 0xc000580c00?})\n\t/tmp/tmp8udxio17_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f1f3e90, 0x3, 0xc000580c00?})\n\
    \t/tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e60, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e30, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e00, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3dd0, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3da0, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3d70, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3d40, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(evens, append(odds, l...)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpd7x6_doj_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n \
    \       tmpd7x6_doj_test.go:43: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3)\
    \ %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpd7x6_doj_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10) %!s(int=5) %!s(int=8) %!s(int=-12)\
    \ %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    for i := 0; i < len(evens); i++ {\n        l[i] = evens[i]\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp89jeggsj_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n        \
    \    evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n        }\n\
    \    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f1f3ec0,\
    \ 0x3, 0xc000580c00?})\n\t/tmp/tmp8udxio17_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f1f3e90, 0x3, 0xc000580c00?})\n\
    \t/tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e60, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e30, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3e00, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3dd0, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3da0, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3d70, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1f3d40, 0x3, 0xc000580c00?})\n\t\
    /tmp/tmp8udxio17_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    for i := 0; i < len(l); i++\
    \ {\n        if i%2 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfk7488kj_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        }\n    }\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptifw6v59_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i\
    \ < len(l); i++ {\n        l[i] = l[i]\n    }\n    for i := 0; i < len(l); i +=\
    \ 2 {\n        l[i], l[i+1] = l[i+1], l[i]\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj49pwbe__test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgbnugnv7_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n\
    \            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_iif16c_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074039
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        }\n    }\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptifw6v59_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens := append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoaxuzvdb_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074034
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n  \
    \  for i := 0; i < len(l); i++ {\n        l[i] = evens[i]\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyb6vqzkv_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        }\n    }\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptifw6v59_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n        }\n    }\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    for i := range l {\n \
    \       if i%2 == 0 {\n            l[i] = evens[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqpy9jqk__test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(evens, append(odds, l...)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpd7x6_doj_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n \
    \       tmpd7x6_doj_test.go:43: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3)\
    \ %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpd7x6_doj_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10) %!s(int=5) %!s(int=8) %!s(int=-12)\
    \ %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074041
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i % 2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f17bec0,\
    \ 0x3, 0xc000101400?})\n\t/tmp/tmpn010tb0r_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f17be90, 0x3, 0xc000101400?})\n\
    \t/tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be60, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be30, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17be00, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bdd0, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bda0, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bd70, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f17bd40, 0x3, 0xc000101400?})\n\t\
    /tmp/tmpn010tb0r_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074039
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n        \
    \    evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n        }\n\
    \    }\n    sort.Ints(evens)\n    sort.Ints(odds)\n    for i := 0; i < len(l);\
    \ i++ {\n        if i%2 == 0 {\n            l[i] = evens[i]\n        } else {\n\
    \            l[i] = odds[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy906u1_i_test.go:25:5: undefined: sort

    /tmp/tmpy906u1_i_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqsy28ka_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp279vyxqb_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqsy28ka_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = v\n        } else {\n            odds[i] = v\n        }\n    }\n    return\
    \ append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f176c60,\
    \ 0x3, 0xc000680000?})\n\t/tmp/tmpckz3rd5l_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f176c30, 0x3, 0xc000680000?})\n\
    \t/tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176c00, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176bd0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ba0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160578 sp=0xc020160510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b70, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b40, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176b10, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f176ae0, 0x3, 0xc000680000?})\n\t\
    /tmp/tmpckz3rd5l_test.go:25 +0x8e fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074037
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n        \
    \    evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n        }\n\
    \    }\n    for i := 0; i < len(evens); i++ {\n        for j := 0; j < len(odds);\
    \ j++ {\n            if evens[i] > odds[j] {\n                evens[i], odds[j]\
    \ = odds[j], evens[i]\n            }\n        }\n    }\n    return evens\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpyizk6dl6_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpyizk6dl6_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=0) %!s(int=0) %!s(int=-5) %!s(int=0)\
    \ %!s(int=-3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpyizk6dl6_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i] = l[i]\n    \
    \    } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83opdhoc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074035
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n        \
    \    evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n        }\n\
    \    }\n    sort.Sort(sort.Reverse(sort.IntSlice(odds)))\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    for i := 0; i < len(evens); i++ {\n        l[i] = evens[i]\n    }\n    for\
    \ i := 0; i < len(odds); i++ {\n        l[i] = odds[i]\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp85f8ivj5_test.go:25:5: undefined: sort

    /tmp/tmp85f8ivj5_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n      \
    \      evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n       \
    \ }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f111ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpjxqd_9kj_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f111e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f111d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpjxqd_9kj_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660074041
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    for i := 0; i < len(l); i++\
    \ {\n        if i%2 == 0 {\n            l[i] = l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc7gb3sis_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := make([]int, len(l))\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(even\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpydonrtcw_test.go:72:24: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074037
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    return\
    \ evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphmlg2zeq_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074037
