language: go_test.go
name: HumanEval_2_truncate_number
results:
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer--\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpjaeeu475_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpcc9gt1ja_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := number / float64(10)\n    decimals := number - int_part *\
    \ float64(10)\n    return int_part\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4os_535t_test.go:16:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075125
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpcc9gt1ja_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + float64(decimals)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprizsf7pn_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprizsf7pn_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmprizsf7pn_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := number / float64(10)\n    decimal_part := number - int_part\
    \ * float64(10)\n    return decimal_part\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpi515ol2i_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpi515ol2i_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimals := number - integer*float64(10)\n\
    \    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp6qrs_3fi_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp6qrs_3fi_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := number / float64(math.Pow10(int(math.Log10(number))))\n \
    \   dec_part := number - int_part * float64(math.Pow10(int(math.Log10(number))))\n\
    \    return dec_part\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhy8h16m_test.go:15:34: undefined: math

    /tmp/tmpmhy8h16m_test.go:16:45: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075161
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := number / float64(10)\n    decimal_part := number - int_part\
    \ * float64(10)\n    return decimal_part\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpi515ol2i_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpi515ol2i_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer--\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpjaeeu475_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer--\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpjaeeu475_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer -= 1\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpaqax_ulj_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpaqax_ulj_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpaqax_ulj_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) / float64(10) + decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpsttawrhj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0.8)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpsttawrhj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0.35)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpsttawrhj_test.go:35: expected '%!s(float64=0)', got '%!s(float64=12.3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer--\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpjaeeu475_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + float64(decimals)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprizsf7pn_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprizsf7pn_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmprizsf7pn_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpu7ch7uzw_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer--\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpjaeeu475_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + float64(decimals)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprizsf7pn_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprizsf7pn_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmprizsf7pn_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := number / float64(math.Pow10(math.Floor(math.Log10(number))))\n\
    \    decimals := number - int_part * float64(math.Pow10(math.Floor(math.Log10(number))))\n\
    \    return int_part + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9iygwtij_test.go:15:34: undefined: math

    /tmp/tmp9iygwtij_test.go:16:45: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075125
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := number / float64(math.Pow10(math.Floor(math.Log10(number))))\n\
    \    decimal := number - int_part * float64(math.Pow10(math.Floor(math.Log10(number))))\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvyh0dek_test.go:15:34: undefined: math

    /tmp/tmplvyh0dek_test.go:16:44: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075161
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpcc9gt1ja_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal > 0 {\n        return integer\n    }\n    return float64(integer)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfm0fbyv4_test.go:18:16: cannot use integer (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075161
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer--\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpjaeeu475_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal > 0 {\n        return number\n    }\n    return float64(integer)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpdg80z1u4_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpdg80z1u4_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpdg80z1u4_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075162
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpu7ch7uzw_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := number - float64(math.Trunc(number))\n    decimal_part :=\
    \ float64(math.Ceil(float64(int_part) / float64(10)))\n    return decimal_part\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9ml1qwi_test.go:15:34: undefined: math

    /tmp/tmps9ml1qwi_test.go:16:29: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075161
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpcc9gt1ja_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpa8bf68uj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpa8bf68uj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpcc9gt1ja_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpu7ch7uzw_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer--\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpjaeeu475_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpa8bf68uj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer -= 1\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpaqax_ulj_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpaqax_ulj_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpaqax_ulj_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimals := number - integer*float64(10)\n\
    \    return integer + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpbxr9sv79_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0.35)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpbxr9sv79_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0.125)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpbxr9sv79_test.go:35: expected '%!s(float64=0)', got '%!s(float64=12.3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075162
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := number / float64(10)\n    decimal_part := number - int_part\
    \ * float64(10)\n    return decimal_part\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpi515ol2i_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpi515ol2i_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpu7ch7uzw_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpu7ch7uzw_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimals := number - integer*float64(10)\n\
    \    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp6qrs_3fi_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp6qrs_3fi_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part, decimals := math.Modf(number)\n    return float64(int_part)\
    \ / float64(decimals)\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp84268wdd_test.go:15:27: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075161
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + float64(decimals) / 2\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp006c8u6__test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.25)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp006c8u6__test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.125)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp006c8u6__test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075162
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimals := number - integer*float64(10)\n\
    \    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp6qrs_3fi_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp6qrs_3fi_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer * float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpf69alime_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpf69alime_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimals := number - integer*float64(10)\n\
    \    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp6qrs_3fi_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp6qrs_3fi_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpa8bf68uj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer--\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpjaeeu475_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimals := number - integer*float64(10)\n\
    \    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp6qrs_3fi_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp6qrs_3fi_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer * float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpf69alime_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpf69alime_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer * float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpf69alime_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpf69alime_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimals := number - integer * float64(10)\n\
    \    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeyxmnylh_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeyxmnylh_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075162
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer * float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpf69alime_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpf69alime_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimals := number - integer*float64(10)\n\
    \    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp6qrs_3fi_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp6qrs_3fi_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpcc9gt1ja_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimals := number - integer*float64(10)\n\
    \    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp6qrs_3fi_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp6qrs_3fi_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimals := number - integer*float64(10)\n\
    \    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp6qrs_3fi_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp6qrs_3fi_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + float64(decimals)/2\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp1qj7g5tt_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.25)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp1qj7g5tt_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.125)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp1qj7g5tt_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpcc9gt1ja_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpcc9gt1ja_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpa8bf68uj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer--\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpjaeeu475_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpa8bf68uj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + float64(decimal)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpa8bf68uj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpa8bf68uj_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - float64(integer)\
    \ * float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprwz7hh9y_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprwz7hh9y_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + float64(decimals)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprizsf7pn_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprizsf7pn_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmprizsf7pn_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpu7ch7uzw_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + float64(decimals)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprizsf7pn_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprizsf7pn_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmprizsf7pn_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer * float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpf69alime_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpf69alime_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer)*10 + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpu7ch7uzw_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpu7ch7uzw_test.go:35: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimals := number - integer*float64(10)\n\
    \    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp6qrs_3fi_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp6qrs_3fi_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := number / float64(10)\n    decimal_part := number - int_part\
    \ * float64(10)\n    return decimal_part\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpi515ol2i_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpi515ol2i_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer--\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpjaeeu475_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp9alovtcr_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp9alovtcr_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n        integer--\n    }\n    return\
    \ float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n\
    \  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpjaeeu475_test.go:39:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpjaeeu475_test.go:39: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimal := number - float64(integer)\n  \
    \  if decimal < 0 {\n        decimal = 0\n    }\n    return float64(integer) +\
    \ decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpez952_2w_test.go:38:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpez952_2w_test.go:38: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := int(number)\n    decimals := number - float64(integer)\n \
    \   return float64(integer) + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpeq08_5cm_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpeq08_5cm_test.go:35: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer := number / float64(10)\n    decimal := number - integer*float64(10)\n\
    \    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpylguoicj_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpylguoicj_test.go:35:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075126
