language: go_test.go
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf100rp92_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf100rp92_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := make([]string, 0)\n    for\
    \ _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n       \
    \     result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}, \"john\"), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgo1fnfwq_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := make([]string, 0)\n    for\
    \ _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n       \
    \     result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}, \"john\"), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgo1fnfwq_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf100rp92_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := make([]string, 0)\n    for\
    \ _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n       \
    \     result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}, \"john\"), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgo1fnfwq_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf100rp92_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf100rp92_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf100rp92_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.HasPrefix(s, prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp399g21dj_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg52bjtd__test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0)\n   \
    \ for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n   \
    \         filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxorkadm_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := make([]string, 0)\n    for\
    \ _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n       \
    \     result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}, \"john\"), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgo1fnfwq_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sxeqokv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
