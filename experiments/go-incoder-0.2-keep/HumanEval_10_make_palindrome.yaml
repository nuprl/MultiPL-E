name: HumanEval_10_make_palindrome
language: go_test.go
prompt: "package make_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome('')\n// ''\n// >>> make_palindrome('cat')\n\
  // 'catac'\n// >>> make_palindrome('cata')\n// 'catac'\nfunc make_palindrome(myString\
  \ string) string {\n"
tests: "func TestMake_Palindrome(t *testing.T) {\n  candidate := make_palindrome\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     {\
  \ actual: candidate(\"x\"), expected: \"x\" },\n     { actual: candidate(\"xyz\"\
  ), expected: \"xyzyx\" },\n     { actual: candidate(\"xyx\"), expected: \"xyx\"\
  \ },\n     { actual: candidate(\"jerry\"), expected: \"jerryrrej\" },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    for i := 0; i < len(myString); i++ {\n   \
    \     longestPalindrome += myString[i]\n    }\n    longestPalindrome = longestPalindrome[:len(longestPalindrome)-1]\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    longestPalindrome = longestPalindrome +\
    \ string([]rune(longestPalindrome)[len(longestPalindrome)-1:])\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        longestPalindromeLength = 0\n    \
    \    longestPalindrome = myString\n        for j := 0; j < len(myString); j++\
    \ {\n            if myString[j] != myString[len(myString)-1-j] {\n           \
    \     longestPalindromeLength++\n                longestPalindrome = myString[:j+1]\
    \ + myString[len(myString)-1-j:]\n                break\n            }\n     \
    \   }\n        if longestPalindromeLength > longestPalindromeLength {\n      \
    \      longestPalindrome = myString[:i+1] + myString[len(myString)-1-i:len(myString)]\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        postfix := myString[longestPalindromeLen:]\
    \ + myString[:i]\n        postfix := append(postfix, myString[len(myString) -\
    \ i - 1])\n        postfix := append(postfix, myString[len(myString) - i - 1])\n\
    \        postfix := append(postfix, myString[len(myString) - i - 1])\n       \
    \ postfix := append(postfix, myString[len(myString) - i - 1])\n        postfix\
    \ := append(postfix, myString[len(myString) - i - 1])\n        postfix := append(postfix,\
    \ myString[len(myString) - i - 1])\n        postfix := append(postfix, myString[len(myString)\
    \ - i - 1])\n        postfix := append(postfix, myString[len(myString) - i - 1])\n\
    \        postfix := append(postfix, myString[len(myString) - i - 1])\n       \
    \ postfix := append(postfix, myString[len(myString) - i - 1])\n        postfix\
    \ := append(postfix, myString[len(myString) - i - 1])\n        postfix := append(postfix,\
    \ myString[len(myString) - i - 1])\n        postfix := append(postfix, myString[len(myString)\
    \ - i - 1])\n        postfix := append(postfix, myString[len(myString) - i - 1])\n\
    \        postfix := append(postfix, myString[len(myString) - i - 1])\n       \
    \ postfix := append(postfix, myString[len(myString) - i - 1])\n        postfix\
    \ := append(postfix, myString[len(myString) - i - 1])\n        postfix := append(postfix,\
    \ myString[len(myString) - i - 1])\n        postfix := append(postfix, myString[len(myString)\
    \ - i - 1])\n        postfix := append(postfix, myString[len(myString) - i - 1])\n\
    \        postfix := append(postfix, myString", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n\
    \        prefix := myString[:i]\n        suffix := myString[i+1:]\n        if\
    \ isPalindrome(prefix, suffix) {\n            longestPalindrome = prefix + suffix\n\
    \            longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n\
    \    return longestPalindrome\n}\n", "    // Find longest postfix of myString\
    \ that is a palindrome.\n    // The longest postfix is found by reversing all\
    \ characters before it.\n    // The longest postfix is found by reversing all\
    \ characters before it.\n    // >>> make_palindrome('cat')\n    // 'catac'\n \
    \   // >>> make_palindrome('cata')\n    // 'catac'\n    longestPalindrome := \"\
    \"\n    for i := len(myString) - 1; i >= 0; i-- {\n        longestPalindrome +=\
    \ myString[i]\n    }\n    longestPalindrome += myString[len(myString)-1:]\n  \
    \  // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    // >>> make_palindrome('cat')\n    // 'catac'\n\
    \    // >>> make_palindrome('cata')\n    // 'catac'\n    return longestPalindrome\n\
    }\n", "    // Find longest postfix of myString that is a palindrome.\n    // This\
    \ will be the longest palindrome that begins with myString.\n    // The longest\
    \ postfix is found by reversing myString and finding the\n    // longest prefix\
    \ that comes before myString that is a palindrome.\n    // The longest prefix\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix of myString that is a palindrome is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString that is a palindrome is found by finding the longest prefix of myString\
    \ that is a palindrome.\n    // The longest prefix of myString that is a palindrome\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix of myString that is a palindrome is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString that is a palindrome is found by finding the longest prefix of myString\
    \ that is a palindrome.\n    // The longest prefix of myString that is a palindrome\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix of myString that is a palindrome is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString that is a palindrome is found by finding the longest prefix of myString\
    \ that is a palindrome.\n    // The longest prefix of myString that is a palindrome\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix of myString that is a palindrome is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString that is a palindrome is found by finding the longest prefix of myString\
    \ that is a palindrome.\n    // The longest prefix of myString that is a palindrome\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix of myString that is a palindrome is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString ", "    longestPalindrome := \"\"\n    longestPalindromeLength :=\
    \ 0\n    longestPalindromeLength := len(myString)\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        longestPalindrome += myString[i]\n    }\n    for i := 0; i <\
    \ longestPalindromeLength; i++ {\n        longestPalindrome += myString[len(myString)-(i+1)]\n\
    \    }\n    return longestPalindrome\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \            longestPalindromeLen = len(postfix)\n        }\n    }\n\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    prefix := myString[:longestPalindromeLen]\n    suffix := myString[longestPalindromeLen:]\n\
    \    return prefix + reverse(suffix)\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    // Algorithm idea is simple:\n  \
    \  // - Find the longest postfix of supplied string that is a palindrome.\n  \
    \  // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n \
    \       postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfi",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >=\
    \ 0; i-- {\n        thisChar := myString[i]\n        thisLen := 1\n        for\
    \ j := 0; j < i; j++ {\n            if thisChar == myString[j] {\n           \
    \     thisLen++\n            } else {\n                break\n            }\n\
    \        }\n        if thisLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString[0:i]\n            longestPalindromeLen = thisLen\n        }\n   \
    \ }\n    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    thisLen := len(myString)\n    for i := 0;\
    \ i < longestPalindromeLen; i++ {\n        thisChar := myString[thisLen-i]\n \
    \       thisLen -= 1\n        if thisLen > 0 {\n            thisChar = myString[thisLen]\n\
    \            thisLen++\n        }\n        myString = myString + thisChar\n  \
    \  }\n    return myString\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        ", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        postfix := myString[longestPalindromeLen:i]\n        postfix += myString[:longestPalindromeLen]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindrom", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    var longestPalindrome string = \"\"\n    var longestPalindromeLen\
    \ int = 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ += 1\n        longestPalindrome += myString[i]\n    }\n    \n    // Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    var reversedString string = \"\"\n    for i := 0; i < longestPalindromeLen;\
    \ i++ {\n        reversedString += myString[len(myString)-(i+1)]\n    }\n    \n\
    \    // Return the palindrome string.\n    return reversedString + longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen := 0\n        for\
    \ j := 0; j < i; j++ {\n            if myString[j] != myString[len(myString)-j-1]\
    \ {\n                longestPalindromeLen += 1\n            }\n        }\n   \
    \     if longestPalindromeLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString\n        }\n    }\n    return longestPalindrome\n}\n", "    // Initialize\
    \ a variable to store the longest postfix of myString\n    var longestPostfix\
    \ string\n    // Initialize a variable to store the reverse of myString\n    var\
    \ reverseOfMyString string\n    // Initialize a variable to store the length of\
    \ the longest postfix of myString\n    var longestPostfixLength int\n    // Initialize\
    \ a variable to store the length of the reverse of myString\n    var reverseOfMyStringLength\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength2 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength2\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength3 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength3\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength4 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength4\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength5 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength5\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength6 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength6\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength7 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength7\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength8 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength8\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength9 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength9\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength10 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength10\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength11 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString", "    // Find longest postfix\
    \ of myString that is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \            longestPalindromeLen = len(postfix)\n        }\n    }\n\n    // Append\
    \ the reverse of the string prefix that comes before the palindromic suffix.\n\
    \    prefix := myString[:longestPalindromeLen]\n    return prefix + longestPalindrome\n\
    }\n", "    // Find longest postfix of myString that is a palindrome.\n    // This\
    \ will be the longest palindrome that starts with myString.\n    // The longest\
    \ palindrome is one that ends with myString and begins with myString's reverse.\n\
    \    // This algorithm is O(n).\n    // The longest palindrome is one that ends\
    \ with myString and begins with myString's reverse.\n    // This algorithm is\
    \ O(n).\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n        reverse\
    \ := myString[len(postfix):]\n        if myString[len(postfix)] != myString[len(reverse)]\
    \ {\n            longestPalindrome = \"\"\n            longestPalindromeLen =\
    \ 0\n            break\n        }\n        longestPalindrome = append(longestPalindrome,\
    \ postfix)\n        longestPalindromeLen = len(longestPalindrome)\n    }\n   \
    \ // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    // This algorithm is O(n).\n    longestPalindrome\
    \ = append(longestPalindrome, myString[len(longestPalindrome):]...)\n    // Return\
    \ longest palindrome that starts with myString.\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome += myString[:i]\n        longestPalindrome +=\
    \ myString[len(myString) - i:len(myString)]\n    }\n    longestPalindromeLen -=\
    \ len(myString)\n    longestPalindrome += myString\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen\
    \ += len(myString)\n    for i := 0; i < len(myString); i++ {\n        prefix :=\
    \ myString[:i]\n        suffix := myString[i:]\n        if suffix == reverse(prefix)\
    \ {\n            longestPalindrome = prefix + suffix\n            longestPalindromeLen\
    \ += len(longestPalindrome)\n        }\n    }\n    return longestPalindrome\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
