name: HumanEval_10_make_palindrome
language: go_test.go
prompt: "package make_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome('')\n// ''\n// >>> make_palindrome('cat')\n\
  // 'catac'\n// >>> make_palindrome('cata')\n// 'catac'\nfunc make_palindrome(myString\
  \ string) string {\n"
tests: "func TestMake_Palindrome(t *testing.T) {\n  candidate := make_palindrome\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     {\
  \ actual: candidate(\"x\"), expected: \"x\" },\n     { actual: candidate(\"xyz\"\
  ), expected: \"xyzyx\" },\n     { actual: candidate(\"xyx\"), expected: \"xyx\"\
  \ },\n     { actual: candidate(\"jerry\"), expected: \"jerryrrej\" },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    for i := 0; i < len(myString); i++ {\n   \
    \     longestPalindrome += myString[i]\n    }\n    longestPalindrome = longestPalindrome[:len(longestPalindrome)-1]\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    longestPalindrome = longestPalindrome +\
    \ string([]rune(longestPalindrome)[len(longestPalindrome)-1:])\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        longestPalindromeLength = 0\n    \
    \    longestPalindrome = myString\n        for j := 0; j < len(myString); j++\
    \ {\n            if myString[j] != myString[len(myString)-1-j] {\n           \
    \     longestPalindromeLength++\n                longestPalindrome = myString[:j+1]\
    \ + myString[len(myString)-1-j:]\n                break\n            }\n     \
    \   }\n        if longestPalindromeLength > longestPalindromeLength {\n      \
    \      longestPalindrome = myString[:i+1] + myString[len(myString)-1-i:len(myString)]\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        postfix := myString[longestPalindromeLen:]\
    \ + myString[:i]\n        postfix := append(postfix, myString[len(myString) -\
    \ i - 1])\n        postfix := append(postfix, myString[len(myString) - i - 1])\n\
    \        postfix := append(postfix, myString[len(myString) - i - 1])\n       \
    \ postfix := append(postfix, myString[len(myString) - i - 1])\n        postfix\
    \ := append(postfix, myString[len(myString) - i - 1])\n        postfix := append(postfix,\
    \ myString[len(myString) - i - 1])\n        postfix := append(postfix, myString[len(myString)\
    \ - i - 1])\n        postfix := append(postfix, myString[len(myString) - i - 1])\n\
    \        postfix := append(postfix, myString[len(myString) - i - 1])\n       \
    \ postfix := append(postfix, myString[len(myString) - i - 1])\n        postfix\
    \ := append(postfix, myString[len(myString) - i - 1])\n        postfix := append(postfix,\
    \ myString[len(myString) - i - 1])\n        postfix := append(postfix, myString[len(myString)\
    \ - i - 1])\n        postfix := append(postfix, myString[len(myString) - i - 1])\n\
    \        postfix := append(postfix, myString[len(myString) - i - 1])\n       \
    \ postfix := append(postfix, myString[len(myString) - i - 1])\n        postfix\
    \ := append(postfix, myString[len(myString) - i - 1])\n        postfix := append(postfix,\
    \ myString[len(myString) - i - 1])\n        postfix := append(postfix, myString[len(myString)\
    \ - i - 1])\n        postfix := append(postfix, myString[len(myString) - i - 1])\n\
    \        postfix := append(postfix, myString", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n\
    \        prefix := myString[:i]\n        suffix := myString[i+1:]\n        if\
    \ isPalindrome(prefix, suffix) {\n            longestPalindrome = prefix + suffix\n\
    \            longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n\
    \    return longestPalindrome\n}\n", "    // Find longest postfix of myString\
    \ that is a palindrome.\n    // The longest postfix is found by reversing all\
    \ characters before it.\n    // The longest postfix is found by reversing all\
    \ characters before it.\n    // >>> make_palindrome('cat')\n    // 'catac'\n \
    \   // >>> make_palindrome('cata')\n    // 'catac'\n    longestPalindrome := \"\
    \"\n    for i := len(myString) - 1; i >= 0; i-- {\n        longestPalindrome +=\
    \ myString[i]\n    }\n    longestPalindrome += myString[len(myString)-1:]\n  \
    \  // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    // >>> make_palindrome('cat')\n    // 'catac'\n\
    \    // >>> make_palindrome('cata')\n    // 'catac'\n    return longestPalindrome\n\
    }\n", "    // Find longest postfix of myString that is a palindrome.\n    // This\
    \ will be the longest palindrome that begins with myString.\n    // The longest\
    \ postfix is found by reversing myString and finding the\n    // longest prefix\
    \ that comes before myString that is a palindrome.\n    // The longest prefix\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix of myString that is a palindrome is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString that is a palindrome is found by finding the longest prefix of myString\
    \ that is a palindrome.\n    // The longest prefix of myString that is a palindrome\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix of myString that is a palindrome is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString that is a palindrome is found by finding the longest prefix of myString\
    \ that is a palindrome.\n    // The longest prefix of myString that is a palindrome\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix of myString that is a palindrome is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString that is a palindrome is found by finding the longest prefix of myString\
    \ that is a palindrome.\n    // The longest prefix of myString that is a palindrome\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix of myString that is a palindrome is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString that is a palindrome is found by finding the longest prefix of myString\
    \ that is a palindrome.\n    // The longest prefix of myString that is a palindrome\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix of myString that is a palindrome is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString ", "    longestPalindrome := \"\"\n    longestPalindromeLength :=\
    \ 0\n    longestPalindromeLength := len(myString)\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        longestPalindrome += myString[i]\n    }\n    for i := 0; i <\
    \ longestPalindromeLength; i++ {\n        longestPalindrome += myString[len(myString)-(i+1)]\n\
    \    }\n    return longestPalindrome\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \            longestPalindromeLen = len(postfix)\n        }\n    }\n\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    prefix := myString[:longestPalindromeLen]\n    suffix := myString[longestPalindromeLen:]\n\
    \    return prefix + reverse(suffix)\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    // Algorithm idea is simple:\n  \
    \  // - Find the longest postfix of supplied string that is a palindrome.\n  \
    \  // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n \
    \       postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-len(postfix)]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-len(postfix):]...)\n        postfix := append(postfi",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >=\
    \ 0; i-- {\n        thisChar := myString[i]\n        thisLen := 1\n        for\
    \ j := 0; j < i; j++ {\n            if thisChar == myString[j] {\n           \
    \     thisLen++\n            } else {\n                break\n            }\n\
    \        }\n        if thisLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString[0:i]\n            longestPalindromeLen = thisLen\n        }\n   \
    \ }\n    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    thisLen := len(myString)\n    for i := 0;\
    \ i < longestPalindromeLen; i++ {\n        thisChar := myString[thisLen-i]\n \
    \       thisLen -= 1\n        if thisLen > 0 {\n            thisChar = myString[thisLen]\n\
    \            thisLen++\n        }\n        myString = myString + thisChar\n  \
    \  }\n    return myString\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        postfix += myString[longestPalindromeLen:i]\n\
    \        postfix += myString[longestPalindromeLen:i]\n        ", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        postfix := myString[longestPalindromeLen:i]\n        postfix += myString[:longestPalindromeLen]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindrom", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    var longestPalindrome string = \"\"\n    var longestPalindromeLen\
    \ int = 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ += 1\n        longestPalindrome += myString[i]\n    }\n    \n    // Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    var reversedString string = \"\"\n    for i := 0; i < longestPalindromeLen;\
    \ i++ {\n        reversedString += myString[len(myString)-(i+1)]\n    }\n    \n\
    \    // Return the palindrome string.\n    return reversedString + longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen := 0\n        for\
    \ j := 0; j < i; j++ {\n            if myString[j] != myString[len(myString)-j-1]\
    \ {\n                longestPalindromeLen += 1\n            }\n        }\n   \
    \     if longestPalindromeLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString\n        }\n    }\n    return longestPalindrome\n}\n", "    // Initialize\
    \ a variable to store the longest postfix of myString\n    var longestPostfix\
    \ string\n    // Initialize a variable to store the reverse of myString\n    var\
    \ reverseOfMyString string\n    // Initialize a variable to store the length of\
    \ the longest postfix of myString\n    var longestPostfixLength int\n    // Initialize\
    \ a variable to store the length of the reverse of myString\n    var reverseOfMyStringLength\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength2 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength2\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength3 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength3\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength4 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength4\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength5 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength5\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength6 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength6\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength7 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength7\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength8 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength8\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength9 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength9\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength10 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString\n    var reverseOfMyStringLength10\
    \ int\n    // Initialize a variable to store the length of the longest postfix\
    \ of myString\n    var longestPostfixLength11 int\n    // Initialize a variable\
    \ to store the length of the reverse of myString", "    // Find longest postfix\
    \ of myString that is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \            longestPalindromeLen = len(postfix)\n        }\n    }\n\n    // Append\
    \ the reverse of the string prefix that comes before the palindromic suffix.\n\
    \    prefix := myString[:longestPalindromeLen]\n    return prefix + longestPalindrome\n\
    }\n", "    // Find longest postfix of myString that is a palindrome.\n    // This\
    \ will be the longest palindrome that starts with myString.\n    // The longest\
    \ palindrome is one that ends with myString and begins with myString's reverse.\n\
    \    // This algorithm is O(n).\n    // The longest palindrome is one that ends\
    \ with myString and begins with myString's reverse.\n    // This algorithm is\
    \ O(n).\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n        reverse\
    \ := myString[len(postfix):]\n        if myString[len(postfix)] != myString[len(reverse)]\
    \ {\n            longestPalindrome = \"\"\n            longestPalindromeLen =\
    \ 0\n            break\n        }\n        longestPalindrome = append(longestPalindrome,\
    \ postfix)\n        longestPalindromeLen = len(longestPalindrome)\n    }\n   \
    \ // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    // This algorithm is O(n).\n    longestPalindrome\
    \ = append(longestPalindrome, myString[len(longestPalindrome):]...)\n    // Return\
    \ longest palindrome that starts with myString.\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome += myString[:i]\n        longestPalindrome +=\
    \ myString[len(myString) - i:len(myString)]\n    }\n    longestPalindromeLen -=\
    \ len(myString)\n    longestPalindrome += myString\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen\
    \ += len(myString)\n    for i := 0; i < len(myString); i++ {\n        prefix :=\
    \ myString[:i]\n        suffix := myString[i:]\n        if suffix == reverse(prefix)\
    \ {\n            longestPalindrome = prefix + suffix\n            longestPalindromeLen\
    \ += len(longestPalindrome)\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        postfix := myString[longestPalindromeLen:]\
    \ + myString[:longestPalindromeLen]\n        if postfix != make_palindrome(postfix)\
    \ {\n            longestPalindrome = \"\"\n            longestPalindromeLen =\
    \ 0\n        }\n        longestPalindrome += myString[i]\n        longestPalindromeLen++\n\
    \    }\n    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n \
    \   longestPalindromeLength := 0\n    for i := 0; i < len(myString); i++ {\n \
    \       postfix := myString[i:]\n        postfix += myString[:i]\n        postfix\
    \ += myString[i:] + myString[:i]\n        postfix += myString[:i] + myString[i:]\n\
    \        postfix += myString[:i] + myString[i:] + myString[:i]\n        postfix\
    \ += myString[:i] + myString[i:] + myString[:i] + myString[i:]\n        postfix\
    \ += myString[:i] + myString[i:] + myString[:i] + myString[i:] + myString[:i]\n\
    \        postfix += myString[:i] + myString[i:] + myString[:i] + myString[i:]\
    \ + myString[:i] + myString[i:]\n        postfix += myString[:i] + myString[i:]\
    \ + myString[:i] + myString[i:] + myString[:i] + myString[i:] + myString[:i]\n\
    \        postfix += myString[:i] + myString[i:] + myString[:i] + myString[i:]\
    \ + myString[:i] + myString[i:] + myString[:i] + myString[i:]\n        postfix\
    \ += myString[:i] + myString[i:] + myString[:i] + myString[i:] + myString[:i]\
    \ + myString[i:] + myString[:i] + myString[i:] + myString[:i]\n        postfix\
    \ += myString[:i] + myString[i:] + myString[:i] + myString[i:] + myString[:i]\
    \ + myString[i:] + myString[:i] + myString[i:] + myString[:i] + myString[i:]\n\
    \        postfix += myString[:i] + myString[i:] + myString[:i] + myString[i:]\
    \ + myString[:i] + myString[i:] + myString[:i] + myString[i:] + myString[:i] +\
    \ myString[i:] + myString[:i]\n        postfix += myString[:i] + myString[i:]\
    \ + myString[:i] + myString[i:] + myString[:i] + myString[i:] + myString[:i] +\
    \ myString[i:] + myString[:i] + myString[i:] + myString[:i] + myString[i:]\n \
    \       postfix += myString[:i] + myString[i:] + myString[:i] + ", "    // Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // Algorithm\
    \ idea is simple:\n    // - Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    longestPalindrome := \"\"\n    for i := len(myString)\
    \ - 1; i >= 0; i-- {\n        longestPalindrome += myString[i]\n    }\n    \n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    longestPalindrome += myString[len(longestPalindrome):]\n\
    \    \n    // Return the result.\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen := len(myString)\n\
    \    for i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome +=\
    \ myString[i]\n    }\n    for i := 0; i < longestPalindromeLen; i++ {\n      \
    \  longestPalindrome += myString[len(myString)-i-1]\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    var longestPalindrome string = \"\"\n    for i := 0; i\
    \ < len(myString); i++ {\n        longestPalindrome += myString[i]\n    }\n  \
    \  \n    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    for i := 0; i < len(longestPalindrome);\
    \ i++ {\n        if myString[len(myString)-len(longestPalindrome)+i] != longestPalindrome[i]\
    \ {\n            longestPalindrome += myString[len(myString)-len(longestPalindrome)+i][len(myString)-len(longestPalindrome)-i:]\n\
    \        }\n    }\n    \n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        prefix := myString[:i]\n        suffix := myString[i+1:]\n      \
    \  postfix := longestPalindrome[:longestPalindromeLen]\n        longestPalindromeLen\
    \ += len(postfix)\n        if suffix == postfix {\n            longestPalindrome\
    \ = prefix + postfix\n        }\n    }\n    return longestPalindrome\n}\n", " \
    \   longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    for i :=\
    \ 0; i < len(myString); i++ {\n        postfix := myString[i:]\n        postfix\
    \ += myString[:i]\n        postfix += myString[i:len(myString)]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)-1]\n        postfix +=\
    \ myString[len(myString)-len(postfix)-1:len(myString)]\n        postfix += myString[:len(myString)-len(postfix)-2]\n\
    \        postfix += myString[len(myString)-len(postfix)-2:len(myString)]\n   \
    \     postfix += myString[:len(myString)-len(postfix)-3]\n        postfix += myString[len(myString)-len(postfix)-3:len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)-4]\n        postfix +=\
    \ myString[len(myString)-len(postfix)-4:len(myString)]\n        postfix += myString[:len(myString)-len(postfix)-5]\n\
    \        postfix += myString[len(myString)-len(postfix)-5:len(myString)]\n   \
    \     postfix += myString[:len(myString)-len(postfix)-6]\n        postfix += myString[len(myString)-len(postfix)-6:len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)-7]\n        postfix +=\
    \ myString[len(myString)-len(postfix)-7:len(myString)]\n        postfix += myString[:len(myString)-len(postfix)-8]\n\
    \        postfix += myString[len(myString)-len(postfix)-8:len(myString)]\n   \
    \     postfix += myString[:len(myString)-len(postfix)-9]\n        postfix += myString[len(myString)-len(postfix)-9:len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)-10]\n        postfix\
    \ += myString[len(myString)-len(postfix)-10:len(myString)]\n        postfix +=\
    \ myString[:len(my", "    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen :=\
    \ 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \            longestPalindromeLen = len(postfix)\n        }\n    }\n\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    prefix := myString[:longestPalindromeLen]\n    reversedPrefix :=\
    \ append(prefix, reverse(prefix)...)\n    return reversedPrefix + longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    for\
    \ i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n \
    \       postfix += reverseString(myString[:i])\n        if postfix != myString\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLength\
    \ = i + 1\n        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >=\
    \ 0; i-- {\n        prefix := myString[:i]\n        postfix := myString[i:]\n\
    \        if isPalindrome(prefix, postfix) {\n            longestPalindrome = prefix\
    \ + longestPalindrome\n            longestPalindromeLen = len(longestPalindrome)\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        prefix := myString[:i]\n        suffix := myString[i:]\n        longestPalindromeLen\
    \ := len(longestPalindrome)\n        longestPalindrome = longestPalindrome + suffix\n\
    \        if longestPalindrome == prefix {\n            longestPalindrome = longestPalindrome[:longestPalindromeLen]\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        postfix += string(myString[len(myString)-i-1:])\n        if isPalindrome(postfix)\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    prefix :=\
    \ myString[:longestPalindromeLen]\n    prefix += string(myString[longestPalindromeLen-1:])\n\
    \    return prefix + longestPalindrome\n}\n", "    var myStringLen int = len(myString)\n\
    \    var myStringPrefix string\n    var myStringSuffix string\n    var myStringReversedSuffix\
    \ string\n    var myStringReversedPrefix string\n    var myStringReversedString\
    \ string\n\n    for i := 0; i < myStringLen; i++ {\n        myStringPrefix = myString[:i]\n\
    \        myStringSuffix = myString[i:]\n        myStringReversedSuffix = myStringSuffix[::-1]\n\
    \        myStringReversedPrefix = myStringPrefix[::-1]\n        myStringReversedString\
    \ = myStringReversedPrefix + myStringReversedSuffix\n        if myStringReversedString\
    \ == myString {\n            return myString\n        }\n    }\n    return \"\"\
    \n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome += myString[i : i+longestPalindromeLen]\n   \
    \ }\n    longestPalindromeLen += len(myString) - longestPalindromeLen\n    longestPalindrome\
    \ += myString[len(myString) - longestPalindromeLen : len(myString)]\n    return\
    \ longestPalindrome\n}\n", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \            longestPalindromeLen = len(postfix)\n        }\n    }\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    prefix := myString[:longestPalindromeLen]\n    return prefix +\
    \ append([]rune(longestPalindrome)..., 'x')\n}\n", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen := 0\n\
    \        for j := 0; j < i; j++ {\n            if myString[j] != myString[len(myString)-j-1]\
    \ {\n                longestPalindromeLen += 1\n            }\n        }\n   \
    \     if longestPalindromeLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString\n        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLength := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindromeLength++\n        longestPalindrome += myString[i]\n\
    \    }\n    for i := 0; i < longestPalindromeLength; i++ {\n        longestPalindrome\
    \ += myString[len(myString)-1-i]\n    }\n    return longestPalindrome\n}\n", " \
    \   // Find longest postfix of myString that is a palindrome.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n\
    \        suffix := myString[i+1:]\n        longestPalindromeLen := len(longestPalindrome)\n\
    \        longestPalindrome += suffix\n        if longestPalindrome == prefix {\n\
    \            longestPalindromeLen += 1\n            longestPalindrome = suffix\n\
    \        }\n    }\n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    return\
    \ myString + strings.Repeat(string(myString[len(longestPalindrome):]), longestPalindromeLen)\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n        postfix\
    \ += myString[:i]\n        postfix += myString[:i+1]\n        postfix += myString[:i+2]\n\
    \        postfix += myString[:i+3]\n        postfix += myString[:i+4]\n      \
    \  postfix += myString[:i+5]\n        postfix += myString[:i+6]\n        postfix\
    \ += myString[:i+7]\n        postfix += myString[:i+8]\n        postfix += myString[:i+9]\n\
    \        postfix += myString[:i+10]\n        postfix += myString[:i+11]\n    \
    \    postfix += myString[:i+12]\n        postfix += myString[:i+13]\n        postfix\
    \ += myString[:i+14]\n        postfix += myString[:i+15]\n        postfix += myString[:i+16]\n\
    \        postfix += myString[:i+17]\n        postfix += myString[:i+18]\n    \
    \    postfix += myString[:i+19]\n        postfix += myString[:i+20]\n        postfix\
    \ += myString[:i+21]\n        postfix += myString[:i+22]\n        postfix += myString[:i+23]\n\
    \        postfix += myString[:i+24]\n        postfix += myString[:i+25]\n    \
    \    postfix += myString[:i+26]\n        postfix += myString[:i+27]\n        postfix\
    \ += myString[:i+28]\n        postfix += myString[:i+29]\n        postfix += myString[:i+30]\n\
    \        postfix += myString[:i+31]\n        postfix += myString[:i+32]\n    \
    \    postfix += myString[:i+33]\n        postfix += myString[:i+34]\n        postfix\
    \ += myString[:i+35]\n        postfix += myString[:i+36]\n        postfix += myString[:i+37]\n\
    \        postfix += myString[:i+38]\n        postfix += myString[:i+39]\n    \
    \    postfix += myString[:i+40]\n        postfix += myString[:i+41]\n        postfix\
    \ += myString[:i+42]\n        postfix += myString[:i+43]\n", "    // Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // Algorithm idea\
    \ is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    var longestPalindrome string\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindrome += myString[i]\n    }\n    \n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    for i := 0; i < len(longestPalindrome); i++ {\n        myString\
    \ += string(myString[len(longestPalindrome)-i-1:len(myString)])\n    }\n    \n\
    \    return myString\n}\n", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = longestPalindrome\
    \ + postfix\n            longestPalindromeLen = len(longestPalindrome)\n     \
    \   }\n    }\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    longestPalindrome = longestPalindrome\
    \ + myString[:longestPalindromeLen]\n    return longestPalindrome\n}\n", "   \
    \ longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen\
    \ := len(myString)\n    for i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome\
    \ += myString[i]\n    }\n    for i := 0; i < longestPalindromeLen; i++ {\n   \
    \     longestPalindrome += myString[len(myString)-i-1]\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindrom", "    // Find longest postfix\
    \ of myString that is a palindrome\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n\
    \        postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, ", "    // Find longest\
    \ postfix of myString that is a palindrome.\n    longestPalindrome := \"\"\n \
    \   longestPalindromeLen := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n\
    \        prefix := myString[:i]\n        postfix := myString[i+1:]\n        if\
    \ isPalindrome(prefix, postfix) {\n            longestPalindrome = prefix + longestPalindrome\n\
    \            longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    suffix := myString[:longestPalindromeLen]\n\
    \    return longestPalindrome + suffix\n}\n", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n\
    \        prefix := myString[:i]\n        suffix := myString[i:]\n        postfix\
    \ := reversePostfix(prefix)\n        if postfix != suffix {\n            longestPalindrome\
    \ = prefix + postfix\n            longestPalindromeLen = len(longestPalindrome)\n\
    \        }\n    }\n    if longestPalindromeLen > 0 {\n        return longestPalindrome\
    \ + reversePostfix(myString[:longestPalindromeLen])\n    }\n    return \"\"\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n      \
    \  postfix := myString[i:]\n        postfix += strings.Reverse(prefix)\n     \
    \   postfix += postfix\n        postfix += strings.Reverse(postfix)\n        if\
    \ postfix != prefix {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        longestPalindromeLen += len(myString) - i\n        longestPalindrome\
    \ += myString[i : i+longestPalindromeLen]\n    }\n    longestPalindrome += myString[len(myString)\
    \ - longestPalindromeLen : len(myString)]\n    return longestPalindrome\n}\n",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i\
    \ < len(myString); i++ {\n        longestPalindromeLen := 0\n        for j :=\
    \ 0; j < i; j++ {\n            if myString[j] != myString[len(myString)-j-1] {\n\
    \                longestPalindromeLen += 1\n            }\n        }\n       \
    \ if longestPalindromeLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString[:i]\n            longestPalindromeLen = i\n        }\n    }\n   \
    \ return longestPalindrome + myString[len(longestPalindrome):]\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLength := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindromeLength = 0\n        for j := 0; j < i; j++ {\n\
    \            if myString[j] != myString[len(myString)-j-1] {\n               \
    \ longestPalindromeLength++\n            }\n        }\n        if longestPalindromeLength\
    \ > longestPalindromeLength {\n            longestPalindrome = myString[:i+longestPalindromeLength]\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen += 1 //\
    \ Increment the length of the longest palindrome so far.\n        longestPalindrome\
    \ += myString[i]\n    }\n    longestPalindromeLen -= 1 // Decrement the length\
    \ of the longest palindrome to account for the last character.\n    longestPalindrome\
    \ += myString[len(myString)-longestPalindromeLen:]\n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    longestPalindrome = longestPalindrome[0 : len(longestPalindrome)-longestPalindromeLen]\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        suffix := myString[i+1:]\n        postfix := reverse(prefix)\n      \
    \  if suffix == postfix {\n            longestPalindrome = prefix + postfix\n\
    \            longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n\
    \    if longestPalindromeLen == 0 {\n        return \"\"\n    }\n    return longestPalindrome\
    \ + myString[:longestPalindromeLen]\n}\n", "    // Find longest postfix of myString\
    \ that is a palindrome.\n    // The longest postfix is always one character longer\
    \ than the original string.\n    longestPostfix := \"\"\n    longestPostfixLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[:i+1]\n\
    \        postfix += myString[len(myString)-i-1:]\n        if postfix != myString\
    \ {\n            postfix += myString[len(myString)-i-1:]\n        }\n        if\
    \ postfix != myString {\n            postfix += myString[:i+1]\n        }\n  \
    \      if postfix != myString {\n            postfix += myString[len(myString)-i-1:]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[:i+1]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[len(myString)-i-1:]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[:i+1]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[len(myString)-i-1:]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[:i+1]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[len(myString)-i-1:]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[:i+1]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[len(myString)-i-1:]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[:i+1]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[len(myString)-i-1:]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[:i+1]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[len(myString)-i-1:]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[:i+1]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[len(myString)-i-1:]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[:i+1]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[len(myString)-i-1:]\n\
    \        }\n        if postfix != myString {\n            postfix += myString[:i+1]\n\
    \        }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString)\
    \ - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n        postfix += string(myString[len(myString)-i-1:])\n\
    \        if postfix != make_palindrome(postfix) {\n            longestPalindrome\
    \ = postfix\n            longestPalindromeLen = len(postfix)\n        }\n    }\n\
    \    if longestPalindromeLen > 1 {\n        // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n     \
    \   prefix := myString[:longestPalindromeLen-1]\n        postfix := myString[longestPalindromeLen-1:]\n\
    \        return prefix + string(append([]rune(postfix), reverse(prefix)...)...)\n\
    \    }\n    return myString\n}\n", "    // Initialize our result string\n    var\
    \ result string\n\n    // Find the longest postfix of supplied string that is\
    \ a palindrome\n    longestPalindrome := findLongestPalindrome(myString)\n\n \
    \   // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    result += myString[len(longestPalindrome):]\n \
    \   result += myString[:len(longestPalindrome)]\n\n    // Return the result\n\
    \    return result\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n\
    \        suffix := myString[i+1:]\n        postfix := reverseString(prefix)\n\
    \        if suffix == postfix {\n            longestPalindrome = prefix + postfix\n\
    \            longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n\
    \    return longestPalindrome\n}\n", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // - Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindrom", " \
    \   longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        longestPalindromeLen := longestPalindromeLen\
    \ + 1\n        longestPalindrome += myString[i]\n    }\n    longestPalindromeLen\
    \ -= 1 // Remove last character from longest palindrome\n    longestPalindrome\
    \ = longestPalindrome[0 : longestPalindromeLen]\n    longestPalindrome = longestPalindrome\
    \ + make_palindrome(myString[longestPalindromeLen:])\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindrom", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n \
    \       postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-i:]...)\n        postfix := append(postfix, myString[len(myString)-i:len(myString)-i+1]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+1:]...)\n       \
    \ postfix := append(postfix, myString[len(myString)-i+1:len(myString)-i+2]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+2:len(myString)-i+3]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+3:len(myString)-i+4]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+4:len(myString)-i+5]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+5:len(myString)-i+6]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+6:len(myString)-i+7]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+7:len(myString)-i+8]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+8:len(myString)-i+9]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+9:len(myString)-i+10]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+10:len(myString)-i+11]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+11:len(myString)-i+12]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i+12:len(myString)-i+13]",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i\
    \ < len(myString); i++ {\n        longestPalindromeLen += len(myString) - i\n\
    \        longestPalindrome += myString[:i+1]\n        longestPalindrome += myString[len(myString)\
    \ - longestPalindromeLen:]\n    }\n    return longestPalindrome\n}\n", "    var\
    \ myStringLen int = len(myString)\n    var myStringPrefix string\n    var myStringSuffix\
    \ string\n    var myStringReversedSuffix string\n    var myStringReversedPrefix\
    \ string\n    var myStringReversedString string\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReverse", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ := 0\n        longestPalindrome += myString[i]\n        for j := i; j < len(myString);\
    \ j++ {\n            if myString[j] != myString[len(myString)-1-j] {\n       \
    \         longestPalindromeLen += 1\n                break\n            }\n  \
    \      }\n        if longestPalindromeLen > longestPalindromeLen {\n         \
    \   longestPalindrome = myString[:i]\n            longestPalindromeLen = longestPalindromeLen\
    \ - i\n        }\n    }\n    return longestPalindrome + myString[len(longestPalindrome):]\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindrom", "    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        longestPalindromeLen += len(myString) - i\n        longestPalindrome\
    \ += myString[:i]\n        longestPalindrome += myString[len(myString) - i:]\n\
    \    }\n    longestPalindrome += myString\n    longestPalindromeLen += len(myString)\n\
    \    longestPalindrome = longestPalindrome[:longestPalindromeLen]\n    return\
    \ longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ += len(myString) - i\n        longestPalindrome += myString[i : i+longestPalindromeLen]\n\
    \    }\n    longestPalindromeLen += len(myString) - longestPalindromeLen\n   \
    \ longestPalindrome += myString[len(myString) - longestPalindromeLen : len(myString)]\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ += len(myString) - i\n        longestPalindrome += myString[:i]\n        longestPalindrome\
    \ += myString[len(myString)-i:]\n    }\n    longestPalindromeLen -= len(myString)\n\
    \    longestPalindrome += myString\n    for i := 0; i < longestPalindromeLen;\
    \ i++ {\n        longestPalindrome += myString[len(myString)-i]\n    }\n    return\
    \ longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    longestPalindromeLengthPalindrome := 0\n    longestPalindromeLengthPalindromePalindrome\
    \ := 0\n    longestPalindromeLengthPalindromePalindromePalindrome := 0\n    longestPalindromeLengthPalindromePalindromePalindromePalindrome\
    \ := 0\n    longestPalindromeLengthPalindromePalindromePalindromePalindromePalindrome\
    \ := 0\n    longestPalindromeLengthPalindromePalindromePalindromePalindromePalindromePalindrome\
    \ := 0\n    longestPalindromeLengthPalindromePalindromePalindromePalindromePalindromePalindromePalindrome\
    \ := 0\n    longestPalindromeLengthPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome\
    \ := 0\n    longestPalindromeLengthPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome\
    \ := 0\n    longestPalindromeLengthPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome\
    \ := 0\n    longestPalindromeLengthPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome\
    \ := 0\n    longestPalindromeLengthPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome\
    \ := 0\n    longestPalindromeLengthPalindromePalindromePalindromePalindromeP",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i\
    \ < len(myString); i++ {\n        postfix := myString[i:]\n        prefix := myString[:i]\n\
    \        postfix = append(postfix, reverse(prefix))\n        longestPalindrome\
    \ = append(longestPalindrome, postfix...)\n        longestPalindromeLen = longestPalindromeLen\
    \ + len(postfix)\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        prefix := myString[:i]\n        suffix := myString[i+1:]\n      \
    \  longestPalindromeLen := len(longestPalindrome)\n        longestPalindrome =\
    \ longestPalindrome + string(append(append([]rune(longestPalindrome), []rune(prefix)...),\
    \ []rune(suffix)...))\n    }\n    return longestPalindrome\n}\n", "    // Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // Algorithm\
    \ idea is simple:\n    // - Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n \
    \       postfix += string(myString[len(myString)-i:]) + myString[:i]\n       \
    \ postfix += string(myString[len(myString)-i:]) + myString[:i]\n        postfix\
    \ += string(myString[len(myString)-i:]) + myString[:i]\n        postfix += string(myString[len(myString)-i:])\
    \ + myString[:i]\n        postfix += string(myString[len(myString)-i:]) + myString[:i]\n\
    \        postfix += string(myString[len(myString)-i:]) + myString[:i]\n      \
    \  postfix += string(myString[len(myString)-i:]) + myString[:i]\n        postfix\
    \ += string(myString[len(myString)-i:]) + myString[:i]\n        postfix += string(myString[len(myString)-i:])\
    \ + myString[:i]\n        postfix += string(myString[len(myString)-i:]) + myString[:i]\n\
    \        postfix += string(myString[len(myString)-i:]) + myString[:i]\n      \
    \  postfix += string(myString[len(myString)-i:]) + myString[:i]\n        postfix\
    \ += string(myString[len(myString)-i:]) + myString[:i]\n        postfix += string(myString[len(myString)-i:])\
    \ + myString[:i]\n        postfix += string(myString[len(myString)-i:]) + myString[:i]\n\
    \        postfix += string(myString[len(myString)-i:]) + myString[:i]\n      \
    \  postfix += string(myString[len(myString)-i:]) + myString[:i]\n        postfix\
    \ += string(myString[len(myString)-i:]) + myString[:i]\n        postfix += string(myString[len(myString)-i:])\
    \ + myString[:i]\n        postfix += string(myString[len(myString)-i:]) + myString[:i]\n\
    \        ", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n  \
    \  for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n   \
    \     postfix += myString[:i]\n        postfix += myString[len(myString) - i:]\n\
    \        postfix += myString[:len(myString) - i]\n        postfix += myString[len(myString)\
    \ - i:len(myString)]\n        postfix += myString[:len(myString) - i:len(myString)]\n\
    \        postfix += myString[len(myString) - i:len(myString)]\n        postfix\
    \ += myString[:len(myString) - i:len(myString)]\n        postfix += myString[len(myString)\
    \ - i:len(myString)]\n        postfix += myString[:len(myString) - i:len(myString)]\n\
    \        postfix += myString[len(myString) - i:len(myString)]\n        postfix\
    \ += myString[:len(myString) - i:len(myString)]\n        postfix += myString[len(myString)\
    \ - i:len(myString)]\n        postfix += myString[:len(myString) - i:len(myString)]\n\
    \        postfix += myString[len(myString) - i:len(myString)]\n        postfix\
    \ += myString[:len(myString) - i:len(myString)]\n        postfix += myString[len(myString)\
    \ - i:len(myString)]\n        postfix += myString[:len(myString) - i:len(myString)]\n\
    \        postfix += myString[len(myString) - i:len(myString)]\n        postfix\
    \ += myString[:len(myString) - i:len(myString)]\n        postfix += myString[len(myString)\
    \ - i:len(myString)]\n        postfix += myString[:len(myString) - i:len(myString)]\n\
    \        postfix += myString[len(myString) - i:len(myString)]\n        postfix\
    \ += myString[:len(myString) - i:len(myString)]\n        postfix += myString[len(myString)\
    \ - i:len(myString)]\n        postfix += myString[:len(myString) - i:len(myString)]\n\
    \        postfix += myString[len(myString) - i:len(myString)]\n        postfix\
    \ += myString[:len(myString) - i:len(myString)]\n        postfix += myString[len(myString)\
    \ - i:len(myString)]\n        postfix += myString[:len(myString) - i:len(myString)]\n\
    \        postfix += myString[len(my", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // - Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindrom", " \
    \   // Find the longest postfix of supplied string that is a palindrome.\n   \
    \ longestPalindrome := \"\"\n    for i := len(myString) - 1; i >= 0; i-- {\n \
    \       longestPalindrome += myString[i]\n    }\n    longestPalindrome += myString[len(myString)-1:]\n\
    \    longestPalindrome = reverse(longestPalindrome)\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    result := myString\n    for i := len(longestPalindrome) - 1; i >= 0; i--\
    \ {\n        result += longestPalindrome[i]\n    }\n    return result\n}\n", " \
    \   longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        postfix := myString[longestPalindromeLen:i]\n\
    \        postfix += myString[0:longestPalindromeLen]\n        postfix += myString[i:len(myString)]\n\
    \        postfix += myString[len(myString):len(myString)]\n        postfix +=\
    \ myString[len(myString):0]\n        postfix += myString[0:0]\n        postfix\
    \ += myString[0:1]\n        postfix += myString[1:len(myString)]\n        postfix\
    \ += myString[len(myString):len(myString)]\n        postfix += myString[len(myString):0]\n\
    \        postfix += myString[0:1]\n        postfix += myString[1:len(myString)]\n\
    \        postfix += myString[len(myString):len(myString)]\n        postfix +=\
    \ myString[len(myString):0]\n        postfix += myString[0:1]\n        postfix\
    \ += myString[1:len(myString)]\n        postfix += myString[len(myString):len(myString)]\n\
    \        postfix += myString[len(myString):0]\n        postfix += myString[0:1]\n\
    \        postfix += myString[1:len(myString)]\n        postfix += myString[len(myString):len(myString)]\n\
    \        postfix += myString[len(myString):0]\n        postfix += myString[0:1]\n\
    \        postfix += myString[1:len(myString)]\n        postfix += myString[len(myString):len(myString)]\n\
    \        postfix += myString[len(myString):0]\n        postfix += myString[0:1]\n\
    \        postfix += myString[1:len(myString)]\n        postfix += myString[len(myString):len(myString)]\n\
    \        postfix += myString[len(myString):0]\n        postfix += myString[0:1]\n\
    \        postfix += myString[1:len(myString)]\n        postfix += myString[len(myString):len(myString)]\n\
    \        postfix += myString[len(myString):0]\n        postfix += myString[0:1]\n\
    \        postfix += myString[1:len(myString)]\n        postfix += myString[len(myString):len(myString)]\n\
    \        postfix += myString[len(myString):0]\n        postfix += myString[0:1]\n\
    \        postfix += myString[1:len(my", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        suffix := myString[i+1:]\n        longestPalindromeLen := len(longestPalindrome)\n\
    \        longestPalindrome = longestPalindrome + suffix\n        if longestPalindrome\
    \ == prefix {\n            longestPalindrome = longestPalindrome[:longestPalindromeLen]\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n \
    \       reversedPostfix := myString[len(postfix):]\n        if myString[i] ==\
    \ reversedPostfix[len(reversedPostfix)-1] {\n            longestPalindrome = postfix\
    \ + reversedPostfix\n            longestPalindromeLen = len(postfix)\n       \
    \ }\n    }\n    return longestPalindrome\n}\n", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindrom", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    var longestPalindrome string\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindrome += myString[i]\n    }\n    \n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    longestPalindrome += myString[len(myString)-len(longestPalindrome):]\n\
    \    \n    // Return the result.\n    return longestPalindrome\n}\n", "    var\
    \ myStringLen int = len(myString)\n    var myStringPrefix string\n    var myStringSuffix\
    \ string\n    var myStringReversedSuffix string\n    var myStringReversedPrefix\
    \ string\n\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    for i := 0; i < myStringLen; i++ {\n        myStringPrefix = myString[:i]\n\
    \        myStringSuffix = myString[i:]\n        myStringReversedSuffix = myStringSuffix[:len(myStringSuffix)/2:]\n\
    \        myStringReversedPrefix = myStringPrefix[len(myStringPrefix)-len(myStringReversedSuffix):]\n\
    \        if myStringSuffix == myStringReversedSuffix {\n            return myStringPrefix\
    \ + myStringReversedPrefix\n        }\n    }\n    return \"\"\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        postfix := myString[i:]\n        prefix := myString[:i]\n       \
    \ postfix += make_palindrome_reverse(prefix)\n        if postfix != \"\" {\n \
    \           longestPalindrome = postfix\n            longestPalindromeLen = len(postfix)\n\
    \        }\n    }\n    if longestPalindromeLen > 0 {\n        return longestPalindrome\
    \ + myString[:longestPalindromeLen]\n    } else {\n        return myString\n \
    \   }\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n \
    \   for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        postfix += myString[i+1:]\n        if postfix != make_palindrome(postfix)\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    return longestPalindrome + string(myString[:longestPalindromeLen])\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        postfix := myString[longestPalindromeLen:]\
    \ + myString[:i]\n        longestPalindromeLen += len(postfix)\n        if isPalindrome(postfix)\
    \ {\n            longestPalindrome = postfix\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n      \
    \  postfix := myString[i+1:]\n        postfix += string(Reverse(prefix))\n   \
    \     if postfix != prefix {\n            longestPalindrome = postfix\n      \
    \      longestPalindromeLen = len(postfix)\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString)\
    \ - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n        if isPalindrome(postfix)\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    prefix :=\
    \ myString[:longestPalindromeLen]\n    suffix := myString[longestPalindromeLen:]\n\
    \    return prefix + reverseString(suffix) + longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen := len(myString)\n\
    \    for i := 0; i < longestPalindromeLen; i++ {\n        prefix := myString[:i]\n\
    \        suffix := myString[i+1:]\n        if suffix == reverse(prefix) {\n  \
    \          longestPalindrome = prefix + suffix\n            longestPalindromeLen\
    \ = i\n        }\n    }\n    return longestPalindrome\n}\n", "    // Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // Algorithm idea\
    \ is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n \
    \       postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-i:len(myString)]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-i]...)\n        postfix := append(postfix, myString[len(myString)-i:len(myString)]...)\n\
    \        postfix := append(postfix, myString[:len(myString)-i]...)\n        postfix\
    \ := append(postfix, myString[len(myString)-i:len(myString)]...)\n        postfix\
    \ := append(postfix, myString[:len(myString)-i]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-i:len(myString)]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-i]...)\n        postfix := append(postfix, myString[len(myString)-i:len(myString)]...)\n\
    \        postfix := append(postfix, myString[:len(myString)-i]...)\n        postfix\
    \ := append(postfix, myString[len(myString)-i:len(myString)]...)\n        postfix\
    \ := append(postfix, myString[:len(myString)-i]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-i:len(myString)]...)\n        postfix := append(postfix,\
    \ myString[:len(myString)-i]...)\n        postfix := append(postfix, myString[len(myString)-i:len(myString)]...)\n\
    \        postfix := append(postfix, myString[:len(myString)-i]...)\n        postfix\
    \ := append(postfix, myString[len(myString)-i:len(myString)]...)\n        postfix\
    \ := append(postfix, myString[:len(myString)", "    // Find longest postfix of\
    \ myString that is a palindrome.\n    // This will be the length of the palindrome\
    \ plus one.\n    longestPalindrome := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        longestPalindrome = longestPalindrome + 1\n        if myString[len(myString)-i-1]\
    \ != myString[len(myString)-i-longestPalindrome] {\n            break\n      \
    \  }\n    }\n\n    // Append the reverse of the string prefix that comes before\
    \ the palindromic suffix.\n    // This will be the length of the palindrome minus\
    \ one.\n    longestPalindrome = longestPalindrome - 1\n\n    // Append the palindrome\
    \ suffix.\n    // This will be the length of the palindrome plus one.\n    longestPalindrome\
    \ = longestPalindrome + 1\n\n    // Append the palindrome prefix.\n    // This\
    \ will be the length of the palindrome minus one.\n    longestPalindrome = longestPalindrome\
    \ - 1\n\n    // Append the palindrome prefix.\n    // This will be the length\
    \ of the palindrome minus one.\n    longestPalindrome = longestPalindrome - 1\n\
    \n    // Append the palindrome prefix.\n    // This will be the length of the\
    \ palindrome minus one.\n    longestPalindrome = longestPalindrome - 1\n\n   \
    \ // Append the palindrome prefix.\n    // This will be the length of the palindrome\
    \ minus one.\n    longestPalindrome = longestPalindrome - 1\n\n    // Append the\
    \ palindrome prefix.\n    // This will be the length of the palindrome minus one.\n\
    \    longestPalindrome = longestPalindrome - 1\n\n    // Append the palindrome\
    \ prefix.\n    // This will be the length of the palindrome minus one.\n    longestPalindrome\
    \ = longestPalindrome - 1\n\n    // Append the palindrome prefix.\n    // This\
    \ will be the length of the palindrome minus one.\n    longestPalindrome = longestPalindrome\
    \ - 1\n\n    // Append the palindrome prefix.\n    // This will be the length\
    \ of the palindrome minus one.\n    longestPalindrome = longestPalindrome - 1\n\
    \n    // Append the palindrome prefix.\n    // This will be the length of the\
    \ palindrome minus one.\n    longestPalindrome = longestPalindrome - 1\n\n   \
    \ // Append the palindrome prefix.\n    // This will be the length of the ", " \
    \   longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        postfix := myString[i:]\n        reversedPostfix\
    \ := myString[:i] + myString[i+1:]\n        if postfix != reversedPostfix {\n\
    \            longestPalindrome = longestPalindrome[:longestPalindromeLen] + postfix\n\
    \            longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ := 0\n        longestPalindrome += myString[i]\n        for j := 0; j < i; j++\
    \ {\n            if myString[j] != myString[len(myString)-j-1] {\n           \
    \     longestPalindromeLen += 1\n            }\n        }\n        if longestPalindromeLen\
    \ > longestPalindromeLen {\n            longestPalindrome = myString[:i]\n   \
    \         longestPalindromeLen = i\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n      \
    \  suffix := myString[i+1:]\n        if isPalindrome(prefix, suffix) {\n     \
    \       longestPalindrome = prefix + suffix\n            longestPalindromeLen\
    \ = len(longestPalindrome)\n        }\n    }\n    return longestPalindrome\n}\n",
  "    // Find longest postfix of myString that is a palindrome.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // The longest postfix is found by reversing a prefix of myString\
    \ that comes before a palindromic suffix.\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >=\
    \ 0; i-- {\n        prefix := myString[:i]\n        suffix := myString[i+1:]\n\
    \        longestPalindromeLen := len(longestPalindrome)\n        if longestPalindromeLen\
    \ > len(prefix) + len(suffix) {\n            longestPalindrome = prefix\n    \
    \        longestPalindromeLen = len(prefix)\n        }\n        if longestPalindromeLen\
    \ > len(suffix) {\n            longestPalindrome += suffix\n            longestPalindromeLen\
    \ = len(suffix)\n        }\n    }\n    return longestPalindrome\n}\n", "    //\
    \ Find the longest postfix of supplied string that is a palindrome.\n    // Algorithm\
    \ idea is simple:\n    // - Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen := 0\n\
    \        for j := 0; j < len(myString); j++ {\n            if myString[i] == myString[j]\
    \ {\n                longestPalindromeLen += 1\n            }\n        }\n   \
    \     if longestPalindromeLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString\n            longestPalindromeLen = longestPalindromeLen\n      \
    \  }\n    }\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    return longestPalindrome + string(myString[len(longestPalindrome):])\
    \ + string(myString[:len(longestPalindrome)])\n}\n", "    longestPalindrome :=\
    \ \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        postfix := myString[:i]\n        postfix += myString[len(myString)-i:]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-i]\n        postfix +=\
    \ myString[len(myString)-len(postfix)-len(postfix):]\n        postfix += myString[:len(myString)-len(postfix)-len(postfix)-i]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-len(postfix)-i]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-i]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += my", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLength\
    \ = 0\n        for j := 0; j < len(myString); j++ {\n            if myString[i]\
    \ == myString[j] {\n                longestPalindromeLength += 1\n           \
    \ }\n        }\n        if longestPalindromeLength > longestPalindromeLength {\n\
    \            longestPalindrome = myString\n            longestPalindromeLength\
    \ = longestPalindromeLength\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n \
    \       postfix += myString[len(myString)-i:]\n        postfix += myString[:len(myString)-i]\n\
    \        postfix += myString[len(myString)-len(postfix):]\n        postfix +=\
    \ myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen\
    \ := len(myString)\n    for i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome\
    \ += myString[i]\n    }\n    for i := 0; i < longestPalindromeLen; i++ {\n   \
    \     longestPalindrome += myString[len(myString)-(i+1)]\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString)\
    \ - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n        if isPalindrome(postfix)\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    suffix :=\
    \ myString[longestPalindromeLen:]\n    return longestPalindrome + suffix\n}\n",
  "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        postfix := myString[i : len(myString)-i]\n\
    \        postfix := append(postfix, postfix[len(postfix)-1:])\n        postfix\
    \ := append(postfix, postfix[:len(postfix)-1])\n        if postfix != myString\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLength\
    \ = len(postfix)\n        }\n    }\n    if longestPalindromeLength < len(myString)\
    \ {\n        longestPalindrome = append(myString[len(myString)-longestPalindromeLength:len(myString)],\
    \ longestPalindrome)\n    }\n    return longestPalindrome\n}\n", "    var myStringLen\
    \ int = len(myString)\n    var myStringPrefix string\n    var myStringSuffix string\n\
    \    var myStringReverse string\n    var myStringPalindrome string\n\n    // Find\
    \ the longest postfix of supplied string that is a palindrome.\n    for i := 0;\
    \ i < myStringLen; i++ {\n        myStringPrefix = myString[:i]\n        myStringSuffix\
    \ = myString[i:]\n        myStringReverse = reverse(myStringPrefix)\n        if\
    \ myStringSuffix == myStringReverse {\n            myStringPalindrome = myStringPrefix\
    \ + myStringSuffix\n            break\n        }\n    }\n    return myStringPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome += myString[i : i+longestPalindromeLen]\n   \
    \ }\n    longestPalindromeLen -= len(myString)\n    longestPalindrome += myString[0\
    \ : longestPalindromeLen]\n    return longestPalindrome\n}\n", "    // Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // Algorithm idea\
    \ is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen +=\
    \ len(myString) - i\n        if myString[len(myString)-i] == myString[len(myString)-(i+1)]\
    \ {\n            longestPalindrome = myString[:len(myString)-(i+1)] + longestPalindrome\n\
    \        }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    longestPalindrome = longestPalindrome\
    \ + myString[len(myString)-longestPalindromeLen:]\n    \n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    longestPalindromeLength\
    \ := len(myString)\n    for i := 0; i < longestPalindromeLength; i++ {\n     \
    \   prefix := myString[0:i]\n        suffix := myString[i+1:]\n        postfix\
    \ := reverseString(prefix)\n        if suffix == postfix {\n            longestPalindrome\
    \ = prefix + postfix\n            longestPalindromeLength = len(longestPalindrome)\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        longestPalindromeLen := 0\n        longestPalindrome += myString[i]\n\
    \        for j := i; j < len(myString); j++ {\n            if myString[j] != myString[len(myString)-j-1]\
    \ {\n                longestPalindromeLen += 1\n            }\n        }\n   \
    \     if longestPalindromeLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString[:i]\n            longestPalindromeLen = longestPalindromeLen - i\n\
    \        }\n    }\n    return longestPalindrome + myString[len(longestPalindrome):]\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n        prefix\
    \ := myString[:i]\n        postfix += make_palindrome_recursive(prefix, postfix)\n\
    \        if len(postfix) > longestPalindromeLen {\n            longestPalindrome\
    \ = postfix\n            longestPalindromeLen = len(postfix)\n        }\n    }\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString); i >= 0; i-- {\n        prefix := myString[:i]\n\
    \        suffix := myString[i:]\n        if isPalindrome(prefix, suffix) {\n \
    \           longestPalindrome = prefix + suffix\n            longestPalindromeLen\
    \ = len(longestPalindrome)\n        }\n    }\n    return longestPalindrome\n}\n",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        postfix := myString[i:]\n        postfix := append(postfix, postfix[len(postfix)-len(longestPalindrome):]...)\n\
    \        postfix := append(postfix, myString[:i]...)\n        if isPalindrome(postfix)\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    prefix :=\
    \ myString[:longestPalindromeLen]\n    prefix := append(prefix, longestPalindrome...)\n\
    \    prefix := append(prefix, myString[len(myString)-len(prefix):]...)\n    return\
    \ prefix\n}\n", "    // Find the longest postfix of supplied string that is a\
    \ palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        postfix := myString[i:]\n        postfix := append(postfix, myString[:i]...)\n\
    \        postfix := append(postfix, myString[len(myString)-i:]...)\n        postfix\
    \ := append(postfix, myString[len(myString)-i:len(myString)-(i+1)]...)\n     \
    \   postfix := append(postfix, myString[len(myString)-(i+1):]...)\n        postfix\
    \ := append(postfix, myString[len(myString)-(i+1):len(myString)-(i+2)]...)\n \
    \       postfix := append(postfix, myString[len(myString)-(i+2):len(myString)-(i+3)]...)\n\
    \        postfix := append(postfix, myString[len(myString)-(i+3):]...)\n     \
    \   postfix := append(postfix, myString[len(myString)-(i+3):len(myString)-(i+4)]...)\n\
    \        postfix := append(postfix, myString[len(myString)-(i+4):]...)\n     \
    \   postfix := append(postfix, myString[len(myString)-(i+4):len(myString)-(i+5)]...)\n\
    \        postfix := append(postfix, myString[len(myString)-(i+5):]...)\n     \
    \   postfix := append(postfix, myString[len(myString)-(i+5):len(myString)-(i+6)]...)\n\
    \        postfix := append(postfix, myString[len(myString)-(i+6):]...)\n     \
    \   postfix := append(postfix, myString[len(myString)-(i+6):len(myString)-(i+7)]...)\n\
    \        postfix := append(postfix, myString[len(myString)-(i+7):]...)\n     \
    \   postfix := append(postfix, myString[len(myString)-(i+7):len(myString)-(i+8)]...)",
  "    // Find longest postfix of myString that is a palindrome.\n    // This will\
    \ be the prefix of the palindromic suffix.\n    // The longest postfix is found\
    \ by iterating over myString backwards.\n    // The longest postfix is found by\
    \ iterating over myString backwards.\n    // The longest postfix is found by iterating\
    \ over myString backwards.\n    // The longest postfix is found by iterating over\
    \ myString backwards.\n    // The longest postfix is found by iterating over myString\
    \ backwards.\n    // The longest postfix is found by iterating over myString backwards.\n\
    \    // The longest postfix is found by iterating over myString backwards.\n \
    \   // The longest postfix is found by iterating over myString backwards.\n  \
    \  // The longest postfix is found by iterating over myString backwards.\n   \
    \ // The longest postfix is found by iterating over myString backwards.\n    //\
    \ The longest postfix is found by iterating over myString backwards.\n    // The\
    \ longest postfix is found by iterating over myString backwards.\n    // The longest\
    \ postfix is found by iterating over myString backwards.\n    // The longest postfix\
    \ is found by iterating over myString backwards.\n    // The longest postfix is\
    \ found by iterating over myString backwards.\n    // The longest postfix is found\
    \ by iterating over myString backwards.\n    // The longest postfix is found by\
    \ iterating over myString backwards.\n    // The longest postfix is found by iterating\
    \ over myString backwards.\n    // The longest postfix is found by iterating over\
    \ myString backwards.\n    // The longest postfix is found by iterating over myString\
    \ backwards.\n    // The longest postfix is found by iterating over myString backwards.\n\
    \    // The longest postfix is found by iterating over myString backwards.\n \
    \   // The longest postfix is found by iterating over myString backwards.\n  \
    \  // The longest postfix is found by iterating over myString backwards.\n   \
    \ // The longest postfix is found by iterating over myString backwards.\n    //\
    \ The longest postfix is found by iterating over myString backwards.\n    // The\
    \ longest postfix is found by iterating over myString backwards.\n    // The longest\
    \ postfix is found by iterating over myString backwards.\n    // The longest postfix ",
  "    var myStringLen int = len(myString)\n    var myStringPrefix string\n    var\
    \ myStringSuffix string\n    var myStringPrefixLen int\n    var myStringSuffixLen\
    \ int\n    var myStringReversedLen int\n    var myStringReversedPrefix string\n\
    \    var myStringReversedSuffix string\n    var myStringReversedPrefixLen int\n\
    \    var myStringReversedSuffixLen int\n    var myStringReversedReversedLen int\n\
    \    var myStringReversedReversedPrefix string\n    var myStringReversedReversedSuffix\
    \ string\n    var myStringReversedReversedPrefixLen int\n    var myStringReversedReversedSuffixLen\
    \ int\n    var myStringReversedReversedReversedLen int\n\n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    for myStringLen = myStringLen\
    \ - 1; myStringLen >= 0; myStringLen-- {\n        myStringPrefix = myString[0:myStringLen]\n\
    \        myStringSuffixLen = len(myString) - myStringLen + 1\n        myStringSuffixLen\
    \ = myStringLen - myStringLen + 1\n        myStringReversedLen = myStringLen +\
    \ 1\n        myStringReversedPrefix = myString[0:myStringLen]\n        myStringReversedSuffixLen\
    \ = len(myString) - myStringLen + 1\n        myStringReversedSuffixLen = myStringLen\
    \ - myStringLen + 1\n        myStringReversedReversedLen = myStringLen + 1\n \
    \       myStringReversedReversedPrefix = myString[0:myStringLen]\n        myStringReversedReversedSuffixLen\
    \ = len(myString) - myStringLen + 1\n        myStringReversedReversedSuffixLen\
    \ = myStringLen - myStringLen + 1\n        myStringReversedReversedReversedLen\
    \ = myStringLen + 1\n\n        // If postfix is a palindrome then append the reverse\
    \ of the postfix to the end of the string.\n        if myStringLen == 0 {\n  \
    \          return myString\n        }\n        if myStringLen == 1 {\n       \
    \     return myStringPrefix + myStringSuffix\n        }\n        if myStringLen\
    \ == myStringLen / 2 {\n            return myStringPrefix + myStringSuffix + myStringReversedPrefix\
    \ + myStringReversedSuffix\n        }\n        if myStringLen > myStringLen /\
    \ 2 {\n            return myStringPrefix + myStringSuffix + myStringReversedPrefix\
    \ + myStringReversedSuffix + myStringReversedReversedPrefix + myStringReversedReversedSuffix\n\
    \        }\n    }\n    return myString\n}\n", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n   \
    \     postfix := myString[:i]\n        postfix += myString[len(myString)-i:]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):]\n        postfix +=\
    \ myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):]\n        postfix +=\
    \ myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):]\n        postfix +=\
    \ myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):]\n        postfix +=\
    \ myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):]\n        postfix +=\
    \ myString[:len(myString)-len(", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ := 0\n        for j := 0; j < len(myString); j++ {\n            if myString[i]\
    \ == myString[j] {\n                longestPalindromeLen += 1\n            }\n\
    \        }\n        if longestPalindromeLen > longestPalindromeLen {\n       \
    \     longestPalindrome = myString\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find longest postfix of myString that is a palindrome.\n    // This\
    \ will be the longest palindrome that begins with myString.\n    // The longest\
    \ postfix is found by reversing myString and finding the\n    // longest palindrome\
    \ that begins with myString + the reverse of myString.\n    // The longest palindrome\
    \ is found by reversing myString and finding the\n    // longest palindrome that\
    \ begins with myString + the reverse of myString + the reverse of myString.\n\
    \    // The longest palindrome is found by reversing myString and finding the\n\
    \    // longest palindrome that begins with myString + the reverse of myString\
    \ + the reverse of myString + the reverse of myString.\n    // The longest palindrome\
    \ is found by reversing myString and finding the\n    // longest palindrome that\
    \ begins with myString + the reverse of myString + the reverse of myString + the\
    \ reverse of myString + the reverse of myString.\n    // The longest palindrome\
    \ is found by reversing myString and finding the\n    // longest palindrome that\
    \ begins with myString + the reverse of myString + the reverse of myString + the\
    \ reverse of myString + the reverse of myString + the reverse of myString.\n \
    \   // The longest palindrome is found by reversing myString and finding the\n\
    \    // longest palindrome that begins with myString + the reverse of myString\
    \ + the reverse of myString + the reverse of myString + the reverse of myString\
    \ + the reverse of myString + the reverse of myString.\n    // The longest palindrome\
    \ is found by reversing myString and finding the\n    // longest palindrome that\
    \ begins with myString + the reverse of myString + the reverse of myString + the\
    \ reverse of myString + the reverse of myString + the reverse of myString + the\
    \ reverse of myString + the reverse of myString.\n    // The longest palindrome\
    \ is found by reversing myString and finding the\n    // longest palindrome that\
    \ begins with myString + the reverse of myString + the reverse of myString + the\
    \ reverse of myString + the reverse of myString + the reverse of myString + the\
    \ reverse of myString + the reverse of myString + the reverse of myString.\n \
    \   // The longest palindrome is foun", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ := 0\n        longestPalindrome += myString[i]\n        for j := i; j < len(myString);\
    \ j++ {\n            if myString[j] != myString[len(myString)-j-1] {\n       \
    \         longestPalindromeLen += 1\n            }\n        }\n        if longestPalindromeLen\
    \ > longestPalindromeLen {\n            longestPalindrome = myString[:i]\n   \
    \         longestPalindromeLen = longestPalindromeLen - i\n        }\n    }\n\
    \    return longestPalindrome + myString[len(longestPalindrome):]\n}\n", "   \
    \ longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromePos\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        currString := myString[:i]\n\
    \        currStringLen := len(currString)\n        currStringPos := i\n      \
    \  if currStringLen > longestPalindromeLen {\n            longestPalindrome =\
    \ currString\n            longestPalindromeLen = currStringLen\n            longestPalindromePos\
    \ = currStringPos\n        }\n    }\n    longestPalindrome = longestPalindrome[:longestPalindromePos]\
    \ + make_palindrome(myString[longestPalindromePos:])\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome += myString[i : i+longestPalindromeLen]\n   \
    \ }\n    longestPalindromeLen -= len(myString)\n    longestPalindrome += myString[len(myString)\
    \ - longestPalindromeLen : len(myString)]\n    return longestPalindrome\n}\n",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i\
    \ < len(myString); i++ {\n        longestPalindromeLen := 0\n        for j :=\
    \ 0; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n \
    \               longestPalindromeLen += 1\n            }\n        }\n        if\
    \ longestPalindromeLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString[:longestPalindromeLen]\n        }\n    }\n    return longestPalindrome\
    \ + myString[len(longestPalindrome):]\n}\n", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLength :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[0:i]\n\
    \        postfix += myString[len(myString)-i:]\n        if isPalindrome(postfix)\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLength\
    \ = len(postfix)\n        }\n    }\n    if longestPalindromeLength == 0 {\n  \
    \      return \"\"\n    }\n    // Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    prefix := myString[0:longestPalindromeLength]\n\
    \    prefix += myString[longestPalindromeLength:]\n    return prefix + longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen\
    \ += len(myString)\n    for i := 0; i < len(myString); i++ {\n        prefix :=\
    \ myString[:i]\n        suffix := myString[i:]\n        postfix := reversePostfix(prefix)\n\
    \        postfix += suffix\n        postfix += reversePostfix(suffix)\n      \
    \  postfix += reversePostfix(prefix)\n        if postfix != \"\" {\n         \
    \   longestPalindrome = postfix\n            longestPalindromeLen = len(postfix)\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[0 :\
    \ len(myString)-i]\n        postfix += myString[len(myString)-i : len(myString)]\n\
    \        postfix += myString[len(myString)-i : len(myString)-i]\n        postfix\
    \ += myString[len(myString)-i : len(myString)-i]\n        postfix += myString[len(myString)-i\
    \ : len(myString)-i]\n        postfix += myString[len(myString)-i : len(myString)-i]\n\
    \        postfix += myString[len(myString)-i : len(myString)-i]\n        postfix\
    \ += myString[len(myString)-i : len(myString)-i]\n        postfix += myString[len(myString)-i\
    \ : len(myString)-i]\n        postfix += myString[len(myString)-i : len(myString)-i]\n\
    \        postfix += myString[len(myString)-i : len(myString)-i]\n        postfix\
    \ += myString[len(myString)-i : len(myString)-i]\n        postfix += myString[len(myString)-i\
    \ : len(myString)-i]\n        postfix += myString[len(myString)-i : len(myString)-i]\n\
    \        postfix += myString[len(myString)-i : len(myString)-i]\n        postfix\
    \ += myString[len(myString)-i : len(myString)-i]\n        postfix += myString[len(myString)-i\
    \ : len(myString)-i]\n        postfix += myString[len(myString)-i : len(myString)-i]\n\
    \        postfix += myString[len(myString)-i : len(myString)-i]\n        postfix\
    \ += myString[len(myString)-i : len(myString)-i]\n        postfix += myString[len(myString)-i\
    \ : len(myString)-i]", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n\
    \        postfix := myString[i+1:]\n        if isPalindrome(prefix, postfix) {\n\
    \            longestPalindrome = prefix + reverseString(postfix)\n           \
    \ longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n    if longestPalindromeLen\
    \ > 0 {\n        return longestPalindrome\n    } else {\n        return \"\"\n\
    \    }\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen += 1 //\
    \ Increment the length of the longest palindrome found\n        longestPalindrome\
    \ += myString[i]\n    }\n    longestPalindromeLen -= 1 // Decrement the length\
    \ of the longest palindrome found\n    for i := 0; i < longestPalindromeLen; i++\
    \ {\n        longestPalindrome += myString[len(myString)-i-1]\n    }\n    return\
    \ longestPalindrome\n}\n", "    // Find longest postfix of myString that is a\
    \ palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n\
    \        postfix := myString[i:]\n        if isPalindrome(prefix, postfix) {\n\
    \            longestPalindrome = prefix + longestPalindrome\n            longestPalindromeLen\
    \ = len(longestPalindrome)\n        }\n    }\n    // Append the reverse of the\
    \ longest postfix of myString that comes before the palindromic suffix.\n    longestPalindrome\
    \ = longestPalindrome + myString[:longestPalindromeLen]\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n        suffix\
    \ := myString[i:]\n        postfix := make_palindrome_test(suffix)\n        if\
    \ postfix != \"\" {\n            longestPalindrome = prefix + postfix\n      \
    \      longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n    if\
    \ longestPalindromeLen > 0 {\n        return longestPalindrome\n    }\n    return\
    \ \"\"\n}\n", "    // Find longest postfix of myString that is a palindrome.\n\
    \    // This will be the prefix of the palindrome we want.\n    // e.g. 'cat'\
    \ -> 'cata'\n    longestPalindrome := \"\"\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindrome += myString[i]\n    }\n\n    // Reverse the\
    \ prefix of the longest postfix that is a palindrome.\n    // e.g. 'cata' -> 'tac'\n\
    \    longestPalindromeReverse := \"\"\n    for i := 0; i < len(longestPalindrome);\
    \ i++ {\n        longestPalindromeReverse += longestPalindrome[len(longestPalindrome)-i-1]\n\
    \    }\n\n    // Append the reverse of the longest postfix to the end of the supplied\
    \ string.\n    // e.g. 'catac' -> 'catacata'\n    return longestPalindromeReverse\
    \ + myString\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen +=\
    \ len(myString) - i\n        longestPalindrome = myString[:longestPalindromeLen]\
    \ + myString[len(myString) - longestPalindromeLen:]\n        if myString[len(myString)\
    \ - longestPalindromeLen:] == longestPalindrome {\n            return longestPalindrome\n\
    \        }\n    }\n    return \"\"\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    // Algorithm idea is simple:\n  \
    \  // - Find the longest postfix of supplied string that is a palindrome.\n  \
    \  // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindrom", "    // Find longest postfix\
    \ of myString that is a palindrome.\n    // Assume that myString is at least 1\
    \ character long.\n    longestPostfix := \"\"\n    longestPostfixLen := 0\n  \
    \  for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n   \
    \     postfix := append(postfix, myString[:i]...)\n        if isPalindrome(postfix)\
    \ {\n            longestPostfix = postfix\n            longestPostfixLen = len(postfix)\n\
    \        }\n    }\n\n    // Append the reverse of the longest postfix to the end\
    \ of myString.\n    // Assume that myString is at least 1 character long.\n  \
    \  longestPostfixReverse := make([]rune, longestPostfixLen)\n    for i := 0; i\
    \ < len(longestPostfix); i++ {\n        longestPostfixReverse[i] = longestPostfix[len(longestPostfix)-i-1]\n\
    \    }\n    return append(myString, longestPostfixReverse...)\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen := len(myString)\n\
    \    for i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome +=\
    \ myString[i]\n    }\n    for i := 0; i < longestPalindromeLen; i++ {\n      \
    \  longestPalindrome += myString[len(myString)-(i+1)]\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen :=\
    \ 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        longestPalindrome\
    \ = myString[:longestPalindromeLen] + myString[i] + longestPalindrome\n      \
    \  longestPalindromeLen = len(longestPalindrome)\n    }\n    \n    // Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    longestPalindrome = longestPalindrome[:longestPalindromeLen-len(myString)]\
    \ + myString[len(myString):]\n    \n    return longestPalindrome\n}\n", "    var\
    \ myStringLen int = len(myString)\n    var myStringPrefix string\n    var myStringSuffix\
    \ string\n    var myStringReversedSuffix string\n    var myStringReversedPrefix\
    \ string\n    var myStringReversedString string\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReversedStringLen int\n    var myStringReversedStringLen\
    \ int\n    var myStringReverse", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ += len(myString) - i\n        longestPalindrome += myString[i : i+longestPalindromeLen]\n\
    \    }\n    longestPalindromeLen += len(myString) - longestPalindromeLen\n   \
    \ longestPalindrome += myString[len(myString) - longestPalindromeLen : len(myString)]\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n\
    \        suffix := myString[i+1:]\n        if isPalindrome(prefix, suffix) {\n\
    \            longestPalindrome = prefix + suffix\n            longestPalindromeLen\
    \ = len(longestPalindrome)\n        }\n    }\n    return longestPalindrome\n}\n",
  "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    longestPalindromeLength\
    \ := len(myString)\n    for i := 0; i < longestPalindromeLength; i++ {\n     \
    \   longestPalindrome += myString[i]\n    }\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        longestPalindrome += myString[len(myString)-i-1]\n    }\n   \
    \ return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        suffix := myString[i+1:]\n        postfix := reverse(prefix)\n      \
    \  if postfix != suffix {\n            longestPalindrome = append(longestPalindrome,\
    \ postfix)\n            longestPalindromeLength = len(postfix)\n        }\n  \
    \  }\n    return longestPalindrome\n}\n", "    // Find longest postfix of myString\
    \ that is a palindrome.\n    // This will be the prefix of the palindromic suffix.\n\
    \    var longestPalindromeLen int\n    for i := 0; i < len(myString); i++ {\n\
    \        if myString[i] != myString[len(myString)-i-1] {\n            longestPalindromeLen\
    \ = i\n            break\n        }\n    }\n\n    // Append the reverse of the\
    \ string prefix that comes before longestPalindromeLen.\n    // This will be the\
    \ suffix of the palindromic prefix.\n    var reversedString string\n    for i\
    \ := 0; i < longestPalindromeLen; i++ {\n        reversedString += myString[len(myString)-1-i]\n\
    \    }\n\n    // Append the palindromic suffix to the end of the string.\n   \
    \ // This will be the palindromic string.\n    return reversedString + myString[longestPalindromeLen:]\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString)\
    \ - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n        if isPalindrome(postfix)\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    prefix :=\
    \ myString[:longestPalindromeLen]\n    return prefix + reverseString(prefix)\n\
    }\n", "    // Initialize a variable to hold the longest postfix of myString that\
    \ is a palindrome.\n    // Initialize a variable to hold the reverse of the longest\
    \ postfix of myString that is a palindrome.\n    var longestPalindrome string\n\
    \    var longestPalindromeReverse string\n\n    // Iterate through each character\
    \ in myString.\n    for i := 0; i < len(myString); i++ {\n        // Initialize\
    \ a variable to hold the current character in myString.\n        var currentCharacter\
    \ string\n\n        // Iterate through each character in myString.\n        for\
    \ j := 0; j < len(myString); j++ {\n            // If the current character in\
    \ myString is equal to the current character in longestPalindrome,\n         \
    \   // then append the reverse of the longest postfix of myString that is a palindrome.\n\
    \            if myString[i] == myString[j] {\n                currentCharacter\
    \ = currentCharacter + myString[len(myString)-1-j]\n            } else {\n   \
    \             // If the current character in myString is not equal to the current\
    \ character in longestPalindrome,\n                // then append the longest\
    \ postfix of myString that is a palindrome.\n                currentCharacter\
    \ = currentCharacter + myString[j]\n            }\n        }\n\n        // If\
    \ the current character in myString is equal to the current character in longestPalindrome,\n\
    \        // then append the reverse of the longest postfix of myString that is\
    \ a palindrome.\n        if myString[i] == myString[len(myString)-1-i] {\n   \
    \         longestPalindrome = longestPalindrome + currentCharacter\n        }\
    \ else {\n            // If the current character in myString is not equal to\
    \ the current character in longestPalindrome,\n            // then append the\
    \ longest postfix of myString that is a palindrome.\n            longestPalindrome\
    \ = longestPalindrome + currentCharacter\n        }\n    }\n\n    // Append the\
    \ reverse of the longest postfix of myString that is a palindrome.\n    longestPalindromeReverse\
    \ = longestPalindrome + longestPalindromeReverse\n\n    // Return the longest\
    \ postfix of myString that is a palindrome.\n    return longestPalindromeReverse\n\
    }\n", "    var myStringLen int = len(myString)\n    var myStringPrefix string\n\
    \    var myStringSuffix string\n    var myStringReversedSuffix string\n    var\
    \ myStringReversedPrefix string\n    var myStringReversedString string\n\n   \
    \ for i := 0; i < myStringLen; i++ {\n        myStringPrefix = myString[:i]\n\
    \        myStringSuffix = myString[i:]\n        myStringReversedSuffix = reverse(myStringSuffix)\n\
    \        myStringReversedPrefix = reverse(myStringPrefix)\n        myStringReversedString\
    \ = myStringReversedPrefix + myStringReversedSuffix\n        if myStringReversedString\
    \ == myString {\n            return myString\n        }\n    }\n    return \"\"\
    \n}\n", "    // Find longest postfix of myString that is a palindrome.\n    //\
    \ This will be the length of the palindrome plus one.\n    longestPalindrome :=\
    \ 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = i + 1\n \
    \       }\n    }\n\n    // Append the reverse of the string prefix that comes\
    \ before the palindromic suffix.\n    // This will be the length of the palindrome\
    \ plus one.\n    result := myString\n    for i := 0; i < longestPalindrome; i++\
    \ {\n        result = result[:len(result)-1] + myString[len(myString)-(i+1):]\n\
    \    }\n\n    return result\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        suffix := myString[i:]\n        postfix := longestPalindrome[longestPalindromeLen:]\
    \ + suffix\n        longestPalindromeLen += len(postfix)\n        if postfix !=\
    \ prefix {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        prefix := myString[:i]\n        suffix := myString[i+1:]\n      \
    \  longestPalindromeLen := len(longestPalindrome)\n        if longestPalindromeLen\
    \ > len(prefix) + len(suffix) {\n            longestPalindrome = prefix\n    \
    \    }\n        if longestPalindromeLen < len(prefix) + len(suffix) {\n      \
    \      longestPalindrome += suffix\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen := 0\n        longestPalindrome\
    \ += myString[i]\n        for j := i + 1; j < len(myString); j++ {\n         \
    \   if myString[j] != myString[j] {\n                longestPalindromeLen += 1\n\
    \                if longestPalindromeLen > longestPalindromeLen {\n          \
    \          longestPalindrome = myString[:j] + myString[j:]\n                 \
    \   longestPalindromeLen = j\n                }\n                break\n     \
    \       }\n        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        longestPalindromeLen := longestPalindromeLen + 1\n        longestPalindrome\
    \ += myString[i]\n    }\n    for i := 0; i < longestPalindromeLen; i++ {\n   \
    \     longestPalindrome += myString[len(myString)-i-1]\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n        postfix\
    \ := myString[i:]\n        if isPalindrome(prefix, postfix) {\n            longestPalindrome\
    \ = prefix + reverseString(postfix)\n            longestPalindromeLen = len(longestPalindrome)\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        prefix := myString[:i]\n        suffix := myString[i:]\n        longestPalindromeLen\
    \ := len(longestPalindrome)\n        longestPalindrome = longestPalindrome + suffix\n\
    \        if longestPalindrome == prefix {\n            longestPalindrome = longestPalindrome[:longestPalindromeLen]\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindrom", "    var myStringLen int = len(myString)\n\
    \    var myStringPrefix string = \"\"\n    var myStringSuffix string = \"\"\n\
    \    var myStringPalindrome string = \"\"\n\n    for i := 0; i < myStringLen;\
    \ i++ {\n        myStringPrefix = myStringPrefix + myString[i]\n    }\n\n    for\
    \ i := 0; i < myStringLen; i++ {\n        myStringSuffix = myStringSuffix + myString[i]\n\
    \    }\n\n    for i := 0; i < myStringLen; i++ {\n        if myStringSuffix ==\
    \ myStringPrefix {\n            myStringPalindrome = myStringPalindrome + myStringSuffix\n\
    \            myStringPrefix = myStringPrefix + myString[i]\n            myStringSuffix\
    \ = myStringSuffix + myString[i]\n        }\n    }\n\n    return myStringPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome += myString[:i]\n        longestPalindrome +=\
    \ myString[len(myString) - i:len(myString)]\n    }\n    longestPalindromeLen +=\
    \ len(myString) - len(longestPalindrome)\n    longestPalindrome += myString[len(myString)\
    \ - longestPalindromeLen:]\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        prefix := myString[:i]\n        suffix := myString[i:]\n        postfix\
    \ := make_palindrome_test(prefix, suffix)\n        if postfix != \"\" {\n    \
    \        if postfix < longestPalindrome {\n                longestPalindrome =\
    \ postfix\n                longestPalindromeLen = len(postfix)\n            }\n\
    \        }\n    }\n    if longestPalindromeLen > 0 {\n        return longestPalindrome\
    \ + myString[:longestPalindromeLen]\n    }\n    return \"\"\n}\n", "    // Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // Algorithm\
    \ idea is simple:\n    // - Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        postfix += string(myString[i+1:])\n        if isPalindrome(postfix) {\n\
    \            longestPalindrome = postfix\n            longestPalindromeLen = len(postfix)\n\
    \        }\n    }\n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    return longestPalindrome + string(myString[:longestPalindromeLen])\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome += myString[len(myString)-i:] + myString[:len(myString)-i]\n\
    \    }\n    return longestPalindrome\n}\n", "    var myStringLen int = len(myString)\n\
    \    var myStringPrefix string\n    var myStringSuffix string\n    var myStringReversedPrefix\
    \ string\n    var myStringReversedSuffix string\n    var myStringReversedSuffixLen\
    \ int\n    var myStringReversedSuffixPrefix string\n    var myStringReversedSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixPrefix string\n    var myStringReversedSuffixSuffixSuffix\
    \ string\n\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    for myStringLen > 0 {\n        myStringPrefix = myString[0:myStringLen]\n\
    \        myStringSuffix = myString[myStringLen:]\n        myStringReversedPrefix\
    \ = myStringPrefix[0 : len(myStringPrefix)-len(myStringSuffix)]\n        myStringReversedSuffix\
    \ = myStringSuffix[0:len(myStringSuffix) - len(myStringReversedPrefix)]\n    \
    \    myStringReversedSuffixLen = len(myStringReversedSuffix)\n        myStringReversedSuffixPrefix\
    \ = myStringReversedSuffix[0:myStringReversedSuffixLen]\n        myStringReversedSuffixSuffixLen\
    \ = len(myStringReversedSuffixSuffix)\n        myStringReversedSuffixSuffixPrefix\
    \ = myStringReversedSuffixSuffix[0:myStringReversedSuffixSuffixLen]\n        myStringReversedSuffixSuffixSuffix\
    \ = myStringReversedSuffixSuffix[0:myStringReversedSuffixSuffixLen]\n        if\
    \ myStringPrefix == myStringReversedSuffixSuffixPrefix {\n            myStringLen\
    \ = myStringLen - 1\n        } else {\n            myStringLen = myStringLen +\
    \ 1\n        }\n    }\n    return myString\n}\n", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        postfix += string(myString[i+1:])\n        if postfix != make_palindrome(postfix)\
    \ {\n            continue\n        }\n        longestPalindrome = postfix\n  \
    \      longestPalindromeLen = len(postfix)\n    }\n    if longestPalindromeLen\
    \ > 0 {\n        return longestPalindrome\n    }\n    return myString\n}\n", " \
    \   // Find the longest postfix of supplied string that is a palindrome.\n   \
    \ // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n \
    \       postfix += myString[len(myString)-i:]\n        postfix += myString[:len(myString)-i]\n\
    \        postfix += myString[len(myString)-len(postfix):]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i\
    \ < len(myString); i++ {\n        longestPalindromeLen += len(myString) - i\n\
    \        longestPalindrome += myString[i : i+longestPalindromeLen]\n    }\n  \
    \  longestPalindrome += myString[len(myString) - longestPalindromeLen : len(myString)]\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    longestPalindromeLen += len(myString)\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindromeLen += myString[i]\n    }\n    for i := 0; i\
    \ < longestPalindromeLen; i++ {\n        longestPalindrome += myString[len(myString)-i-1]\n\
    \    }\n    for i := 0; i < len(myString); i++ {\n        longestPalindrome +=\
    \ myString[len(myString)-i-1]\n    }\n    return longestPalindrome\n}\n", "  \
    \  longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i\
    \ < len(myString); i++ {\n        prefix := myString[:i]\n        suffix := myString[i+1:]\n\
    \        postfix := reversePostfix(prefix)\n        postfix += suffix\n      \
    \  postfix += reversePostfix(suffix)\n        postfix += reversePostfix(prefix)\n\
    \        if postfix != \"\" {\n            longestPalindrome = postfix\n     \
    \       longestPalindromeLen = len(postfix)\n        }\n    }\n    if longestPalindromeLen\
    \ > len(myString) {\n        return \"\"\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    longestPalindromePrefix\
    \ := \"\"\n    longestPalindromeSuffix := \"\"\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix := myString[:i]\n        suffix := myString[i:]\n    \
    \    longestPalindromeLength = len(longestPalindrome) + len(prefix) + len(suffix)\n\
    \        if longestPalindromeLength > longestPalindromeLength {\n            longestPalindrome\
    \ = prefix\n            longestPalindromePrefix = prefix\n            longestPalindromeSuffix\
    \ = suffix\n        } else {\n            longestPalindrome = prefix + suffix\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        postfix := myString[longestPalindromeLen:] + myString[:longestPalindromeLen]\n\
    \        postfix += myString[len(myString) - longestPalindromeLen - i:] + myString[:len(myString)\
    \ - longestPalindromeLen - i]\n        longestPalindromeLen += len(postfix)\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n\
    \        postfix += myString[len(myString)-i:]\n        postfix += myString[:len(myString)-i]\n\
    \        postfix += myString[len(myString)-len(postfix):]\n        postfix +=\
    \ myString[:len(myString)-len(postfix)-i]\n        postfix += myString[len(myString)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-i]\n   \
    \     postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-len(postfix)-i]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-i]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-i]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-i]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        postfix += myString[len(myString)-i-1:]\n        postfix += myString[len(myString)-i:]\n\
    \        if postfix != myString {\n            longestPalindrome = postfix\n \
    \           longestPalindromeLen = len(postfix)\n        }\n    }\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    return\
    \ longestPalindrome + myString[:longestPalindromeLen]\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        postfix := myString[i:]\n        postfix += \"-\"\n        postfix\
    \ += myString[:i]\n        postfix += \"-\"\n        postfix += myString[i:]\n\
    \        postfix += \"-\"\n        postfix += myString[:i]\n        postfix +=\
    \ \"-\"\n        postfix += myString[i:]\n        postfix += \"-\"\n        postfix\
    \ += myString[:i]\n        postfix += \"-\"\n        postfix += myString[i:]\n\
    \        postfix += \"-\"\n        postfix += myString[:i]\n        postfix +=\
    \ \"-\"\n        postfix += myString[i:]\n        postfix += \"-\"\n        postfix\
    \ += myString[:i]\n        postfix += \"-\"\n        postfix += myString[i:]\n\
    \        postfix += \"-\"\n        postfix += myString[:i]\n        postfix +=\
    \ \"-\"\n        postfix += myString[i:]\n        postfix += \"-\"\n        postfix\
    \ += myString[:i]\n        postfix += \"-\"\n        postfix += myString[i:]\n\
    \        postfix += \"-\"\n        postfix += myString[:i]\n        postfix +=\
    \ \"-\"\n        postfix += myString[i:]\n        postfix += \"-\"\n        postfix\
    \ += myString[:i]\n        postfix += \"-\"\n        postfix += myString[i:]\n\
    \        postfix += \"-\"\n        postfix += myString[:i]\n        postfix +=\
    \ \"-\"\n        postfix += myString[i:]\n        postfix += \"-\"\n        postfix\
    \ += myString[:i]\n        postfix += \"-\"\n        postfix += myString[i:]\n\
    \        postfix += \"-\"\n        postfix += myString[:i]\n        postfix +=\
    \ \"-\"\n        postfix += myString[i:]\n        postfix += \"-\"\n        postfix\
    \ += myString[:i]\n        postfix += \"-\"\n        postfix += myString[i:]\n\
    \        postfix += \"-\"\n        postfix += myString[:i]\n        postfix +=\
    \ \"-\"\n        postfix += myString[i:]\n        postfix += \"-\"\n        postfix\
    \ += myString[:i]\n        postfix += \"-\"\n        postfix += myString[i:]\n\
    \        postfix += \"-\"\n        postfix += myString[:i]\n        postfix +=\
    \ \"-\"\n        ", "    longestPalindrome := \"\"\n    longestPalindromeLen :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        suffix := myString[i:]\n        postfix := make_palindrome_test(prefix)\n\
    \        if postfix != \"\" {\n            longestPalindromeLen := len(postfix)\n\
    \            if longestPalindromeLen > longestPalindromeLen {\n              \
    \  longestPalindrome = postfix\n            }\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i]\n        postfix += \"-\"\n      \
    \  postfix += myString[i:]\n        postfix += \"-\"\n        postfix += myString[:i]\n\
    \        postfix += \"-\"\n        postfix += myString[i:]\n        postfix +=\
    \ \"-\"\n        postfix += myString[:i]\n        postfix += \"-\"\n        postfix\
    \ += myString[i:]\n        postfix += \"-\"\n        postfix += myString[:i]\n\
    \        postfix += \"-\"\n        postfix += myString[i:]\n        postfix +=\
    \ \"-\"\n        postfix += myString[:i]\n        postfix += \"-\"\n        postfix\
    \ += myString[i:]\n        postfix += \"-\"\n        postfix += myString[:i]\n\
    \        postfix += \"-\"\n        postfix += myString[i:]\n        postfix +=\
    \ \"-\"\n        postfix += myString[:i]\n        postfix += \"-\"\n        postfix\
    \ += myString[i:]\n        postfix += \"-\"\n        postfix += myString[:i]\n\
    \        postfix += \"-\"\n        postfix += myString[i:]\n        postfix +=\
    \ \"-\"\n        postfix += myString[:i]\n        postfix += \"-\"\n        postfix\
    \ += myString[i:]\n        postfix += \"-\"\n        postfix += myString[:i]\n\
    \        postfix += \"-\"\n        postfix += myString[i:]\n        postfix +=\
    \ \"-\"\n        postfix += myString[:i]\n        postfix += \"-\"\n        postfix\
    \ += myString[i:]\n        postfix += \"-\"\n        postfix += myString[:i]\n\
    \        postfix += \"-\"\n        postfix += myString[i:]\n        postfix +=\
    \ \"-\"\n        postfix += myString[:i]\n        postfix += \"-\"\n        postfix\
    \ += myString[i:]\n        postfix += \"-\"\n        postfix += myString[:i]\n\
    \        postfix += \"-\"\n        postfix += myString[i:]\n        postfix +=\
    \ \"-\"\n        postfix += myString[:i]\n        postfix += \"-\"\n        postfix\
    \ += myString[i:]\n        postfix += \"-\"\n        postfix += myString[:i]\n\
    \        postfix += \"-\"\n        ", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    longestPalindrome := \"\"\n    for i := len(myString)\
    \ - 1; i >= 0; i-- {\n        longestPalindrome += myString[i]\n    }\n    //\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    longestPalindrome += myString[len(myString)-len(longestPalindrome):]\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n\
    \        postfix += myString[:i]\n        postfix += myString[i:len(myString)-i]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[len(myString)-i:]\n        postfix += myString[:len(myString)-i]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[:i]\n        postfix += myString[i:]\n        postfix += myString[:len(myString)-i]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += ", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen += len(myString)\n\
    \    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n  \
    \      suffix := myString[i:]\n        postfix := reversePostfix(prefix)\n   \
    \     if postfix != \"\" {\n            longestPalindromeLen += len(postfix)\n\
    \            if longestPalindromeLen > longestPalindromeLen {\n              \
    \  longestPalindrome = postfix\n                longestPalindromeLen = len(postfix)\n\
    \            }\n        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen += len(myString)\n\
    \    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n  \
    \      suffix := myString[i:]\n        longestPalindromeLen += len(prefix)\n \
    \       longestPalindromeLen += len(suffix)\n        if longestPalindromeLen >\
    \ len(longestPalindrome) {\n            longestPalindrome = prefix\n         \
    \   longestPalindromeLen = len(prefix)\n        }\n        if longestPalindromeLen\
    \ < len(longestPalindrome) {\n            longestPalindrome = suffix\n       \
    \     longestPalindromeLen = len(suffix)\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome += myString[i : i+longestPalindromeLen]\n   \
    \ }\n    longestPalindromeLen -= len(myString)\n    longestPalindrome += myString[len(myString)\
    \ - longestPalindromeLen : len(myString)]\n    return longestPalindrome\n}\n",
  "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        longestPalindromeLength = 0\n        for j\
    \ := 0; j < len(myString); j++ {\n            if myString[i] == myString[j] {\n\
    \                longestPalindromeLength++\n            }\n        }\n       \
    \ if longestPalindromeLength > longestPalindromeLength {\n            longestPalindrome\
    \ = myString[:longestPalindromeLength]\n        }\n    }\n    return longestPalindrome\
    \ + myString[len(longestPalindrome):]\n}\n", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindrom", "    // Find longest postfix\
    \ of myString that is a palindrome.\n    // If no such postfix exists, return\
    \ myString unchanged.\n    longestPostfix := \"\"\n    for i := 0; i < len(myString);\
    \ i++ {\n        postfix := myString[:i]\n        if isPalindrome(postfix) {\n\
    \            longestPostfix = postfix\n            break\n        }\n    }\n \
    \   if longestPostfix == \"\" {\n        return myString\n    }\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    suffix := myString[len(longestPostfix):]\n    return longestPostfix\
    \ + suffix[0 : len(suffix)/2] + suffix[len(suffix)/2:]\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        longestPalindromeLen += len(myString) - i\n        longestPalindrome\
    \ += myString[i : i+longestPalindromeLen]\n    }\n    longestPalindromeLen -=\
    \ len(myString)\n    longestPalindrome += myString[0 : longestPalindromeLen]\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n\
    \        postfix += string(reverse(postfix))\n        postfix += myString[i:]\n\
    \        postfix += string(reverse(postfix))\n        if postfix != longestPalindrome\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLength\
    \ = len(postfix)\n        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        longestPalindromeLen := longestPalindromeLen + 1\n        longestPalindrome\
    \ += myString[i]\n    }\n    for i := 0; i < longestPalindromeLen/2; i++ {\n \
    \       longestPalindrome += myString[len(myString)-i-1]\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    for i := 0; i < len(myString); i++ {\n   \
    \     postfix := myString[i:]\n        postfix += myString[:i]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-1-i:]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]",
  "    var myStringLen int = len(myString)\n    var myStringPrefix string\n    var\
    \ myStringSuffix string\n    var myStringReversedSuffix string\n    var myStringReversedPrefix\
    \ string\n    var myStringReversedReversedSuffix string\n    var myStringReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedSuffix string\n    var myStringReversedReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myStringReversedReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myStringReversedReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myStringReversedReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myStringReversedReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myStringReversedReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myStringReversedReversedReversedReversedReversedSuffix string\n    var\
    \ my", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen :=\
    \ 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        char := myString[i]\n\
    \        \n        // Find longest postfix of supplied string that is a palindrome.\n\
    \        // Algorithm idea is simple:\n        // - Find the longest postfix of\
    \ supplied string that is a palindrome.\n        // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \        // >>> make_palindrome('')\n        // ''\n        // >>> make_palindrome('cat')\n\
    \        // 'catac'\n        // >>> make_palindrome('cata')\n        // 'catac'\n\
    \        if char == myString[len(myString)-i+1] {\n            longestPalindrome\
    \ = append(longestPalindrome, char)\n            longestPalindromeLen++\n    \
    \    }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffi", "    // Find longest postfix of myString that\
    \ is a palindrome.\n    // This will be the longest palindrome that begins with\
    \ myString.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest postfix is found by iterating through myString\
    \ backwards.\n    // The longest ", "    var myStringLen int = len(myString)\n\
    \    var myStringPrefix string\n    var myStringSuffix string\n    var myStringReversedPrefix\
    \ string\n    var myStringReversedSuffix string\n    var myStringReversedSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixLen int\n    var myStringReversedSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixLen int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixLen int\n \
    \   var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen int\n  \
    \  var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen int\n\
    \    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i\
    \ < len(myString); i++ {\n        prefix := myString[:i]\n        suffix := myString[i+1:]\n\
    \        postfix := reverse(prefix)\n        if suffix == postfix {\n        \
    \    longestPalindrome = prefix + postfix\n            longestPalindromeLen =\
    \ len(longestPalindrome)\n        }\n    }\n    if longestPalindromeLen > 0 {\n\
    \        return longestPalindrome\n    }\n    return \"\"\n}\n", "    // Find\
    \ longest postfix of myString that is a palindrome.\n    // This will be the longest\
    \ palindrome that starts with myString.\n    // The longest postfix of myString\
    \ is myString + myString[0:len(myString)-1]\n    // >>> make_palindrome('cat')\n\
    \    // 'cat'\n    // >>> make_palindrome('cats')\n    // 'cats'\n    // >>> make_palindrome('cats')\n\
    \    // 'cats'\n    // >>> make_palindrome('cats')\n    // 'cats'\n    // >>>\
    \ make_palindrome('cats')\n    // 'cats'\n    // >>> make_palindrome('cats')\n\
    \    // 'cats'\n    // >>> make_palindrome('cats')\n    // 'cats'\n    // >>>\
    \ make_palindrome('cats')\n    // 'cats'\n    // >>> make_palindrome('cats')\n\
    \    // 'cats'\n    // >>> make_palindrome('cats')\n    // 'cats'\n    // >>>\
    \ make_palindrome('cats')\n    // 'cats'\n    // >>> make_palindrome('cats')\n\
    \    // 'cats'\n    // >>> make_palindrome('cats')\n    // 'cats'\n    // >>>\
    \ make_palindrome('cats')\n    // 'cats'\n    // >>> make_palindrome('cats')\n\
    \    // 'cats'\n    // >>> make_palindrome('cats')\n    // 'cats'\n    // >>>\
    \ make_palindrome('cats')\n    // 'cats'\n    // >>> make_palindrome('cats')\n\
    \    // 'cats'\n    // >>> make_palindrome('cats')\n    // 'cats'\n    // >>>\
    \ make_palindrome('cats')\n    // 'cats'\n    // >>> make_palindrome('cats')\n\
    \    // 'cats'\n    // >>> make_palindrome('cats')\n    // 'cats'\n    // >>>\
    \ make_palindrome('cats')\n    // 'cats'\n    // >>> make_palindrome('cats')\n\
    \    // 'cats'\n    // >>> make_palindrome('cats')\n    // 'cats'\n    // >>>\
    \ make_palindrome('cats')\n    // 'cats'\n    // >>> make_palindrome('cats')\n\
    \    // 'cats'\n    // >>> make_palindrome('cats')\n    // 'cats'\n    // >>>\
    \ make_palindrome('cats')\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ += len(myString) - i\n        longestPalindrome = myString[:i+1] + myString[i+longestPalindromeLen:]\n\
    \        if longestPalindrome == myString[:i+1] + myString[i+longestPalindromeLen:]\
    \ {\n            return longestPalindrome\n        }\n    }\n    return \"\"\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen := longestPalindromeLen\
    \ + 1\n        longestPalindrome += myString[i]\n    }\n    for i := 0; i < longestPalindromeLen;\
    \ i++ {\n        longestPalindrome += myString[len(myString)-i]\n    }\n    return\
    \ longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[longestPalindromeLen:]\
    \ + myString[:i]\n        postfix += make_palindrome(postfix)\n        longestPalindromeLen\
    \ += len(postfix)\n        if longestPalindromeLen > len(longestPalindrome) {\n\
    \            longestPalindrome = postfix\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n\
    \    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindrom", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen += 1 //\
    \ Increment the length of the longest palindrome so far.\n        longestPalindrome\
    \ += myString[i]\n    }\n    longestPalindromeLen -= 1 // Decrement the length\
    \ of the longest palindrome so far.\n    longestPalindrome += myString[longestPalindromeLen:]\n\
    \    longestPalindromeLen -= 1 // Decrement the length of the longest palindrome\
    \ so far.\n    longestPalindrome += myString[:longestPalindromeLen]\n    longestPalindromeLen\
    \ -= 1 // Decrement the length of the longest palindrome so far.\n    longestPalindrome\
    \ += myString[longestPalindromeLen:]\n    longestPalindromeLen -= 1 // Decrement\
    \ the length of the longest palindrome so far.\n    longestPalindrome += myString[:longestPalindromeLen]\n\
    \    longestPalindromeLen -= 1 // Decrement the length of the longest palindrome\
    \ so far.\n    longestPalindrome += myString[longestPalindromeLen:]\n    longestPalindromeLen\
    \ -= 1 // Decrement the length of the longest palindrome so far.\n    longestPalindrome\
    \ += myString[:longestPalindromeLen]\n    longestPalindromeLen -= 1 // Decrement\
    \ the length of the longest palindrome so far.\n    longestPalindrome += myString[longestPalindromeLen:]\n\
    \    longestPalindromeLen -= 1 // Decrement the length of the longest palindrome\
    \ so far.\n    longestPalindrome += myString[:longestPalindromeLen", "    // Find\
    \ longest postfix of myString that is a palindrome\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n\
    \        postfix := myString[i:]\n        if isPalindrome(prefix, postfix) {\n\
    \            longestPalindrome = prefix + reverseString(postfix)\n           \
    \ longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n    return\
    \ longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n\
    \        postfix += \"-\"\n        postfix += myString[:i]\n        postfix +=\
    \ \"-\"\n        postfix += myString[:i+1]\n        postfix += \"-\"\n       \
    \ postfix += myString[:i+2]\n        postfix += \"-\"\n        postfix += myString[:i+3]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+4]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+5]\n        postfix += \"-\"\n    \
    \    postfix += myString[:i+6]\n        postfix += \"-\"\n        postfix += myString[:i+7]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+8]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+9]\n        postfix += \"-\"\n    \
    \    postfix += myString[:i+10]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+11]\n        postfix += \"-\"\n        postfix += myString[:i+12]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+13]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+14]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+15]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+16]\n        postfix += \"-\"\n        postfix += myString[:i+17]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+18]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+19]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+20]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+21]\n        postfix += \"-\"\n        postfix += myString[:i+22]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+23]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+24]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+25]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+26]\n        postfix += \"-\"\n        postfix += myString[:i+27]\n\
    \        postfix += \"-\"\n        post", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \            longestPalindromeLen = len(postfix)\n        }\n    }\n\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    prefix := myString[:longestPalindromeLen]\n    suffix := myString[longestPalindromeLen:]\n\
    \    return prefix + reverse(suffix)\n}\n", "    longestPalindrome := \"\"\n \
    \   longestPalindromeLength := 0\n    longestPalindromeLength2 := 0\n    longestPalindromeLength3\
    \ := 0\n    longestPalindromeLength4 := 0\n    longestPalindromeLength5 := 0\n\
    \    longestPalindromeLength6 := 0\n    longestPalindromeLength7 := 0\n    longestPalindromeLength8\
    \ := 0\n    longestPalindromeLength9 := 0\n    longestPalindromeLength10 := 0\n\
    \    longestPalindromeLength11 := 0\n    longestPalindromeLength12 := 0\n    longestPalindromeLength13\
    \ := 0\n    longestPalindromeLength14 := 0\n    longestPalindromeLength15 := 0\n\
    \    longestPalindromeLength16 := 0\n    longestPalindromeLength17 := 0\n    longestPalindromeLength18\
    \ := 0\n    longestPalindromeLength19 := 0\n    longestPalindromeLength20 := 0\n\
    \    longestPalindromeLength21 := 0\n    longestPalindromeLength22 := 0\n    longestPalindromeLength23\
    \ := 0\n    longestPalindromeLength24 := 0\n    longestPalindromeLength25 := 0\n\
    \    longestPalindromeLength26 := 0\n    longestPalindromeLength27 := 0\n    longestPalindromeLength28\
    \ := 0\n    longestPalindromeLength29 := 0\n    longestPalindromeLength30 := 0\n\
    \    longestPalindromeLength31 := 0\n    longestPalindromeLength32 := 0\n    longestPalindromeLength33\
    \ := 0\n    longestPalindromeLength34 := 0\n    longestPalindromeLength35 := 0\n\
    \    longestPalindromeLength36 := 0\n    longestPalindromeLength37 := 0\n    longestPalindromeLength38\
    \ := 0\n    longestPalindromeLength39 := 0\n    longestPalindromeLength40 := 0\n\
    \    longestPalindromeLength41 := 0\n    longestPalindromeLength42 := 0\n    longestPalindromeLength43\
    \ := 0\n    longestPalindromeLength44 := 0\n    longestPalindromeLength45 := 0\n\
    \    longest", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen :=\
    \ 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        postfix += string(myString[len(myString)-i-1:])\n        postfix += string(myString[:i])\n\
    \        \n        // If postfix is a palindrome.\n        if isPalindrome(postfix)\
    \ {\n            // If this postfix is longer than the longest palindrome so far.\n\
    \            if len(postfix) > longestPalindromeLen {\n                longestPalindrome\
    \ = postfix\n                longestPalindromeLen = len(postfix)\n           \
    \ }\n        }\n    }\n    \n    // Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n    longestPalindrome\
    \ += string(myString[:longestPalindromeLen])\n    \n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        postfix := myString[:i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix)-i:]\n\
    \        postfix += myString[:len(postfix)-i]\n        postfix += myString[len(postfix",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen\
    \ := len(myString)\n    for i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome\
    \ += myString[i]\n    }\n    for i := 0; i < longestPalindromeLen; i++ {\n   \
    \     longestPalindrome += myString[len(myString)-(i+1)]\n    }\n    return longestPalindrome\n\
    }\n", "    // Find longest postfix of myString that is a palindrome.\n    // The\
    \ longest postfix is found by reversing a prefix of myString that comes before\
    \ a palindromic suffix.\n    // The longest postfix is found by reversing a prefix\
    \ of myString that comes before a palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find longest postfix of myString that is a palindrome.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find longest postfix of myString that is a palindrome.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find longest postfix of myString that is a palindrome.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // >>> make_palindrome('')\n\
    \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    \n    // Find longest postfix of myString that is a palindrome.\n\
    \    // The longest postfix is found by reversing a ", "    var myStringLen int\
    \ = len(myString)\n    var myStringPrefix string\n    var myStringSuffix string\n\
    \    var myStringPalindrome string\n\n    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    for i := 0; i < myStringLen; i++ {\n     \
    \   myStringPrefix = myString[:i]\n        myStringSuffix = myString[i:]\n   \
    \     myStringPalindrome = myStringPrefix + reverse(myStringSuffix) + myStringSuffix\n\
    \        if myStringPalindrome == myString {\n            return myStringPalindrome\n\
    \        }\n    }\n    return \"\"\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    // Algorithm idea is simple:\n  \
    \  // - Find the longest postfix of supplied string that is a palindrome.\n  \
    \  // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n \
    \       postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    longestPalindromeLength := len(myString)\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        longestPalindrome += myString[i]\n    }\n    for i := 0; i <\
    \ longestPalindromeLength; i++ {\n        longestPalindrome += myString[len(myString)-i-1]\n\
    \    }\n    return longestPalindrome\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    // Algorithm idea is simple:\n  \
    \  // - Find the longest postfix of supplied string that is a palindrome.\n  \
    \  // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n\
    \    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
    \    // 'catac'\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[0:i+1]\n\
    \        reverse := myString[i+1:]\n        if postfix != reverse {\n        \
    \    longestPalindrome = postfix + reverse\n            longestPalindromeLen =\
    \ len(postfix)\n        }\n    }\n    return longestPalindrome\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
