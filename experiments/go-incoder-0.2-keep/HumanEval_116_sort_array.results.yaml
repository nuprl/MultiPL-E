language: go_test.go
name: HumanEval_116_sort_array
results:
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := 0\n        for\
    \ _, v := range arr[i:] {\n            if v == 1 {\n                onesCount++\n\
    \            }\n        }\n        if onesCount > 0 {\n            return onesCount\
    \ < len(arr)\n        }\n        return arr[i] < arr[j]\n    })\n    return arr\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7dh398z_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, 0, len(arr), func(i, j int) bool {\n        onesCount :=\
    \ 0\n        for k := 0; k < len(arr); k++ {\n            if arr[k]&(1<<uint(k))\
    \ == 0 {\n                onesCount++\n            }\n        }\n        if onesCount\
    \ > 0 {\n            return onesCount > arr[j]&(1<<uint(j)) == onesCount\n   \
    \     }\n        return arr[j]&(1<<uint(j)) == arr[i]&(1<<uint(i)) == onesCount\n\
    \    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi67ie6___test.go:17:5: undefined: sort

    /tmp/tmpi67ie6___test.go:25:55: invalid operation: onesCount > arr[j] & (1 <<
    uint(j)) == onesCount (mismatched types untyped bool and int)

    /tmp/tmpi67ie6___test.go:27:62: invalid operation: arr[j] & (1 << uint(j)) ==
    arr[i] & (1 << uint(i)) == onesCount (mismatched types untyped bool and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n                onesCount++\n\
    \            }\n        }\n        if onesCount > 0 {\n            return onesCount\
    \ > arr[j].(float64) - arr[i].(float64)\n        } else {\n            return\
    \ arr[j].(float64) - arr[i].(float64)\n        }\n    })\n    return arr\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpho33ty2d_test.go:17:5: undefined: sort

    /tmp/tmpho33ty2d_test.go:25:32: invalid operation: arr[j] (variable of type int)
    is not an interface

    /tmp/tmpho33ty2d_test.go:25:51: invalid operation: arr[i] (variable of type int)
    is not an interface

    /tmp/tmpho33ty2d_test.go:27:20: invalid operation: arr[j] (variable of type int)
    is not an interface

    /tmp/tmpho33ty2d_test.go:27:39: invalid operation: arr[i] (variable of type int)
    is not an interface

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    for _, v := range arr {\n        result := append(result, v)\n    }\n   \
    \ sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8mnoydsv_test.go:18:9: result declared but not used

    /tmp/tmp8mnoydsv_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range arr {\n        result[i] = arr[i]\n    }\n    for i\
    \ := range count {\n        if count[i] == 0 {\n            continue\n       \
    \ }\n        j := i\n        for k := i - 1; k >= 0; k-- {\n            if count[k]\
    \ == 0 {\n                break\n            }\n            if count[k] > count[j]\
    \ {\n                j := k\n            }\n        }\n        for k := i + 1;\
    \ k < len(arr); k++ {\n            if count[k] == 0 {\n                break\n\
    \            }\n            if count[k] > count[j] {\n                j := k\n\
    \            }\n        }\n        if j != i {\n            tmp := result[i]\n\
    \            result[i] = result[j]\n            result[j] = tmp\n        }\n \
    \   }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6jpqai1_test.go:37:17: j declared but not used

    /tmp/tmpb6jpqai1_test.go:45:17: j declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpywh1acn6_test.go:19\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpywh1acn6_test.go:37\
    \ +0xe66\ntesting.tRunner(0xc0001924e0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        ones, _ := strconv.Atoi(arr[i].String())\n\
    \        ones2, _ := strconv.Atoi(arr[j].String())\n        if ones < ones2 {\n\
    \            return true\n        }\n        return false\n    })\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdk2le1h2_test.go:17:5: undefined: sort

    /tmp/tmpdk2le1h2_test.go:18:20: undefined: strconv

    /tmp/tmpdk2le1h2_test.go:18:40: arr[i].String undefined (type int has no field
    or method String)

    /tmp/tmpdk2le1h2_test.go:19:21: undefined: strconv

    /tmp/tmpdk2le1h2_test.go:19:41: arr[j].String undefined (type int has no field
    or method String)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = arr[i]\n    }\n    for\
    \ i := range count {\n        if count[i] > 1 {\n            j := i\n        \
    \    for k := i + 1; k < len(count); k++ {\n                if count[k] == 1 {\n\
    \                    result[j] = result[k]\n                    j++\n        \
    \        }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpazxg9jzf_test.go:22 +0x125\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpazxg9jzf_test.go:48 +0xa8\ntesting.tRunner(0xc0001a0340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n \
    \   })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqo4hqmy_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4fyhad_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n    \
    \    for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n         \
    \       oneCount++\n            }\n        }\n        if oneCount > 0 {\n    \
    \        result[i] = oneCount\n        } else {\n            result[i] = arr[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpcqs54m77_test.go:53: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpcqs54m77_test.go:53:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpcqs54m77_test.go:53: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcqs54m77_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpcqs54m77_test.go:53: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := range arr {\n        count := 0\n        for j := range\
    \ arr {\n            if arr[j] == i {\n                count++\n            }\n\
    \        }\n        if count == 1 {\n            result[i] = i\n        } else\
    \ {\n            result [i] = count\n        }\n    }\n    return result\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkhwg3qm__test.go:53: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkhwg3qm__test.go:53:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpkhwg3qm__test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpkhwg3qm__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=7)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpkhwg3qm__test.go:53: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpkhwg3qm__test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=0)\
    \ %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmpkhwg3qm__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n\
    \    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ra8dsp9_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpywh1acn6_test.go:19\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpywh1acn6_test.go:37\
    \ +0xe66\ntesting.tRunner(0xc0001924e0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n  \
    \      oneCount := 0\n        oneIndex := -1\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] == 1 {\n                oneCount++\n          \
    \      if oneIndex == -1 {\n                    oneIndex = j\n               \
    \ }\n            }\n        }\n        if oneCount > 1 {\n            tmp := arr[oneIndex]\n\
    \            arr[oneIndex] = arr[i]\n            arr[i] = tmp\n        }\n   \
    \ }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdpl3c3iz_test.go:17:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n    \
    \    for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n         \
    \       oneCount++\n            }\n        }\n        if oneCount > 0 {\n    \
    \        result[i] = oneCount\n        } else {\n            result[i] = arr[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpcqs54m77_test.go:53: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpcqs54m77_test.go:53:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpcqs54m77_test.go:53: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcqs54m77_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpcqs54m77_test.go:53: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpywh1acn6_test.go:19\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpywh1acn6_test.go:37\
    \ +0xe66\ntesting.tRunner(0xc0001924e0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            if count == 0 {\n               \
    \ result = append(result, v)\n            } else {\n                count -= 1\n\
    \                result = append(result, v)\n            }\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps5049qhf_test.go:53: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps5049qhf_test.go:53:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps5049qhf_test.go:53: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps5049qhf_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps5049qhf_test.go:53: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n  \
    \      oneCount := 0\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] == 1 {\n                oneCount++\n            }\n        }\n      \
    \  if oneCount > 0 {\n            result[i] = oneCount\n        } else {\n   \
    \         result[i] = arr[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdq3xpd93_test.go:17:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            return true\n\
    \        }\n        if oneCount == 0 {\n            return false\n        }\n\
    \        return arr[j] > arr[i]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_29wyfd7_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int, len(arr))\n    for i := range arr\
    \ {\n        count[arr[i]]++\n    }\n    for i := range arr {\n        if count[arr[i]]\
    \ == 1 {\n            result[i] = arr[i]\n        } else {\n            result[i]\
    \ = count[arr[i]]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmppmyctoxq_test.go:51: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmppmyctoxq_test.go:51:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmppmyctoxq_test.go:51: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmppmyctoxq_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=3) %!s(int=77) %!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=7) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmppmyctoxq_test.go:51: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4fyhad_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4fyhad_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpetkigdow_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        if count[i] == 0 {\n            continue\n\
    \        }\n        j := i\n        for j--; j >= 0 && count[j] == 0; j-- {\n\
    \        }\n        if j == -1 {\n            break\n        }\n        result[i]\
    \ = arr[j]\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpqp_jf66h_test.go:22 +0x106\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpqp_jf66h_test.go:46 +0xa8\ntesting.tRunner(0xc0001a0340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int)\n    for _, v := range arr {\n   \
    \     count[v]++\n    }\n    for _, v := range arr {\n        if count[v] == 1\
    \ {\n            result[count[v]] = v\n            count[v]--\n        }\n   \
    \ }\n    for _, v := range arr {\n        if count[v] == 0 {\n            result[count[v]]\
    \ = v\n            count[v]--\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpbg_9fbkf_test.go:56: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpbg_9fbkf_test.go:56:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpbg_9fbkf_test.go:56: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=4)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpbg_9fbkf_test.go:56: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=7) %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpbg_9fbkf_test.go:56: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpbg_9fbkf_test.go:56: expected\
    \ '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=32)\
    \ %!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7\
    \ (0.00s)\n        tmpbg_9fbkf_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=32) %!s(int=32) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n    \
    \    for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n         \
    \       oneCount++\n            }\n        }\n        if oneCount > 0 {\n    \
    \        result[i] = oneCount\n        } else {\n            result[i] = arr[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpcqs54m77_test.go:53: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpcqs54m77_test.go:53:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpcqs54m77_test.go:53: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcqs54m77_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpcqs54m77_test.go:53: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4fyhad_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        ones, _ := strconv.Atoi(arr[i])\n\
    \        ones2, _ := strconv.Atoi(arr[j])\n        if ones > ones2 {\n       \
    \     return true\n        }\n        if ones < ones2 {\n            return false\n\
    \        }\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpihjf0bpp_test.go:17:5: undefined: sort

    /tmp/tmpihjf0bpp_test.go:18:20: undefined: strconv

    /tmp/tmpihjf0bpp_test.go:19:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpywh1acn6_test.go:19\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpywh1acn6_test.go:37\
    \ +0xe66\ntesting.tRunner(0xc0001924e0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int)\n    for i := 0; i < len(arr); i++\
    \ {\n        count[arr[i]]++\n    }\n    for i := 0; i < len(arr); i++ {\n   \
    \     result[i] = arr[i]\n    }\n    for i := 0; i < len(arr); i++ {\n       \
    \ for j := 0; j < count[arr[i]]; j++ {\n            tmp := arr[i]\n          \
    \  arr[i] = arr[j]\n            arr[j] = tmp\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpn85ztx24_test.go:54: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpn85ztx24_test.go:54:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpn85ztx24_test.go:54: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpn85ztx24_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpn85ztx24_test.go:54: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i])\
    \ >> 32\n        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n       \
    \ if onesCount > zerosCount {\n            return true\n        }\n        if\
    \ onesCount < zerosCount {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_arlqhr_test.go:17:5: undefined: sort

    /tmp/tmpj_arlqhr_test.go:18:22: undefined: binary

    /tmp/tmpj_arlqhr_test.go:19:23: undefined: binary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, i := range arr {\n        count[count_bits(i)]\
    \ += 1\n    }\n    for i := range count {\n        result[count[i]] = i\n    }\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe2m3p1gz_test.go:22:15: undefined: count_bits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n        if count == 1 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpyxflrhol_test.go:52: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpyxflrhol_test.go:52:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpyxflrhol_test.go:52: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyxflrhol_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpyxflrhol_test.go:52: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count := 0\n       \
    \ for j := 0; j < len(arr); j++ {\n            if arr[j] == i {\n            \
    \    count++\n            }\n        }\n        result[i] = count\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpira51yl2_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    for _, v := range arr {\n        result := append(result, v)\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukyb7_nh_test.go:18:9: result declared but not used

    /tmp/tmpukyb7_nh_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        ones, _ := strconv.Atoi(arr[i])\n\
    \        ones2, _ := strconv.Atoi(arr[j])\n        if ones == ones2 {\n      \
    \      return arr[i] < arr[j]\n        }\n        return ones < ones2\n    })\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpam0vyyi9_test.go:17:5: undefined: sort

    /tmp/tmpam0vyyi9_test.go:18:20: undefined: strconv

    /tmp/tmpam0vyyi9_test.go:19:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074052
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    for _, v := range arr {\n        result := append(result, v)\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukyb7_nh_test.go:18:9: result declared but not used

    /tmp/tmpukyb7_nh_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n \
    \   })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqo4hqmy_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        count += v\n    }\n \
    \   for _, v := range arr {\n        if v > 0 {\n            result += append(result,\
    \ v)\n        }\n    }\n    for _, v := range arr {\n        if v > 0 {\n    \
    \        result += append(result, count-v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp24akas_1_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []int)

    /tmp/tmp24akas_1_test.go:28:13: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n    }\n    for i := 0; i < len(result); i++ {\n       \
    \ if count == 0 {\n            result[i], result[i+1] = result[i+1], result[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpiy0kyz_1_test.go:28\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpiy0kyz_1_test.go:41\
    \ +0x13d0\ntesting.tRunner(0xc0001a01a0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    count := make(map[int]int)\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for _, v := range arr {\n        if count[v] == 1 {\n            result\
    \ = append(result, v)\n        }\n    }\n    for _, v := range arr {\n       \
    \ if count[v] > 1 {\n            count[v]--\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp7kdwapkn_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp7kdwapkn_test.go:55:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp7kdwapkn_test.go:55: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp7kdwapkn_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=77) %!s(int=7) %!s(int=2) %!s(int=5) %!s(int=4)\
    \ %!s(int=5) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp7kdwapkn_test.go:55: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=3) %!s(int=6) %!s(int=44)\
    \ %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr,func(i, j int) bool {\n        return arr[i]%2 == arr[j]%2\n\
    \    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qwdevxz_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    for _, v := range arr {\n        result := append(result, v)\n    }\n   \
    \ sort.Slice(result, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(result[i*4])\
    \ >> 3\n        decCount := result[i*4] - onesCount*10\n        onesCount -= decCount\n\
    \        decCount /= 10\n        return onesCount > decCount\n    })\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzow0xujm_test.go:18:9: result declared but not used

    /tmp/tmpzow0xujm_test.go:20:5: undefined: sort

    /tmp/tmpzow0xujm_test.go:21:22: undefined: binary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpetkigdow_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i, v := range arr {\n\
    \        count[v]++\n    }\n    for i := 0; i < len(arr); i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := 0; i < len(arr); i++ {\n        if count[arr[i]]\
    \ == 1 {\n            result[i] = arr[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnpe6q7_g_test.go:18:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint64(arr[i])\
    \ >> 63\n        zerosCount := binary.BigEndian.Uint64(arr[j]) >> 63\n       \
    \ if onesCount > zerosCount {\n            return true\n        }\n        if\
    \ onesCount < zerosCount {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_po22o93_test.go:17:5: undefined: sort

    /tmp/tmp_po22o93_test.go:18:22: undefined: binary

    /tmp/tmp_po22o93_test.go:19:23: undefined: binary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int, len(arr))\n    for _, v := range arr\
    \ {\n        count[v]++\n    }\n    for _, v := range arr {\n        if count[v]\
    \ == 1 {\n            result[count[v]] = v\n            count[v]--\n        }\n\
    \    }\n    for _, v := range arr {\n        if count[v] == 0 {\n            result[count[v]]\
    \ = v\n            count[v]--\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpqbnqoopj_test.go:56: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpqbnqoopj_test.go:56:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpqbnqoopj_test.go:56: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=4)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpqbnqoopj_test.go:56: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=7) %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpqbnqoopj_test.go:56: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpqbnqoopj_test.go:56: expected\
    \ '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=32)\
    \ %!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7\
    \ (0.00s)\n        tmpqbnqoopj_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=32) %!s(int=32) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpywh1acn6_test.go:19\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpywh1acn6_test.go:37\
    \ +0xe66\ntesting.tRunner(0xc0001924e0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = arr[i]\n    }\n    for\
    \ i := range count {\n        if count[i] == 0 {\n            continue\n     \
    \   }\n        j := i\n        for {\n            j := j - 1\n            if count[j]\
    \ == 0 {\n                break\n            }\n            count[j]--\n     \
    \       tmp := result[j]\n            result[j] = result[i]\n            result[i]\
    \ = tmp\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc00011bcf8, 0x5, 0x0?})\n\t\
    /tmp/tmphzzpngkn_test.go:22 +0x114\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmphzzpngkn_test.go:53 +0xa8\ntesting.tRunner(0xc0001031e0, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    i := 0\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for _, v := range arr {\n        if count[v]\
    \ == 1 {\n            result[i] = v\n            i++\n        }\n    }\n    for\
    \ _, v := range arr {\n        if count[v] > 1 {\n            count[v] -= 1\n\
    \            i -= 1\n        }\n    }\n    for _, v := range arr {\n        if\
    \ count[v] == 0 {\n            result[i] = v\n            i++\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpok99_my0_test.go:20 +0x166\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpok99_my0_test.go:50 +0xa8\ntesting.tRunner(0xc0001a0340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n   \
    \ for i := 0; i < len(arr); i++ {\n        count[arr[i]]++\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n    for i := 0; i\
    \ < len(arr); i++ {\n        if count[arr[i]] == 1 {\n            result[i] =\
    \ arr[i]\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if count[arr[i]]\
    \ > 1 {\n            result[i] = arr[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc000125cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpn9ceofrk_test.go:20 +0x112\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpn9ceofrk_test.go:45 +0xa8\ntesting.tRunner(0xc000103860, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > j-i {\n            return true\n\
    \        }\n        return false\n    })\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr2qwqc46_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n   \
    \     for k := 0; k < len(arr); k++ {\n            if arr[k]&(1<<uint(k)) == 0\
    \ {\n                oneCount++\n            }\n        }\n        if oneCount\
    \ > 0 {\n            return true\n        }\n        if oneCount == 0 {\n    \
    \        return false\n        }\n        return arr[j] < arr[i]\n    })\n   \
    \ return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpffpae79h_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int, len(arr))\n    for i := range arr\
    \ {\n        count[arr[i]]++\n    }\n    for i := range arr {\n        result[count[arr[i]]]\
    \ = arr[i]\n        count[arr[i]]++\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp7uavq9k6_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp7uavq9k6_test.go:48:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=0) %!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp7uavq9k6_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmp7uavq9k6_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=0)\
    \ %!s(int=7) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp7uavq9k6_test.go:48: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=0) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp7uavq9k6_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=0) %!s(int=32) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmp7uavq9k6_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=0)\
    \ %!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n \
    \   })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqo4hqmy_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    for _, v := range arr {\n        result := append(result, v)\n    }\n   \
    \ sort.Slice(result, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(result[i*4])\
    \ >> 3\n        zerosCount := binary.BigEndian.Uint32(result[i*4+1]) >> 3\n  \
    \      if onesCount > zerosCount {\n            return true\n        }\n     \
    \   if onesCount < zerosCount {\n            return false\n        }\n       \
    \ return result[j*4] > result[j*4+1]\n    })\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3lobm3ci_test.go:18:9: result declared but not used

    /tmp/tmp3lobm3ci_test.go:20:5: undefined: sort

    /tmp/tmp3lobm3ci_test.go:21:22: undefined: binary

    /tmp/tmp3lobm3ci_test.go:22:23: undefined: binary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        if count[i] == 0 {\n    \
    \        continue\n        }\n        j := i\n        for k := 0; k < count[i];\
    \ k++ {\n            j := j + 1\n            if count[j] == 0 {\n            \
    \    break\n            }\n        }\n        result[i] = arr[j]\n        count[i]\
    \ = count[j] - 1\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmptevzj8zj_test.go:22 +0x107\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmptevzj8zj_test.go:48 +0xa8\ntesting.tRunner(0xc0001a0340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzvf3voqq_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint64(arr[i])\
    \ >> 63\n        zerosCount := binary.BigEndian.Uint64(arr[j]) >> 63\n       \
    \ if onesCount > zerosCount {\n            return true\n        }\n        if\
    \ onesCount < zerosCount {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_po22o93_test.go:17:5: undefined: sort

    /tmp/tmp_po22o93_test.go:18:22: undefined: binary

    /tmp/tmp_po22o93_test.go:19:23: undefined: binary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int)\n    for _, v := range arr {\n   \
    \     count[v]++\n    }\n    for _, v := range arr {\n        if count[v] == 1\
    \ {\n            result[count[v]] = v\n            count[v]++\n        }\n   \
    \ }\n    for _, v := range arr {\n        if count[v] == 1 {\n            result[count[v]]\
    \ = v\n            count[v]++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpbzkf41s5_test.go:56: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpbzkf41s5_test.go:56:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=0) %!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpbzkf41s5_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpbzkf41s5_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=0)\
    \ %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpbzkf41s5_test.go:56: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=0) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpbzkf41s5_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=0) %!s(int=32) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmpbzkf41s5_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=0)\
    \ %!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count := 0\n       \
    \ for j := 0; j < len(arr); j++ {\n            if arr[j] == i {\n            \
    \    count++\n            }\n        }\n        result[i] = count\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpira51yl2_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := range arr {\n        ones, count := countOnes(arr[i])\n\
    \        result[i] = arr[i]\n        if count > 0 {\n            result[i] = arr[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4w_4a3v_test.go:18:24: undefined: countOnes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[i] > 1 {\n            result[i],\
    \ result[i+1] = result[i+1], result[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc000125cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpb7vammli_test.go:22 +0x105\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpb7vammli_test.go:42 +0xa8\ntesting.tRunner(0xc000103860, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k]&(1<<uint(k)) == 0 {\n   \
    \             onesCount++\n            }\n        }\n        if onesCount > 0\
    \ {\n            return onesCount > arr[j]&(1<<uint(j))\n        }\n        return\
    \ arr[j] > arr[i]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsl9o5o3q_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i, v := range arr {\n\
    \        count[v]++\n    }\n    for i := range count {\n        result[i] = i\n\
    \    }\n    for i := range count {\n        count[i] = 0\n    }\n    for i :=\
    \ range result {\n        count[result[i]]++\n    }\n    for i := range count\
    \ {\n        result[i] = result[i] + count[i]\n    }\n    return result\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_tayfqqg_test.go:18:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            return oneCount\
    \ < len(arr)\n        }\n        return arr[i] < arr[j]\n    })\n    return arr\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9dq1rvtd_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        count += v\n    }\n \
    \   for _, v := range arr {\n        if v == 0 {\n            continue\n     \
    \   }\n        if count > 0 {\n            count -= v\n        } else {\n    \
    \        count = v\n        }\n        result = append(result, v)\n    }\n   \
    \ return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_i1bugbr_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_i1bugbr_test.go:55:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_i1bugbr_test.go:55: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_i1bugbr_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_i1bugbr_test.go:55: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpetkigdow_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzvf3voqq_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int)\n    for _, v := range arr {\n   \
    \     count[v]++\n    }\n    for _, v := range arr {\n        result[count[v]-1]\
    \ = v\n        count[v]--\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp8vwuj8by_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp8vwuj8by_test.go:48:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp8vwuj8by_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmp8vwuj8by_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=4)\
    \ %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp8vwuj8by_test.go:48: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp8vwuj8by_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmp8vwuj8by_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=32)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzvf3voqq_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i, v := range arr {\n\
    \        count[v]++\n    }\n    for i := 0; i < len(arr); i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := 0; i < len(arr); i++ {\n        if count[arr[i]]\
    \ == 1 {\n            result[i] = arr[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnpe6q7_g_test.go:18:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = arr[i]\n    }\n    for\
    \ i := range count {\n        if count[i] == 0 {\n            continue\n     \
    \   }\n        j := i\n        for k := i - 1; k >= 0; k-- {\n            if count[k]\
    \ > count[j] {\n                result[k] = arr[j]\n                count[k]--\n\
    \                count[j]++\n                j = k\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc000189cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpqqef3c0r_test.go:22 +0x132\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpqqef3c0r_test.go:51 +0xa8\ntesting.tRunner(0xc00019b1e0, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := range arr {\n        count := 0\n        for j := range\
    \ arr {\n            if arr[j] == i {\n                count++\n            }\n\
    \        }\n        if count == 1 {\n            result[i] = i\n        } else\
    \ {\n            decimalValue := count * 10\n            decimalValue += arr[i]\n\
    \            result[i] = decimalValue\n        }\n    }\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmptib0ze8h_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmptib0ze8h_test.go:55:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmptib0ze8h_test.go:55: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmptib0ze8h_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=97) %!s(int=24) %!s(int=25)\
    \ %!s(int=33) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmptib0ze8h_test.go:55: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=3) %!s(int=32) %!s(int=5)]'\n  \
    \  --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmptib0ze8h_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=2) %!s(int=16) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__7\
    \ (0.00s)\n        tmptib0ze8h_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=2) %!s(int=4) %!s(int=2) %!s(int=16)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzvf3voqq_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n  \
    \      oneCount := 0\n        oneIndex := -1\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] == 1 {\n                oneCount++\n          \
    \      if oneIndex == -1 {\n                    oneIndex = j\n               \
    \ }\n            }\n        }\n        if oneCount > 1 {\n            oneIndex\
    \ := oneIndex + 1\n        }\n        result[i] = arr[i]\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        oneCount := 0\n        oneIndex := -1\n    \
    \    for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n         \
    \       oneCount++\n                if oneIndex == -1 {\n                    oneIndex\
    \ = j\n                }\n            }\n        }\n        if oneCount > 1 {\n\
    \            oneIndex := oneIndex + 1\n        }\n        result[i] = arr[i]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00j9le2s_test.go:17:12: no new variables on left side of :=

    /tmp/tmp00j9le2s_test.go:30:13: oneIndex declared but not used

    /tmp/tmp00j9le2s_test.go:46:13: oneIndex declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = arr[i]\n    }\n    for\
    \ i := range count {\n        if count[i] == 0 {\n            continue\n     \
    \   }\n        j := i\n        for j--; j >= 0 && count[j] == 0; j-- {\n     \
    \   }\n        if j == -1 {\n            break\n        }\n        result[i] =\
    \ arr[j]\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpvc4ugbv__test.go:22 +0x113\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpvc4ugbv__test.go:49 +0xa8\ntesting.tRunner(0xc0001a0340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpetkigdow_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr,func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i])\
    \ >> 32\n        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n       \
    \ if onesCount < zerosCount {\n            return true\n        }\n        if\
    \ onesCount > zerosCount {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9urg2zs_test.go:17:5: undefined: sort

    /tmp/tmpp9urg2zs_test.go:18:22: undefined: binary

    /tmp/tmpp9urg2zs_test.go:19:23: undefined: binary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            return true\n\
    \        }\n        if oneCount == 0 {\n            return false\n        }\n\
    \        return arr[j] < arr[i]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpehgnilou_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, 0, len(arr), func(i, j int) bool {\n        onesCount :=\
    \ 0\n        for k := 0; k < len(arr); k++ {\n            if arr[k]&1 == 1 {\n\
    \                onesCount++\n            }\n        }\n        if onesCount >\
    \ 0 {\n            return onesCount < len(arr)\n        }\n        return arr[i]\
    \ < arr[j]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3o9p8qv8_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count := 0\n       \
    \ for j := 0; j < len(arr); j++ {\n            if arr[j] == i {\n            \
    \    count++\n            }\n        }\n        if count > 0 {\n            result[i]\
    \ = count\n        } else {\n            result[i] = arr[i]\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpd052ygyu_test.go:53: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpd052ygyu_test.go:53:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpd052ygyu_test.go:53: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpd052ygyu_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=3) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpd052ygyu_test.go:53: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=1) %!s(int=32) %!s(int=1)]'\n  \
    \  --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpd052ygyu_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=1) %!s(int=16) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__7\
    \ (0.00s)\n        tmpd052ygyu_test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=16)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i, v := range arr {\n\
    \        count[v]++\n    }\n    for i := 0; i < len(arr); i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := 0; i < len(arr); i++ {\n        if count[arr[i]]\
    \ == 1 {\n            j := i\n            for ; j < len(arr) && count[arr[j]]\
    \ > 0; j++ {\n                count[arr[j]] -= 1\n            }\n            result[i]\
    \ = arr[j]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxx5t0s61_test.go:18:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = arr[i]\n    }\n    for\
    \ i := range count {\n        if count[i] == 0 {\n            continue\n     \
    \   }\n        j := i\n        for j--; j >= 0 && count[j] == 0; j-- {\n     \
    \   }\n        if j == -1 {\n            break\n        }\n        result[i] =\
    \ arr[j]\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpvc4ugbv__test.go:22 +0x113\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpvc4ugbv__test.go:49 +0xa8\ntesting.tRunner(0xc0001a0340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = arr[i]\n    }\n    for\
    \ i := range count {\n        if count[i] > 1 {\n            j := i\n        \
    \    for k := i - 1; k >= 0; k-- {\n                if count[k] == count[j] {\n\
    \                    result[k] = arr[j]\n                    count[k]--\n    \
    \                j--\n                }\n            }\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmplvyy4o9f_test.go:22 +0x11d\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmplvyy4o9f_test.go:49 +0xa8\ntesting.tRunner(0xc000120340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = 0\n    }\n    for i :=\
    \ range count {\n        if count[i] > 0 {\n            result[i] = i\n      \
    \  }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result \nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkxs1bbdt_test.go:122:27: expected ''{'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n                onesCount++\n\
    \            }\n        }\n        if onesCount > 0 {\n            return onesCount\
    \ > arr[j].(float64) - arr[i].(float64)\n        } else {\n            return\
    \ arr[j].(float64) - arr[i].(float64)\n        }\n    })\n    return arr\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpho33ty2d_test.go:17:5: undefined: sort

    /tmp/tmpho33ty2d_test.go:25:32: invalid operation: arr[j] (variable of type int)
    is not an interface

    /tmp/tmpho33ty2d_test.go:25:51: invalid operation: arr[i] (variable of type int)
    is not an interface

    /tmp/tmpho33ty2d_test.go:27:20: invalid operation: arr[j] (variable of type int)
    is not an interface

    /tmp/tmpho33ty2d_test.go:27:39: invalid operation: arr[i] (variable of type int)
    is not an interface

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int, len(arr))\n    for i := range arr\
    \ {\n        count[arr[i]]++\n    }\n    for i := range arr {\n        if count[arr[i]]\
    \ == 1 {\n            result[i] = arr[i]\n        } else {\n            result[i]\
    \ = count[arr[i]]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmppmyctoxq_test.go:51: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmppmyctoxq_test.go:51:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmppmyctoxq_test.go:51: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmppmyctoxq_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=3) %!s(int=77) %!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=7) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmppmyctoxq_test.go:51: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i, v := range arr {\n\
    \        count[v]++\n    }\n    for _, v := range arr {\n        result[count[v]-1]\
    \ = v\n        count[v]--\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7t984c8j_test.go:18:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = arr[i]\n    }\n    for\
    \ i := range count {\n        if count[i] > 1 {\n            result[i] = result[i]\
    \ + result[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmp576f373h_test.go:22\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmp576f373h_test.go:42\
    \ +0xda6\ntesting.tRunner(0xc0001964e0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int)\n    for _, v := range arr {\n   \
    \     count[v]++\n    }\n    for _, v := range arr {\n        result[count[v]-1]\
    \ = v\n        count[v]--\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp8vwuj8by_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp8vwuj8by_test.go:48:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp8vwuj8by_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmp8vwuj8by_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=4)\
    \ %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp8vwuj8by_test.go:48: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp8vwuj8by_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmp8vwuj8by_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=32)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = arr[i]\n    }\n    for\
    \ i := range count {\n        if count[i] == 0 {\n            continue\n     \
    \   }\n        j := i\n        for {\n            j += 1\n            if count[j]\
    \ == 0 {\n                break\n            }\n            if count[j] < count[i]\
    \ {\n                result[i], result[j] = result[j], result[i]\n           \
    \ }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpou1hj9sz_test.go:22 +0x125\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpou1hj9sz_test.go:52 +0xa8\ntesting.tRunner(0xc000192680, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n  \
    \      oneCount := 0\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] == 1 {\n                oneCount++\n            }\n        }\n      \
    \  if oneCount > 0 {\n            oneCount -= 1\n        }\n        result[i]\
    \ = oneCount\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := 0;\
    \ j < len(arr); j++ {\n            if result[j] > result[i] {\n              \
    \  tmp := result[j]\n                result[j] = result[i]\n                result[i]\
    \ = tmp\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xqza8ga_test.go:17:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        count[arr[i]]++\n    }\n    for\
    \ i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if count[arr[i]] == 1 {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if\
    \ count[arr[i]] > 1 {\n            result[i] = arr[i]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmp_g1dl81m_test.go:20 +0x112\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmp_g1dl81m_test.go:45 +0xa8\ntesting.tRunner(0xc0001a01a0, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074057
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int)\n    for _, v := range arr {\n   \
    \     count[v]++\n    }\n    for _, v := range arr {\n        if count[v] == 1\
    \ {\n            result[count[v]] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp9zw7575e_test.go:49: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp9zw7575e_test.go:49:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=0) %!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp9zw7575e_test.go:49: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmp9zw7575e_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=0)\
    \ %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp9zw7575e_test.go:49: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=0) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp9zw7575e_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=0) %!s(int=32) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmp9zw7575e_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=0)\
    \ %!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        if arr[i] == 1 {\n       \
    \     return true\n        }\n        if arr[j] == 1 {\n            return false\n\
    \        }\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfxudz61__test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    for _, v := range arr {\n        result := make([]int, len(arr))\n      \
    \  for i := range arr {\n            if arr[i] == 1 {\n                result[i]\
    \ = v\n            }\n        }\n        sort.Ints(result)\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxzym268j_test.go:24:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k]&(1<<uint(k)) == 0 {\n   \
    \             oneCount++\n            }\n        }\n        if oneCount > len(arr)/2\
    \ {\n            return true\n        }\n        return false\n    })\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmfyhq3cm_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        ones, _ := strconv.Atoi(arr[i])\n\
    \        others, _ := strconv.Atoi(arr[j])\n        return ones < others\n   \
    \ })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpln95roui_test.go:17:5: undefined: sort

    /tmp/tmpln95roui_test.go:18:20: undefined: strconv

    /tmp/tmpln95roui_test.go:19:22: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        count[i] = 0\n        for j := 0; j < len(arr); j++ {\n     \
    \       if arr[i] == arr[j] {\n                count[i]++\n            }\n   \
    \     }\n    }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        if count[i] > 1 {\n     \
    \       result[i] = count[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp9efjkbbw_test.go:57: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp9efjkbbw_test.go:57:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp9efjkbbw_test.go:57: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp9efjkbbw_test.go:57: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=3) %!s(int=77) %!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=7) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp9efjkbbw_test.go:57: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzvf3voqq_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n                onesCount++\n\
    \            }\n        }\n        if onesCount > 0 {\n            return onesCount\
    \ > arr[j].(bool)\n        } else {\n            return arr[j].(bool) < arr[i].(bool)\n\
    \        }\n    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplal6gu9n_test.go:17:5: undefined: sort

    /tmp/tmplal6gu9n_test.go:25:32: invalid operation: arr[j] (variable of type int)
    is not an interface

    /tmp/tmplal6gu9n_test.go:27:20: invalid operation: arr[j] (variable of type int)
    is not an interface

    /tmp/tmplal6gu9n_test.go:27:36: invalid operation: arr[i] (variable of type int)
    is not an interface

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        if arr[i] == 1 {\n       \
    \     return true\n        }\n        if arr[j] == 1 {\n            return false\n\
    \        }\n        return arr[i]-arr[j] <= 0\n    })\n    return arr\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_o1gg4st_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    for _, v := range arr {\n        result := append(result, v)\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukyb7_nh_test.go:18:9: result declared but not used

    /tmp/tmpukyb7_nh_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n    }\n    for i := 0; i < len(arr); i++ {\n        if\
    \ count == 0 {\n            result = append(result, arr[i])\n        }\n     \
    \   if count == 1 {\n            if arr[i] > 0 {\n                result = append(result,\
    \ arr[i]-1)\n            }\n        }\n        if count > 1 {\n            if\
    \ arr[i] > 0 {\n                result = append(result, arr[i]-2)\n          \
    \  }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpdkzbu020_test.go:64: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpdkzbu020_test.go:64: expected '[%!s(int=-4) %!s(int=-2)\
    \ %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got '[%!s(int=-2) %!s(int=-3) %!s(int=-4)\
    \ %!s(int=-5) %!s(int=-6) %!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmpdkzbu020_test.go:64:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=0) %!s(int=2)\
    \ %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n\
    \        tmpdkzbu020_test.go:64: expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]',\
    \ got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5) %!s(int=3) %!s(int=5)\
    \ %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2) %!s(int=5) %!s(int=77)\
    \ %!s(int=4) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpdkzbu020_test.go:64:\
    \ expected '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]',\
    \ got '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5) %!s(int=3)\
    \ %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpdkzbu020_test.go:64: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16)\
    \ %!s(int=32) %!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]'\n   \
    \ --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmpdkzbu020_test.go:64:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(in"
  timestamp: 1660074058
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        if arr[i] == 1 {\n       \
    \     return true\n        }\n        if arr[j] == 1 {\n            return false\n\
    \        }\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfxudz61__test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzvf3voqq_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n    }\n    if count == 0 {\n        return arr\n    }\n\
    \    for _, v := range arr {\n        if v == 0 {\n            continue\n    \
    \    }\n        if count > 0 {\n            if result[len(result)-1] < v {\n \
    \               result = append(result, v)\n            }\n        } else {\n\
    \            if v < result[len(result)-1] {\n                result = append(result,\
    \ v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpfbtta383_test.go:66: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpfbtta383_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpfbtta383_test.go:66: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpfbtta383_test.go:66: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpfbtta383_test.go:66: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    result := make([]int, len(arr))\n    count := make(map[int]int)\n    for\
    \ _, v := range arr {\n        count[v]++\n    }\n    for _, v := range arr {\n\
    \        if count[v] == 1 {\n            result[count[v]] = v\n        }\n   \
    \ }\n    for _, v := range arr {\n        if count[v] == 1 {\n            result[count[v]]\
    \ = v\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps36nhptd_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps36nhptd_test.go:55:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=0) %!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmps36nhptd_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmps36nhptd_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=0)\
    \ %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmps36nhptd_test.go:55: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=0) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmps36nhptd_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=0) %!s(int=32) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmps36nhptd_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=0)\
    \ %!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n   \
    \     for k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n        \
    \        oneCount++\n            }\n        }\n        if oneCount > 0 {\n   \
    \         return true\n        }\n        if oneCount == 0 {\n            return\
    \ false\n        }\n        return arr[j] < arr[i]\n    })\n    return arr\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeen8tmzr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    for _, v := range arr {\n        result := append(result, v)\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukyb7_nh_test.go:18:9: result declared but not used

    /tmp/tmpukyb7_nh_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        ones, count := count_ones(arr[i])\n\
    \        result[i] = arr[i]\n        if count > 1 {\n            decimal, err\
    \ := decimal(arr[i])\n            if err != nil {\n                panic(err)\n\
    \            }\n            decimal = decimal * 10 + ones\n            result[i]\
    \ = decimal\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpephltzvh_test.go:18:24: undefined: count_ones

    /tmp/tmpephltzvh_test.go:21:29: undefined: decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n    \
    \    for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n         \
    \       oneCount++\n            }\n        }\n        if oneCount > 0 {\n    \
    \        result[i] = oneCount\n        } else {\n            result[i] = arr[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpcqs54m77_test.go:53: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpcqs54m77_test.go:53:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpcqs54m77_test.go:53: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcqs54m77_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpcqs54m77_test.go:53: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int, len(arr))\n    for _, v := range arr\
    \ {\n        count[v]++\n    }\n    for _, v := range arr {\n        if count[v]\
    \ == 1 {\n            result[count[v]] = v\n        }\n    }\n    for _, v :=\
    \ range arr {\n        count[v]--\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpe52svk6n_test.go:52: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpe52svk6n_test.go:52:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=0) %!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpe52svk6n_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpe52svk6n_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=0)\
    \ %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpe52svk6n_test.go:52: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=0) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpe52svk6n_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=0) %!s(int=32) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmpe52svk6n_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=0)\
    \ %!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpywh1acn6_test.go:19\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpywh1acn6_test.go:37\
    \ +0xe66\ntesting.tRunner(0xc0001924e0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int)\n    for _, v := range arr {\n   \
    \     count[v]++\n    }\n    for _, v := range arr {\n        if count[v] == 1\
    \ {\n            result[count[v]] = v\n        } else {\n            count[v]--\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp1p42yuys_test.go:51: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp1p42yuys_test.go:51:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=0) %!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp1p42yuys_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmp1p42yuys_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp1p42yuys_test.go:51: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=0) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp1p42yuys_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=0) %!s(int=32) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmp1p42yuys_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=0)\
    \ %!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[i] > 1 {\n            j\
    \ := i\n            for k := 0; k < count[i]; k++ {\n                j--\n   \
    \             result[j+1] = result[j]\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmplxcey4yp_test.go:22 +0x125\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmplxcey4yp_test.go:46 +0xa8\ntesting.tRunner(0xc0001a0340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpywh1acn6_test.go:19\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpywh1acn6_test.go:37\
    \ +0xe66\ntesting.tRunner(0xc0001924e0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n        if count == 1 {\n            result = append(result,\
    \ 0)\n        }\n    }\n    return sort_array_test(result)\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj5xx85_r_test.go:29:12: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n    }\n    if count > 0 {\n        result = append(result,\
    \ count)\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj6c331eg_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        count += v\n    }\n \
    \   for _, v := range arr {\n        if v > 0 {\n            count -= v\n    \
    \    } else {\n            result += v\n        }\n    }\n    for _, v := range\
    \ arr {\n        if v > 0 {\n            result += v\n        }\n    }\n    for\
    \ _, v := range arr {\n        if v > 0 {\n            count += v\n        }\n\
    \    }\n    for _, v := range arr {\n        if v > 0 {\n            count -=\
    \ v\n        }\n    }\n    for _, v := range arr {\n        if v > 0 {\n     \
    \       result += v\n        }\n    }\n    for _, v := range arr {\n        if\
    \ v > 0 {\n            count += v\n        }\n    }\n    for _, v := range arr\
    \ {\n        if v > 0 {\n            count -= v\n        }\n    }\n    for _,\
    \ v := range arr {\n        if v > 0 {\n            result += v\n        }\n \
    \   }\n    for _, v := range arr {\n        if v > 0 {\n            count += v\n\
    \        }\n    }\n    for _, v := range arr {\n        if v > 0 {\n         \
    \   count -= v\n        }\n    }\n    for _, v := range arr {\n        if v >\
    \ 0 {\n            result += v\n        }\n    }\n    for _, v := range arr {\n\
    \        if v > 0 {\n            count += v\n        }\n    }\n    for _, v :=\
    \ range arr {\n        if v > 0 {\n            count -= v\n        }\n    }\n\
    \    for _, v := range arr {\n        if v > 0 {\n            result += v\n  \
    \      }\n    }\n    for _, v := range arr {\n        if v > 0 {\n           \
    \ count += v\n        }\n    }\n    for _, v := range arr {\n        if v > 0\
    \ {\n            count -= v\n        }\n    }\n    for _, v := range arr {\n \
    \       if v > 0 {\n            result += v\n        }\n    }\n    for _, v :=\
    \ range arr {\n        if v > 0 {\n            count += v\n        }\n    }\n\
    \    for _, v := range arr {\n        if v > 0 {\n            count -= v\n   \
    \     }\n    }\n    for _, v := range arr {\n        if v > 0 {\n            result\
    \ += v\n        }\n    }\n    for _, v := range arr {\n        if v > 0 {\n  \
    \          count += v\n        }\n    }\n    for _, v := range arr {\n       \
    \ if v > 0 {\n            count -= v\n        }\n    }\n    for _, v := range\
    \ \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1akgaxe_test.go:134:6: expected ''('', found TestSort_Array

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        count += int(v)\n   \
    \ }\n    for _, v := range arr {\n        if int(v) == count {\n            result\
    \ = append(result, v)\n        }\n    }\n    for _, v := range arr {\n       \
    \ if int(v) != count {\n            result = append(result, v)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp7aj7j_js_test.go:54: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp7aj7j_js_test.go:54:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp7aj7j_js_test.go:54: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp7aj7j_js_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp7aj7j_js_test.go:54: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4fyhad_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = arr[i]\n    }\n    for\
    \ i := range count {\n        if count[i] > 1 {\n            j := 0\n        \
    \    for k := i + 1; k < len(count); k++ {\n                if count[k] == 1 {\n\
    \                    result[j] = arr[k]\n                    j++\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmp3bnwdgf0_test.go:22 +0x11f\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmp3bnwdgf0_test.go:48 +0xa8\ntesting.tRunner(0xc0001a0340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint64(arr[i])\
    \ >> 63\n        zerosCount := binary.BigEndian.Uint64(arr[j]) >> 63\n       \
    \ if onesCount > zerosCount {\n            return true\n        }\n        if\
    \ onesCount < zerosCount {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_po22o93_test.go:17:5: undefined: sort

    /tmp/tmp_po22o93_test.go:18:22: undefined: binary

    /tmp/tmp_po22o93_test.go:19:23: undefined: binary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n    \
    \    for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n         \
    \       oneCount++\n            }\n        }\n        result[i] = oneCount\n \
    \   }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa0ca3occ_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k]&(1<<uint(k)) == 0 {\n   \
    \             onesCount++\n            }\n        }\n        if onesCount > 0\
    \ {\n            return onesCount < len(arr)\n        } else {\n            return\
    \ arr[i] < arr[j]\n        }\n    })\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe2lhjerd_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4fyhad_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint16(arr[i*2+1])\n\
    \        zerosCount := binary.BigEndian.Uint16(arr[i*2+2])\n        if onesCount\
    \ > zerosCount {\n            return true\n        }\n        return false\n \
    \   })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e09t74p_test.go:17:5: undefined: sort

    /tmp/tmp3e09t74p_test.go:18:22: undefined: binary

    /tmp/tmp3e09t74p_test.go:19:23: undefined: binary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := range arr {\n        count := 0\n        for j := range\
    \ arr {\n            if arr[j] == i {\n                count++\n            }\n\
    \        }\n        result[i] = count\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvr8ymf35_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n    }\n    for _, v := range arr {\n        if v == 0 {\n\
    \            continue\n        }\n        if count == 0 {\n            result\
    \ = append(result, v)\n            continue\n        }\n        if count > 0 {\n\
    \            count -= 1\n        }\n        result = append(result, v)\n    }\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpphqxqem4_test.go:62: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpphqxqem4_test.go:62: expected '[%!s(int=-4) %!s(int=-2)\
    \ %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got '[%!s(int=-2) %!s(int=-3) %!s(int=-4)\
    \ %!s(int=-5) %!s(int=-6) %!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmpphqxqem4_test.go:62:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpphqxqem4_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=2)\
    \ %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=7)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4)\
    \ %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpphqxqem4_test.go:62:\
    \ expected '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]',\
    \ got '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5) %!s(int=3)\
    \ %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpphqxqem4_test.go:62: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16)\
    \ %!s(int=32) %!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]'\n   \
    \ --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmpphqxqem4_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', go"
  timestamp: 1660074059
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n    \
    \    for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n         \
    \       oneCount++\n            }\n        }\n        if oneCount > 0 {\n    \
    \        result[i] = oneCount\n        } else {\n            result[i] = arr[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpcqs54m77_test.go:53: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpcqs54m77_test.go:53:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpcqs54m77_test.go:53: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcqs54m77_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpcqs54m77_test.go:53: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n    \
    \    for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n         \
    \       oneCount++\n            }\n        }\n        result[i] = oneCount\n \
    \   }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa0ca3occ_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n        if count == 1 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpyxflrhol_test.go:52: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpyxflrhol_test.go:52:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpyxflrhol_test.go:52: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyxflrhol_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpyxflrhol_test.go:52: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpetkigdow_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    i := 0\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for _, v := range arr {\n        if count[v]\
    \ == 1 {\n            result[i] = v\n            i++\n        }\n    }\n    for\
    \ _, v := range arr {\n        if count[v] > 1 {\n            count[v]--\n   \
    \     }\n    }\n    for _, v := range arr {\n        if count[v] == 0 {\n    \
    \        result[i] = v\n            i++\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpjfpe6515_test.go:20 +0x15c\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpjfpe6515_test.go:49 +0xa8\ntesting.tRunner(0xc0001a0340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074059
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        if count[i] == 0 {\n            continue\n\
    \        }\n        j := i\n        for j--; j >= 0 && count[j] == 0; j-- {\n\
    \        }\n        if j == -1 {\n            continue\n        }\n        result[i]\
    \ = arr[j]\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpl8x2hzb8_test.go:22 +0x108\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpl8x2hzb8_test.go:46 +0xa8\ntesting.tRunner(0xc0001924e0, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        ones, _ := strconv.Atoi(arr[(i*2)+1][:])\n\
    \        zeros, _ := strconv.Atoi(arr[(j*2)+1][:])\n        return ones > zeros\n\
    \    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tem2597_test.go:17:5: undefined: sort

    /tmp/tmp8tem2597_test.go:18:20: undefined: strconv

    /tmp/tmp8tem2597_test.go:18:33: invalid operation: cannot slice arr[(i * 2) +
    1] (variable of type int)

    /tmp/tmp8tem2597_test.go:19:21: undefined: strconv

    /tmp/tmp8tem2597_test.go:19:34: invalid operation: cannot slice arr[(j * 2) +
    1] (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n   \
    \ for i := 0; i < len(arr); i++ {\n        count[i] = 0\n    }\n    for i := 0;\
    \ i < len(arr); i++ {\n        if arr[i] > 0 {\n            count[arr[i]-1]++\n\
    \        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if count[i] >\
    \ 1 {\n            result[i] = i\n        }\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if count[i] == 1 {\n            result[i] = arr[i]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [76] with length 11 [recovered]\n\tpanic: runtime error: index out of range\
    \ [76] with length 11\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5da0, 0xb, 0x0?})\n\t\
    /tmp/tmp8_7htt05_test.go:24 +0xf7\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmp8_7htt05_test.go:51 +0x2b8\ntesting.tRunner(0xc0001a0340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074060
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n        for\
    \ k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            return true\n\
    \        }\n        if oneCount < len(arr) {\n            return false\n     \
    \   }\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqf_d6kwd_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, 0, len(arr), func(i, j int) bool {\n        onesCount :=\
    \ 0\n        for k := i; k < j; k++ {\n            if arr[k]&1 != 0 {\n      \
    \          onesCount++\n            }\n        }\n        if onesCount > 0 {\n\
    \            return onesCount < len(arr)\n        } else {\n            return\
    \ arr[j] < arr[i]\n        }\n    })\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxds5qt_z_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj60jj86o_test.go:17:12: no new variables on left side of :=

    /tmp/tmpj60jj86o_test.go:17:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n  \
    \      oneCount := 0\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] == 1 {\n                oneCount++\n            }\n        }\n      \
    \  if oneCount > 0 {\n            result := append(result, i)\n        }\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7hnr8kyn_test.go:17:12: no new variables on left side of :=

    /tmp/tmp7hnr8kyn_test.go:26:13: result declared but not used

    /tmp/tmp7hnr8kyn_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int, len(arr))\n    for i := range arr\
    \ {\n        count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [-6] [recovered]\n\tpanic: runtime error: index out of range [-6]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5148a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5148a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpcwiwto3t_test.go:25\n\
    command-line-arguments_test.TestSort_Array(0xc0001a01a0?)\n\t/tmp/tmpcwiwto3t_test.go:38\
    \ +0x1545\ntesting.tRunner(0xc0001a01a0, 0x52a1c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074060
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Write your code\
    \ here\n    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbhj_ts6r_test.go:59:6: expected ''('', found TestSort_Array

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, 0, len(arr), func(i, j int) bool {\n        oneCount := 0\n\
    \        oneCount += arr[i] & 1\n        oneCount += arr[j] & 1\n        if oneCount\
    \ > 0 {\n            return true\n        }\n        if oneCount < 0 {\n     \
    \       return false\n        }\n        return arr[i] < arr[j]\n    })\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx72kyr8k_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpywh1acn6_test.go:19\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpywh1acn6_test.go:37\
    \ +0xe66\ntesting.tRunner(0xc0001924e0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074051
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n        if count == 1 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpyxflrhol_test.go:52: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpyxflrhol_test.go:52:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpyxflrhol_test.go:52: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyxflrhol_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpyxflrhol_test.go:52: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i])\
    \ >> 32\n        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n       \
    \ return onesCount > zerosCount\n    })\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfol7v52c_test.go:17:5: undefined: sort

    /tmp/tmpfol7v52c_test.go:18:22: undefined: binary

    /tmp/tmpfol7v52c_test.go:19:23: undefined: binary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    for _, v := range arr {\n        result := append(result, v)\n    }\n   \
    \ sort.Slice(result, func(i, j int) bool {\n        onesCount := 0\n        for\
    \ _, v := range arr {\n            if v == 1 {\n                onesCount++\n\
    \            }\n        }\n        if onesCount > 0 {\n            return result[i]\
    \ > result[j]\n        }\n        return arr[i] > arr[j]\n    })\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5h7sfax_test.go:18:9: result declared but not used

    /tmp/tmpn5h7sfax_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbucyywdr_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int)\n    for _, v := range arr {\n   \
    \     count[v]++\n    }\n    for _, v := range arr {\n        if count[v] == 1\
    \ {\n            result[count[v]] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp9zw7575e_test.go:49: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp9zw7575e_test.go:49:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=0) %!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp9zw7575e_test.go:49: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmp9zw7575e_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=0)\
    \ %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp9zw7575e_test.go:49: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=0) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp9zw7575e_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=0) %!s(int=32) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmp9zw7575e_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=0)\
    \ %!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunc sort_array(arr []int) []int {\n    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n        if count == 0 {\n            result = append(result,\
    \ 0)\n        }\n    }\n    return sort_array_test(result)\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6zun2rd_test.go:29:12: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074059
